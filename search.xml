<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【每日早报】-2025-01-16 - 星期四</title>
      <link href="/posts/46064.html"/>
      <url>/posts/46064.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>每日早报</title></head><body>    <div style="text-align: center;"> <a href="https://file.alapi.cn/60s/202501161736963102.png" title="每日早报" class="gallery-item"><img src="https://file.alapi.cn/60s/202501161736963102.png"            alt="每日早报" width="100%"></a> </div></body></html></more></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 每日早报 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日早报 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>规则引擎 Drools 8+ 快速入门</title>
      <link href="/posts/19819.html"/>
      <url>/posts/19819.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="规则引擎-Drools-8-快速入门"><a href="#规则引擎-Drools-8-快速入门" class="headerlink" title="规则引擎 Drools 8+快速入门"></a>规则引擎 Drools 8+快速入门</h2><blockquote><p>官网：<a href="https://drools.org/">https://drools.org/</a><br>参考教程：<a href="https://docs.drools.org/8.44.0.Final/drools-docs/drools/introduction/index.html">https://docs.drools.org/8.44.0.Final/drools-docs/drools/introduction/index.html</a><br>项目源码：<a href="https://github.com/kiegroup/drools">https://github.com/kiegroup/drools</a><br>最新版本：<code>8.44.0.Final</code><br>版本参考：<code>Drools 8.41.0.Final</code>、<code>JDK 17</code> 、<code>Maven 3.6.3</code>、<code>SpringBoot 3.3.4</code><br>案例源码：<a href="http://github.com/lingzhexi/drools_demo">案例源码</a></p></blockquote><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p><a href="https://www.drools.org/">Drools</a>是一款由<code>JBoss</code>组织提供的基于<code>Java</code>语言开发的开源规则引擎，可以将复杂且多变的业务规则从硬编码中解放出来，以<strong>规则脚本</strong>的形式存放在文件或特定的存储介质中（例如存放在数据库中），使得业务规则的变更不需要修改项目代码、重启服务器就可以在线上环境立即生效。</p><p><a href="https://s2.loli.net/2024/12/24/3fpThEiVN5CWYbx.png" title="drools" class="gallery-item"><img src="https://s2.loli.net/2024/12/24/3fpThEiVN5CWYbx.png" alt="drools"></a></p><h3 id="2、场景"><a href="#2、场景" class="headerlink" title="2、场景"></a>2、场景</h3><h4 id="2-1、需求"><a href="#2-1、需求" class="headerlink" title="2.1、需求"></a>2.1、需求</h4><p>某电商平台的促销活动，活动规则是根据⽤户购买订单的⾦额给⽤户送相应的积分，购买的越多送的积分越多用户购买的金额和对应送多少积分的规则如下：</p><table><thead><tr><th>规则编号</th><th>订单金额</th><th>奖励积分</th></tr></thead><tbody><tr><td>1</td><td>100元以下</td><td>不加分</td></tr><tr><td>2</td><td>100元 - 500元</td><td>加100分</td></tr><tr><td>3</td><td>500元 - 1000元</td><td>加500分</td></tr><tr><td>4</td><td>1000元以上</td><td>加1000分</td></tr><tr><td>5</td><td>…</td><td>…</td></tr></tbody></table><h4 id="2-2、传统方式-if…else"><a href="#2-2、传统方式-if…else" class="headerlink" title="2.2、传统方式 if…else"></a>2.2、传统方式 if…else</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderPoint</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getamount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        order<span class="token punctuation">.</span><span class="token function">setScore</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getamount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> order<span class="token punctuation">.</span><span class="token function">getamount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        order<span class="token punctuation">.</span><span class="token function">setScore</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getamount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">500</span> <span class="token operator">&amp;&amp;</span> order<span class="token punctuation">.</span><span class="token function">getamount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        order<span class="token punctuation">.</span><span class="token function">setScore</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        order<span class="token punctuation">.</span><span class="token function">setScore</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存在硬编码问题：</p><p>1、硬编码实现业务规则难以维护</p><p>2、硬编码实现业务规则难以应对变化</p><p>3、业务规则发生变化需要修改代码，重启服务后才能生效</p><h4 id="2-3、策略模式-Strategy"><a href="#2-3、策略模式-Strategy" class="headerlink" title="2.3、策略模式 Strategy"></a>2.3、策略模式 Strategy</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Strategy</span> <span class="token punctuation">&#123;</span>    <span class="token function">addScore</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Strategy1</span> <span class="token punctuation">&#123;</span>    <span class="token function">addScore</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">interface</span> <span class="token class-name">StrategyN</span> <span class="token punctuation">&#123;</span>    <span class="token function">addScore</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Environment</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Strategy</span> strategy<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Environment</span><span class="token punctuation">(</span><span class="token class-name">Strategy</span> strategy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addScore</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> strategy<span class="token punctuation">.</span><span class="token function">addScore</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果需求改变，积分层次增加，比例调整？如何分离业务规则，不修改源码的基础上动态实现调整？</p><p>此时我们需要引入<strong>规则引擎</strong>来帮助我们将规则从代码中分离出去，让开发人员从规则的代码逻辑中解放出来，把规则的维护和设置交由业务人员去管理。</p><h3 id="3、规则引擎概述"><a href="#3、规则引擎概述" class="headerlink" title="3、规则引擎概述"></a>3、规则引擎概述</h3><h4 id="3-1、是什么"><a href="#3-1、是什么" class="headerlink" title="3.1、是什么"></a>3.1、是什么</h4><p><strong>规则引擎</strong>，全称为<strong>业务规则管理系统</strong>，英文名为<code>BRMS</code>(即<code>Business Rule Management System</code>)。规则引擎的主要思想是将应用程序中的<strong>业务决策部分分离</strong>出来，并使用预定义的语义模块编写业务决策（<strong>业务规则</strong>），由用户或开发者在需要时进行配置、管理。</p><p>需要注意的是规则引擎并不是一个具体的技术框架，而是指的一类系统，即业务规则管理系统。目前市面上具体的规则引擎产品有：<code>drools、VisualRules、iLog</code>等。</p><p>规则引擎实现了将业务决策从应用程序代码中分离出来，接收数据输入，解释业务规则，并根据业务规则做出业务决策。规则引擎其实就是一个输入输出平台。</p><p>系统中引入规则引擎后，业务规则不再以程序代码的形式驻留在系统中，取而代之的是处理规则的<strong>规则引擎</strong>，业务规则存储在<strong>规则库</strong>中，完全独立于程序。业务人员可以像管理数据一样对业务规则进行管理，比如查询、添加、更新、统计、提交业务规则等。业务规则被加载到规则引擎中供应用系统调用。</p><h4 id="3-2、优势"><a href="#3-2、优势" class="headerlink" title="3.2、优势"></a>3.2、优势</h4><p>使用规则引擎的优势如下：</p><p>1、业务规则与系统代码分离，实现业务规则的集中管理</p><p>2、在不重启服务的情况下可随时对业务规则进行扩展和维护</p><p>3、可以动态修改业务规则，从而快速响应需求变更</p><p>4、规则引擎是相对独立的，只关心业务规则，使得业务分析人员也可以参与编辑、维护系统的业务规则</p><p>5、减少了硬编码业务规则的成本和风险</p><p>6、使用规则引擎提供的规则编辑工具，使复杂的业务规则实现变得的简单</p><h4 id="3-3、应用场景"><a href="#3-3、应用场景" class="headerlink" title="3.3、应用场景"></a>3.3、应用场景</h4><p>对于一些存在比较复杂的业务规则并且业务规则会频繁变动的系统比较适合使用规则引擎，如下：</p><p>1、风险控制系统—-风险贷款、风险评估</p><p>2、反欺诈项目—-银行贷款、征信验证</p><p>3、决策平台系统—-财务计算</p><p>4、促销平台系统—-满减、打折、加价购</p><h3 id="4、Drools入门案例"><a href="#4、Drools入门案例" class="headerlink" title="4、Drools入门案例"></a>4、Drools入门案例</h3><h4 id="4-1、创建springboot项目"><a href="#4-1、创建springboot项目" class="headerlink" title="4.1、创建springboot项目"></a>4.1、创建springboot项目</h4><pre class="line-numbers language-none"><code class="language-none">drools_demo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>GroupId：com.stormling</code><br><a href="https://s2.loli.net/2024/12/24/emR2vgKh6QHFUSo.png" title="创建项目" class="gallery-item"><img src="https://s2.loli.net/2024/12/24/emR2vgKh6QHFUSo.png" alt="创建项目"></a></p><h4 id="4-2、SpringBoot版本"><a href="#4-2、SpringBoot版本" class="headerlink" title="4.2、SpringBoot版本"></a>4.2、<code>SpringBoot</code>版本</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-3、引入依赖"><a href="#4-3、引入依赖" class="headerlink" title="4.3、引入依赖"></a>4.3、引入依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>drools.version</span><span class="token punctuation">></span></span>8.41.0.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>drools.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--test--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--drools 规则引擎--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.drools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>drools-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;drools.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.drools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>drools-compiler<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;drools.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.drools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>drools-decisiontables<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;drools.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.drools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>drools-mvel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;drools.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--lombok用来简化实体类--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4、Idea中安装Drools插件"><a href="#4-4、Idea中安装Drools插件" class="headerlink" title="4.4、Idea中安装Drools插件"></a>4.4、Idea中安装Drools插件</h4><p><a href="https://s2.loli.net/2024/12/24/45wytksZNTrl9ja.png" title="Drools插件" class="gallery-item"><img src="https://s2.loli.net/2024/12/24/45wytksZNTrl9ja.png" alt="Drools插件"></a></p><h3 id="5、编写代码"><a href="#5、编写代码" class="headerlink" title="5、编写代码"></a>5、编写代码</h3><h4 id="5-1、添加Drools配置类"><a href="#5-1、添加Drools配置类" class="headerlink" title="5.1、添加Drools配置类"></a>5.1、添加Drools配置类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>stormling<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>kie<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">KieServices</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>kie<span class="token punctuation">.</span>api<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>kie<span class="token punctuation">.</span>api<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">KieContainer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>kie<span class="token punctuation">.</span>api<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">KieSession</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>kie<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ResourceFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token comment">/** * 规则引擎配置类 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DroolsConfig</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">KieServices</span> kieServices <span class="token operator">=</span> <span class="token class-name">KieServices<span class="token punctuation">.</span>Factory</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//制定规则文件的路径</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">RULES_CUSTOMER_RULES_DRL</span> <span class="token operator">=</span> <span class="token string">"rules/order.drl"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">KieContainer</span> <span class="token function">kieContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获得Kie容器对象</span>        <span class="token class-name">KieFileSystem</span> kieFileSystem <span class="token operator">=</span> kieServices<span class="token punctuation">.</span><span class="token function">newKieFileSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        kieFileSystem<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">ResourceFactory</span><span class="token punctuation">.</span><span class="token function">newClassPathResource</span><span class="token punctuation">(</span><span class="token constant">RULES_CUSTOMER_RULES_DRL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">KieBuilder</span> kieBuilder <span class="token operator">=</span> kieServices<span class="token punctuation">.</span><span class="token function">newKieBuilder</span><span class="token punctuation">(</span>kieFileSystem<span class="token punctuation">)</span><span class="token punctuation">;</span>        kieBuilder<span class="token punctuation">.</span><span class="token function">buildAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">KieModule</span> kieModule <span class="token operator">=</span> kieBuilder<span class="token punctuation">.</span><span class="token function">getKieModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">KieContainer</span> kieContainer <span class="token operator">=</span> kieServices<span class="token punctuation">.</span><span class="token function">newKieContainer</span><span class="token punctuation">(</span>kieModule<span class="token punctuation">.</span><span class="token function">getReleaseId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> kieContainer<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>说明：</strong></p><ul><li>定义了一个 <code>KieContainer</code>的<code>Spring Bean</code> ，<code>KieContainer</code>用于通过加载应用程序的<code>/resources</code>文件夹下的规则文件来构建规则引擎。</li><li>创建<code>KieFileSystem</code>实例并配置规则引擎并从应用程序的资源目录加载规则的 <code>DRL</code> 文件。</li><li>使用<code>KieBuilder</code>实例来构建 <code>drools</code> 模块。我们可以使用KieSerive单例实例来创建 <code>KieBuilder</code> 实例。</li><li>最后，使用 <code>KieService</code> 创建一个 <code>KieContainer</code> 并将其配置为 <code>spring bean</code></li></ul><h4 id="5-2、创建实体类Order"><a href="#5-2、创建实体类Order" class="headerlink" title="5.2、创建实体类Order"></a>5.2、创建实体类Order</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>stormling<span class="token punctuation">.</span>model</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> amount<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> score<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3、order-drl"><a href="#5-3、order-drl" class="headerlink" title="5.3、order.drl"></a>5.3、order.drl</h4><p>创建规则文件<code>resources/rules/order.drl</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//订单积分规则</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>order</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>stormling<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">Order</span><span class="token comment">//规则一：100元以下 不加分</span>rule <span class="token string">"order_rule_1"</span>    when        $order<span class="token operator">:</span><span class="token class-name">Order</span><span class="token punctuation">(</span>amount <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span>    then        $order<span class="token punctuation">.</span><span class="token function">setScore</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功匹配到规则一：100元以下 不加分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end<span class="token comment">//规则二：100元 - 500元 加100分</span>rule <span class="token string">"order_rule_2"</span>    when        $order<span class="token operator">:</span><span class="token class-name">Order</span><span class="token punctuation">(</span>amount <span class="token operator">>=</span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> amount <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">)</span>    then         $order<span class="token punctuation">.</span><span class="token function">setScore</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功匹配到规则二：100元 - 500元 加100分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end<span class="token comment">//规则三：500元 - 1000元 加500分</span>rule <span class="token string">"order_rule_3"</span>    when        $order<span class="token operator">:</span><span class="token class-name">Order</span><span class="token punctuation">(</span>amount <span class="token operator">>=</span> <span class="token number">500</span> <span class="token operator">&amp;&amp;</span> amount <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">)</span>    then         $order<span class="token punctuation">.</span><span class="token function">setScore</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功匹配到规则三：500元 - 1000元 加500分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end<span class="token comment">//规则四：1000元以上 加1000分</span>rule <span class="token string">"order_rule_4"</span>    when        $order<span class="token operator">:</span><span class="token class-name">Order</span><span class="token punctuation">(</span>amount <span class="token operator">>=</span> <span class="token number">1000</span><span class="token punctuation">)</span>    then         $order<span class="token punctuation">.</span><span class="token function">setScore</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功匹配到规则四：1000元以上 加1000分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-4、编写测试类"><a href="#5-4、编写测试类" class="headerlink" title="5.4、编写测试类"></a>5.4、编写测试类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>stormling</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>stormling<span class="token punctuation">.</span>drools<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">Order</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>kie<span class="token punctuation">.</span>api<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">KieContainer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>kie<span class="token punctuation">.</span>api<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">KieSession</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">DroolsDemosApplicationTests</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">KieContainer</span> kieContainer<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//从Kie容器对象中获取会话对象</span>        <span class="token class-name">KieSession</span> session <span class="token operator">=</span> kieContainer<span class="token punctuation">.</span><span class="token function">newKieSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Fact对象，事实对象</span>        <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">setamount</span><span class="token punctuation">(</span><span class="token number">1300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将Order对象插入到工作内存中</span>        session<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//激活规则，由Drools框架自动进行规则匹配，如果规则匹配成功，则执行当前规则</span>        session<span class="token punctuation">.</span><span class="token function">fireAllRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//关闭会话</span>        session<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单金额："</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getamount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">"，添加积分："</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">匹配规则4：1000订单金额：1300.0积分：1000.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过上面的入门案例我们可以发现，使用<code>drools</code>规则引擎主要工作就是编写规则文件，在规则文件中定义跟业务相关的业务规则。规则定义好后就需要调用<code>drools</code>提供的<code>API</code>将数据提供给规则引擎进行规则模式匹配，规则引擎会执行匹配成功的规则并将计算的结果返回给我们。</p><p>可能大家会有疑问，就是我们虽然没有在代码中编写规则的判断逻辑，但是我们还是在规则文件中编写了业务规则，这跟在代码中编写规则有什么本质的区别呢？</p><p>我们前面其实已经提到，使用规则引擎时业务规则可以做到<strong>动态管理</strong>。业务人员可以像管理数据一样对业务规则进行管理，比如查询、添加、更新、统计、提交业务规则等。这样就可以做到在<strong>不重启服务</strong>的情况下<strong>调整业务规则</strong>。</p><h3 id="6、小结"><a href="#6、小结" class="headerlink" title="6、小结"></a>6、小结</h3><h4 id="6-1、规则引擎构成"><a href="#6-1、规则引擎构成" class="headerlink" title="6.1、规则引擎构成"></a>6.1、规则引擎构成</h4><p><code>drools</code>规则引擎由以下三部分构成：</p><ul><li>Working Memory（工作内存）</li><li>Rule Base（规则库）</li><li>Inference Engine（推理引擎）<ul><li>Pattern Matcher（匹配器） 具体匹配哪一个规则，由这个完成</li><li>Agenda(议程)</li><li>Execution Engine（执行引擎）</li></ul></li></ul><p><a href="https://s2.loli.net/2024/12/24/JRLKoSUflkhIZ9Y.jpg" title="Drools构成" class="gallery-item"><img src="https://s2.loli.net/2024/12/24/JRLKoSUflkhIZ9Y.jpg" alt="Drools构成"></a></p><h4 id="6-2、相关概念说明"><a href="#6-2、相关概念说明" class="headerlink" title="6.2、相关概念说明"></a>6.2、相关概念说明</h4><p><strong>Working Memory</strong>：工作内存，<code>drools</code>规则引擎会从<code>Working Memory中</code>获取数据并和规则文件中定义的规则进行模式匹配，所以我们开发的应用程序只需要将我们的<strong>数据插入</strong>到<code>Working Memory</code>中即可，例如本案例中我们调用<code>kieSession.insert(order)</code>就是将<code>order</code>对象插入到了<strong>工作内存</strong>中。</p><p><strong>Fact</strong>：事实，是指在<code>drools</code> 规则应用当中，将一个<strong>普通的<code>JavaBean</code>插入到<code>Working Memory后</code>的对象</strong>就是<strong>Fact对象</strong>，例如本案例中的<code>Order</code>对象就属于<code>Fact</code>对象。<code>Fact</code>对象是我们的应用和规则引擎进行<strong>数据交互</strong>的桥梁或通道。</p><p><strong>Rule Base</strong>：规则库，我们在规则文件中定义的规则都会被加载到规则库中。</p><p><strong>Pattern Matcher</strong>：匹配器，将<code>Rule Base</code>中的所有规则与<code>Working Memory</code>中的<code>Fact</code>对象进行<strong>模式匹配</strong>，匹配成功的规则将被<strong>激活</strong>并放入<code>Agenda</code>（议程）中。</p><p><strong>Agenda</strong>：议程，用于存放通过匹配器进行模式匹配后被激活的规则。</p><p><strong>Execution Engine</strong>：执行引擎，执行<code>Agenda</code>中被激活的规则。<br><a href="https://i-blog.csdnimg.cn/direct/95588868b5c94f048eb01475714c08e7.png#pic_center" title="案例" class="gallery-item"><img src="https://i-blog.csdnimg.cn/direct/95588868b5c94f048eb01475714c08e7.png#pic_center" alt="案例"></a></p><h4 id="6-3、规则引擎执行过程"><a href="#6-3、规则引擎执行过程" class="headerlink" title="6.3、规则引擎执行过程"></a>6.3、规则引擎执行过程</h4><p><a href="https://s2.loli.net/2024/12/24/osJML3OFG9XkuWU.png" title="执行流程" class="gallery-item"><img src="https://s2.loli.net/2024/12/24/osJML3OFG9XkuWU.png" alt="执行流程"></a></p><h4 id="6-4、KIE介绍"><a href="#6-4、KIE介绍" class="headerlink" title="6.4、KIE介绍"></a>6.4、KIE介绍</h4><p>我们在操作<code>Drools</code>时经常使用的<code>API</code>以及它们之间的关系如下图：<br><a href="https://s2.loli.net/2024/12/24/jr7Llc3tOw1dUCo.png" title="核心类关系" class="gallery-item"><img src="https://s2.loli.net/2024/12/24/jr7Llc3tOw1dUCo.png" alt="核心类关系"></a></p><p>通过上面的核心<code>API</code>可以发现，大部分类名都是以<code>Kie</code>开头。<strong>Kie全称为Knowledge Is Everything</strong>，即”知识就是一切”的缩写，是<code>Jboss</code>一系列项目的总称。如下图所示，<code>Kie</code>的主要模块有<code>OptaPlanner</code>、<code>Drools</code>、<code>UberFire</code>、<code>jBPM</code>。</p><p><a href="https://s2.loli.net/2024/12/24/2UgIRiof4G9eEVy.png" title="Kie" class="gallery-item"><img src="https://s2.loli.net/2024/12/24/2UgIRiof4G9eEVy.png" alt="Kie"></a></p><p>通过上图可以看到，<code>Drools</code>是整个<code>KIE</code>项目中的一个组件，<code>Drools</code>中还包括一个<code>Drools-WB</code>的模块，它是一个可视化的规则编辑器。</p><h3 id="7、Drools基础语法"><a href="#7、Drools基础语法" class="headerlink" title="7、Drools基础语法"></a>7、Drools基础语法</h3><h4 id="7-1、规则文件构成"><a href="#7-1、规则文件构成" class="headerlink" title="7.1、规则文件构成"></a>7.1、规则文件构成</h4><p>在使用<code>Drools</code>时非常重要的一个工作就是编写规则文件，通常规则文件的后缀为<code>.drl</code></p><p><strong>drl是Drools Rule Language的缩写</strong>。在规则文件中编写具体的规则内容。</p><p>一套完整的规则文件内容构成如下：</p><table><thead><tr><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>package</td><td>包名，只限于逻辑上的管理，同一个包名下的查询或者函数可以直接调用</td></tr><tr><td>import</td><td>用于导入类或者静态方法</td></tr><tr><td>global</td><td>全局变量</td></tr><tr><td>function</td><td>自定义函数</td></tr><tr><td>query</td><td>查询</td></tr><tr><td>rule end</td><td>规则体</td></tr></tbody></table><p><code>Drools</code>支持的规则文件，除了<code>drl</code>形式，还有<code>Excel</code>文件类型的。</p><h4 id="7-2、规则体语法结构"><a href="#7-2、规则体语法结构" class="headerlink" title="7.2、规则体语法结构"></a>7.2、规则体语法结构</h4><p>规则体是规则文件内容中的重要组成部分，是进行业务规则判断、处理业务结果的部分。</p><p>规则体语法结构如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">rule <span class="token string">"ruleName"</span>    attributes    when        <span class="token constant">LHS</span>     then        <span class="token constant">RHS</span>end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**<code>rule</code>**：关键字，表示规则开始，参数为规则的唯一名称。</p><p>**<code>attributes</code>**：规则属性，是<code>rule</code>与<code>when</code>之间的参数，为可选项。</p><p>**<code>when</code>**：关键字，后面跟规则的条件部分。</p><p><strong><code>LHS</code></strong>(<code>Left Hand Side</code>)：是规则的条件部分的通用名称。它由零个或多个条件元素组成。<strong>如果<code>LHS</code>为空，则它将被视为始终为true的条件元素</strong>。 （左手边）</p><p>**<code>then</code>**：关键字，后面跟规则的结果部分。</p><p><strong><code>RHS</code></strong>(<code>Right Hand Side</code>)：是规则的后果或行动部分的通用名称。 （右手边）</p><p>**<code>end</code>**：关键字，表示一个规则结束。</p><h4 id="7-3、注释"><a href="#7-3、注释" class="headerlink" title="7.3、注释"></a>7.3、注释</h4><p>在<code>drl</code>形式的规则文件中使用注释和<code>Java</code>类中使用注释一致，分为单行注释和多行注释。</p><p>单行注释用<code>&quot;//&quot;</code>进行标记，多行注释以<code>&quot;/*&quot;</code>开始，以”*/“结束。如下示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//规则rule1的注释，这是一个单行注释</span>rule <span class="token string">"rule1"</span>    when    then        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"rule1触发"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end<span class="token comment">/*规则rule2的注释，这是一个多行注释*/</span>rule <span class="token string">"rule2"</span>    when    then        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"rule2触发"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-4、Pattern模式匹配"><a href="#7-4、Pattern模式匹配" class="headerlink" title="7.4、Pattern模式匹配"></a>7.4、Pattern模式匹配</h4><p>前面我们已经知道了<code>Drools</code>中的匹配器可以将<code>Rule Base</code>中的所有规则与<code>Working Memory</code>中的<code>Fact</code>对象进行模式匹配，那么我们就需要在规则体的<code>LHS</code>部分定义规则并进行模式匹配。<code>LHS</code>部分由一个或者多个条件组成，条件又称为<code>pattern</code>。</p><p><strong>pattern的语法结构为：绑定变量名:Object(Field约束)</strong></p><p>其中绑定变量名可以省略，通常绑定变量名的命名一般建议以<code>$</code>开始。如果定义了绑定变量名，就可以在规则体的<code>RHS</code>部分使用此绑定变量名来操作相应的<code>Fact</code>对象。<code>Field</code>约束部分是需要返回<code>true</code>或者<code>false</code>的0个或多个表达式。</p><p>例如我们的入门案例中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//规则二：100元 - 500元 加100分</span>rule <span class="token string">"order_rule_2"</span>    when        $order<span class="token operator">:</span><span class="token class-name">Order</span><span class="token punctuation">(</span>amount <span class="token operator">>=</span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> amount <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">)</span>    then         $order<span class="token punctuation">.</span><span class="token function">setScore</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功匹配到规则二：100元 - 500元 加100分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面的例子我们可以知道，匹配的条件为：</p><p>1、工作内存中必须存在<code>Order</code>这种类型的<code>Fact</code>对象—–类型约束</p><p>2、<code>Fact</code>对象的<code>amount</code>属性值必须大于等于100——属性约束</p><p>3、<code>Fact</code>对象的<code>amount</code>属性值必须小于500——属性约束</p><p>以上条件必须同时满足当前规则才有可能被激活。</p><h4 id="7-5、比较操作符"><a href="#7-5、比较操作符" class="headerlink" title="7.5、比较操作符"></a>7.5、比较操作符</h4><p><code>Drools</code>提供的比较操作符，如下表：</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td><code>&lt;</code></td><td>小于</td></tr><tr><td><code>&gt;</code></td><td>大于</td></tr><tr><td><code>&gt;=</code></td><td>大于等于</td></tr><tr><td><code>&lt;=</code></td><td>小于等于</td></tr><tr><td><code>==</code></td><td>等于</td></tr><tr><td><code>!=</code></td><td>不等于</td></tr><tr><td><code>contains</code></td><td>检查一个Fact对象的某个属性值是否包含一个指定的对象值</td></tr><tr><td><code>not contains</code></td><td>检查一个Fact对象的某个属性值是否不包含一个指定的对象值</td></tr><tr><td><code>memberOf</code></td><td>判断一个Fact对象的某个属性是否在一个或多个集合中</td></tr><tr><td><code>not memberOf</code></td><td>判断一个Fact对象的某个属性是否不在一个或多个集合中</td></tr><tr><td><code>matches</code></td><td>判断一个Fact对象的属性是否与提供的标准的Java正则表达式进行匹配</td></tr><tr><td><code>not matches</code></td><td>判断一个Fact对象的属性是否不与提供的标准的Java正则表达式进行匹配</td></tr></tbody></table><p>前6个比较操作符和Java中的完全相同。</p><h4 id="7-6、Drools内置方法"><a href="#7-6、Drools内置方法" class="headerlink" title="7.6、Drools内置方法"></a>7.6、Drools内置方法</h4><p>规则文件的<code>RHS</code>部分的主要作用是通过<strong>插入，删除或修改工作内存中的Fact数据</strong>，来达到控制规则引擎执行的目的。<code>Drools</code>提供了一些方法可以用来操作工作内存中的数据，<strong>操作完成后规则引擎会重新进行相关规则的匹配，</strong>原来没有匹配成功的规则在我们修改数据完成后有可能就会匹配成功了。</p><h5 id="7-6-1、update方法"><a href="#7-6-1、update方法" class="headerlink" title="7.6.1、update方法"></a>7.6.1、update方法</h5><p><strong>update方法的作用是更新工作内存中的数据，并让相关的规则重新匹配。</strong> （要避免死循环）</p><p>参数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Fact对象，事实对象</span><span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>order<span class="token punctuation">.</span><span class="token function">setamount</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>规则：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//规则一：100元以下 不加分</span>rule <span class="token string">"order_rule_1"</span>    when        $order<span class="token operator">:</span><span class="token class-name">Order</span><span class="token punctuation">(</span>amount <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span>    then        $order<span class="token punctuation">.</span><span class="token function">setamount</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">update</span><span class="token punctuation">(</span>$order<span class="token punctuation">)</span> <span class="token comment">//update方法用于更新Fact对象，会导致相关规则重新匹配</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功匹配到规则一：100元以下 不加分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end<span class="token comment">//规则二：100元 - 500元 加100分</span>rule <span class="token string">"order_rule_2"</span>    when        $order<span class="token operator">:</span><span class="token class-name">Order</span><span class="token punctuation">(</span>amount <span class="token operator">>=</span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> amount <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">)</span>    then         $order<span class="token punctuation">.</span><span class="token function">setScore</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功匹配到规则二：100元 - 500元 加100分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在更新数据时需要注意防止发生死循环。</strong></p><h5 id="7-6-2、insert方法"><a href="#7-6-2、insert方法" class="headerlink" title="7.6.2、insert方法"></a>7.6.2、insert方法</h5><p><strong>insert</strong>方法的作用是向工作内存中插入数据，并让相关的规则重新匹配。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//规则一：100元以下 不加分</span>rule <span class="token string">"order_rule_1"</span>    when        $order<span class="token operator">:</span><span class="token class-name">Order</span><span class="token punctuation">(</span>amount <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span>    then        <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">setamount</span><span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">insert</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//insert方法的作用是向工作内存中插入Fact对象，会导致相关规则重新匹配</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功匹配到规则一：100元以下 不加分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end<span class="token comment">//规则二：100元 - 500元 加100分</span>rule <span class="token string">"order_rule_2"</span>    when        $order<span class="token operator">:</span><span class="token class-name">Order</span><span class="token punctuation">(</span>amount <span class="token operator">>=</span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> amount <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">)</span>    then         $order<span class="token punctuation">.</span><span class="token function">setScore</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功匹配到规则二：100元 - 500元 加100分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-6-3、retract方法"><a href="#7-6-3、retract方法" class="headerlink" title="7.6.3、retract方法"></a>7.6.3、retract方法</h5><p><strong>retract方法的作用是删除工作内存中的数据，并让相关的规则重新匹配。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//规则一：100元以下 不加分</span>rule <span class="token string">"order_rule_1"</span>    when        $order<span class="token operator">:</span><span class="token class-name">Order</span><span class="token punctuation">(</span>amount <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span>    then        <span class="token function">retract</span><span class="token punctuation">(</span>$order<span class="token punctuation">)</span>      <span class="token comment">//retract方法的作用是删除工作内存中的Fact对象，会导致相关规则重新匹配</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功匹配到规则一：100元以下 不加分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8、规则属性-attributes"><a href="#8、规则属性-attributes" class="headerlink" title="8、规则属性 attributes"></a>8、规则属性 attributes</h3><p>前面我们已经知道了规则体的构成如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">rule <span class="token string">"ruleName"</span>    attributes    when        <span class="token constant">LHS</span>    then        <span class="token constant">RHS</span>end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本章节就是针对规则体的<strong>attributes</strong>属性部分进行讲解。Drools中提供的属性如下表(部分属性)：</p><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td>salience</td><td>指定规则执行优先级</td></tr><tr><td>dialect</td><td>指定规则使用的语言类型，取值为java和mvel</td></tr><tr><td>enabled</td><td>指定规则是否启用</td></tr><tr><td>date-effective</td><td>指定规则生效时间</td></tr><tr><td>date-expires</td><td>指定规则失效时间</td></tr><tr><td>activation-group</td><td>激活分组，具有相同分组名称的规则只能有一个规则触发</td></tr><tr><td>agenda-group</td><td>议程分组，只有获取焦点的组中的规则才有可能触发</td></tr><tr><td>timer</td><td>定时器，指定规则触发的时间</td></tr><tr><td>auto-focus</td><td>自动获取焦点，一般结合agenda-group一起使用</td></tr><tr><td>no-loop</td><td>防止死循环</td></tr></tbody></table><p>重点说一下我们项目需要使用的属性</p><h4 id="8-1、salience属性"><a href="#8-1、salience属性" class="headerlink" title="8.1、salience属性"></a>8.1、salience属性</h4><p>salience属性用于指定规则的执行优先级，<strong>取值类型为Integer</strong>。<strong>数值越大越优先执行</strong>。每个规则都有一个默认的执行顺序，如果不设置salience属性，规则体的执行顺序为由上到下。</p><p>可以通过创建规则文件salience.drl来测试salience属性，内容如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>order</span>rule <span class="token string">"rule_1"</span>    when        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    then        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"规则rule_1触发"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end    rule <span class="token string">"rule_2"</span>    when        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    then        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"规则rule_2触发"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>endrule <span class="token string">"rule_3"</span>    when        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    then        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"规则rule_3触发"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过控制台可以看到，由于以上三个规则没有设置salience属性，所以执行的顺序是按照规则文件中规则的顺序由上到下执行的。接下来我们修改一下文件内容：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>order</span>rule <span class="token string">"rule_1"</span>    salience <span class="token number">9</span>    when        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    then        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"规则rule_1触发"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>endrule <span class="token string">"rule_2"</span>    salience <span class="token number">10</span>    when        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    then        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"规则rule_2触发"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>endrule <span class="token string">"rule_3"</span>    salience <span class="token number">8</span>    when        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    then        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"规则rule_3触发"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过控制台可以看到，规则文件执行的顺序是按照我们设置的salience值由大到小顺序执行的。</p><p>建议在编写规则时使用salience属性明确指定执行优先级。</p><h4 id="8-2、no-loop属性"><a href="#8-2、no-loop属性" class="headerlink" title="8.2、no-loop属性"></a>8.2、no-loop属性</h4><p><strong>no-loop</strong>属性用于防止死循环，当规则通过<code>update</code>之类的函数修改了<code>Fact</code>对象时，可能使当前规则再次被激活从而导致死循环。取值类型为<code>Boolean</code>，默认值为<code>false</code>，测试步骤如下：</p><p>编写规则文件<code>/resources/rules/activationgroup.drl</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//订单积分规则</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>order</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>stormling<span class="token punctuation">.</span>drools<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">Order</span><span class="token comment">//规则一：100元以下 不加分</span>rule <span class="token string">"order_rule_1"</span>    no<span class="token operator">-</span>loop <span class="token boolean">true</span>         <span class="token comment">//防止陷入死循环</span>    when        $order<span class="token operator">:</span><span class="token class-name">Order</span><span class="token punctuation">(</span>amount <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span>    then        $order<span class="token punctuation">.</span><span class="token function">setScore</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">update</span><span class="token punctuation">(</span>$order<span class="token punctuation">)</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功匹配到规则一：100元以下 不加分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过控制台可以看到，由于我们没有设置<code>no-loop</code>属性的值，所以发生了死循环。接下来设置<code>no-loop</code>的值为<code>true</code>再次测试则不会发生死循环。</p><h3 id="9、Drools高级语法"><a href="#9、Drools高级语法" class="headerlink" title="9、Drools高级语法"></a>9、Drools高级语法</h3><p>前面章节我们已经知道了一套完整的规则文件内容构成如下：</p><table><thead><tr><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>package</td><td>包名，只限于逻辑上的管理，同一个包名下的查询或者函数可以直接调用</td></tr><tr><td>import</td><td>用于导入类或者静态方法</td></tr><tr><td>global</td><td>全局变量</td></tr><tr><td>function</td><td>自定义函数</td></tr><tr><td>query</td><td>查询</td></tr><tr><td>rule end</td><td>规则体</td></tr></tbody></table><h4 id="9-1、global全局变量"><a href="#9-1、global全局变量" class="headerlink" title="9.1、global全局变量"></a>9.1、global全局变量</h4><p><code>global</code>关键字用于在规则文件中<strong>定义全局变量</strong>，它可以让应用程序的对象在规则文件中能够被访问。可以用来为规则文件提供数据或服务。</p><p>语法结构为：<strong>global 对象类型 对象名称</strong></p><p>在使用<code>global</code>定义的全局变量时有两点需要注意：</p><p>1、如果对象类型为<strong>包装类型</strong>时，在一个规则中改变了<code>global</code>的值，那么<strong>只针对当前规则有效</strong>，对其他规则中的<code>global</code>不会有影响。可以理解为它是当前规则代码中的global副本，规则内部修改不会影响全局的使用。</p><p>2、如果对象类型为**集合类型或<code>JavaBean</code>**时，在一个规则中改变了<code>global</code>的值，对<code>java</code>代码和所有规则都有效。</p><p>订单<code>Order</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>stormling<span class="token punctuation">.</span>drools<span class="token punctuation">.</span>model</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> amount<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>积分<code>Integral</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>stormling<span class="token punctuation">.</span>drools<span class="token punctuation">.</span>model</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Integral</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> score<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>规则文件：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//订单积分规则</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>order</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>stormling<span class="token punctuation">.</span>drools<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">Order</span>global <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>stormling<span class="token punctuation">.</span>drools<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span>Integral</span> integral<span class="token punctuation">;</span><span class="token comment">//规则一：100元以下 不加分</span>rule <span class="token string">"order_rule_1"</span>    no<span class="token operator">-</span>loop <span class="token boolean">true</span>         <span class="token comment">//防止陷入死循环</span>    when        $order<span class="token operator">:</span><span class="token class-name">Order</span><span class="token punctuation">(</span>amount <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span>    then        integral<span class="token punctuation">.</span><span class="token function">setScore</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">update</span><span class="token punctuation">(</span>$order<span class="token punctuation">)</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功匹配到规则一：100元以下 不加分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//从Kie容器对象中获取会话对象</span>    <span class="token class-name">KieSession</span> session <span class="token operator">=</span> kieContainer<span class="token punctuation">.</span><span class="token function">newKieSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//Fact对象，事实对象</span>    <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    order<span class="token punctuation">.</span><span class="token function">setamount</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//全局变量</span>    <span class="token class-name">Integral</span> integral <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    session<span class="token punctuation">.</span><span class="token function">setGlobal</span><span class="token punctuation">(</span><span class="token string">"integral"</span><span class="token punctuation">,</span> integral<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将Order对象插入到工作内存中</span>    session<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//激活规则，由Drools框架自动进行规则匹配，如果规则匹配成功，则执行当前规则</span>    session<span class="token punctuation">.</span><span class="token function">fireAllRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//关闭会话</span>    session<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单金额："</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getamount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加积分："</span> <span class="token operator">+</span> integral<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 规则引擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规则引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系列（二） | Mybatis Plus 3.0+快速入门</title>
      <link href="/posts/60908.html"/>
      <url>/posts/60908.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="Mybatis-Plus-3-0-快速入门"><a href="#Mybatis-Plus-3-0-快速入门" class="headerlink" title="Mybatis Plus 3.0+快速入门"></a>Mybatis Plus 3.0+快速入门</h1><blockquote><p>官网：<a href="https://baomidou.com/">https://baomidou.com/</a></p><p>参考教程：<a href="https://baomidou.com/getting-started/">快速开始</a></p><p>最新版本：<a href="https://baomidou.com/getting-started/#spring-boot3">3.5.7</a> </p><p>对应版本参考：JDK 8+ 、Maven or Gradle</p></blockquote><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a> （简称 MP）是一个 <a href="https://www.mybatis.org/mybatis-3/">MyBatis</a> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><p><a href="https://cdn.jsdelivr.net/gh/lingzhexi/blogImage/post/image-20240927101721314.png" title="Mybatis 最好的搭档" class="gallery-item"><img src="https://cdn.jsdelivr.net/gh/lingzhexi/blogImage/post/image-20240927101721314.png" alt="Mybatis 最好的搭档"></a> </p><h2 id="2、创建并初始化数据库"><a href="#2、创建并初始化数据库" class="headerlink" title="2、创建并初始化数据库"></a>2、创建并初始化数据库</h2><h3 id="2-1、创建数据库"><a href="#2-1、创建数据库" class="headerlink" title="2.1、创建数据库"></a>2.1、创建数据库</h3><p><code>mybatis_plus</code></p><h3 id="2-2、创建-User-表"><a href="#2-2、创建-User-表" class="headerlink" title="2.2、创建 User 表"></a>2.2、创建 <code>User</code> 表</h3><p>其表结构如下：</p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>email</th></tr></thead><tbody><tr><td>1</td><td>Jone</td><td>18</td><td><a href="mailto:&#116;&#x65;&#x73;&#116;&#x31;&#x40;&#x62;&#x61;&#111;&#109;&#105;&#x64;&#111;&#117;&#46;&#99;&#111;&#x6d;">&#116;&#x65;&#x73;&#116;&#x31;&#x40;&#x62;&#x61;&#111;&#109;&#105;&#x64;&#111;&#117;&#46;&#99;&#111;&#x6d;</a></td></tr><tr><td>2</td><td>Jack</td><td>20</td><td><a href="mailto:&#116;&#x65;&#x73;&#x74;&#x32;&#x40;&#98;&#x61;&#x6f;&#109;&#105;&#100;&#111;&#117;&#x2e;&#x63;&#x6f;&#109;">&#116;&#x65;&#x73;&#x74;&#x32;&#x40;&#98;&#x61;&#x6f;&#109;&#105;&#100;&#111;&#117;&#x2e;&#x63;&#x6f;&#109;</a></td></tr><tr><td>3</td><td>Tom</td><td>28</td><td><a href="mailto:&#116;&#101;&#x73;&#116;&#51;&#64;&#98;&#97;&#x6f;&#109;&#x69;&#100;&#111;&#x75;&#x2e;&#99;&#x6f;&#109;">&#116;&#101;&#x73;&#116;&#51;&#64;&#98;&#97;&#x6f;&#109;&#x69;&#100;&#111;&#x75;&#x2e;&#99;&#x6f;&#109;</a></td></tr><tr><td>4</td><td>Sandy</td><td>21</td><td><a href="mailto:&#x74;&#101;&#115;&#x74;&#x34;&#64;&#98;&#x61;&#x6f;&#109;&#105;&#x64;&#111;&#117;&#46;&#99;&#x6f;&#x6d;">&#x74;&#101;&#115;&#x74;&#x34;&#64;&#98;&#x61;&#x6f;&#109;&#105;&#x64;&#111;&#117;&#46;&#99;&#x6f;&#x6d;</a></td></tr><tr><td>5</td><td>Billie</td><td>24</td><td><a href="mailto:&#116;&#101;&#115;&#x74;&#53;&#x40;&#98;&#97;&#x6f;&#x6d;&#105;&#x64;&#x6f;&#x75;&#x2e;&#x63;&#x6f;&#109;">&#116;&#101;&#115;&#x74;&#53;&#x40;&#98;&#97;&#x6f;&#x6d;&#105;&#x64;&#x6f;&#x75;&#x2e;&#x63;&#x6f;&#109;</a></td></tr></tbody></table><p>其对应的数据库 Schema 脚本如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span><span class="token punctuation">(</span>    id <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键ID'</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>    age <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span>    email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'邮箱'</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其对应的数据库 Data 脚本如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> email<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Jone'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'test1@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'test2@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">'test3@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'Sandy'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'test4@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'Billie'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'test5@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、创建项目"><a href="#3、创建项目" class="headerlink" title="3、创建项目"></a>3、创建项目</h2><h3 id="3-1、创建maven项目"><a href="#3-1、创建maven项目" class="headerlink" title="3.1、创建maven项目"></a>3.1、创建maven项目</h3><p><code>mybatis_plus_demo</code></p><p><code>GroupId：com.stormling</code></p><p><a href="https://cdn.jsdelivr.net/gh/lingzhexi/blogImage/post/image-20240927102444438.png" title="创建Mybatis-Plus项目" class="gallery-item"><img src="https://cdn.jsdelivr.net/gh/lingzhexi/blogImage/post/image-20240927102444438.png" alt="创建Mybatis-Plus项目"></a> </p><h3 id="3-2、SpringBoot版本"><a href="#3-2、SpringBoot版本" class="headerlink" title="3.2、SpringBoot版本"></a>3.2、SpringBoot版本</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3、添加依赖"><a href="#3-3、添加依赖" class="headerlink" title="3.3、添加依赖"></a>3.3、添加依赖</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--mybatis-plus--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--mysql--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--lombok用来简化实体类--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4、Idea中安装lombok插件"><a href="#3-4、Idea中安装lombok插件" class="headerlink" title="3.4、Idea中安装lombok插件"></a>3.4、Idea中安装lombok插件</h3><p>使用的是Idea 23.3.4，使用 lombok 是为了简化实体类的代码编程，不了解的同学可以出门左转看下<a href="https://projectlombok.org/features/">lombok特性</a>，后续会专门写一篇lombok相关使用（挖一个坑）</p><p><a href="https://cdn.jsdelivr.net/gh/lingzhexi/blogImage/post/image-20240927102655255.png" title="安装lombok插件" class="gallery-item"><img src="https://cdn.jsdelivr.net/gh/lingzhexi/blogImage/post/image-20240927102655255.png" alt="安装lombok插件"></a></p><h2 id="4、编写代码"><a href="#4、编写代码" class="headerlink" title="4、编写代码"></a>4、编写代码</h2><h3 id="4-1、配置文件"><a href="#4-1、配置文件" class="headerlink" title="4.1、配置文件"></a>4.1、配置文件</h3><p> <code>application.properties</code> 配置文件</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#mysql数据库连接</span><span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.cj.jdbc.Driver</span><span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=GMT%2B8&amp;useSSL=false</span><span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span><span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token value attr-value">root</span><span class="token comment">#mybatis日志</span><span class="token key attr-name">mybatis-plus.configuration.log-impl</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.ibatis.logging.stdout.StdOutImpl</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2、实体类"><a href="#4-2、实体类" class="headerlink" title="4.2、实体类"></a>4.2、实体类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>stormling<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3、mapper"><a href="#4-3、mapper" class="headerlink" title="4.3、mapper"></a>4.3、mapper</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>stormling<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、开始使用"><a href="#5、开始使用" class="headerlink" title="5、开始使用"></a>5、开始使用</h2><p>添加测试类，进行功能测试：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>stormling<span class="token punctuation">.</span>mp</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CRUDTests</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>通过以上几个简单的步骤，我们就实现了 User 表的 CRUD 功能，甚至连 XML 文件都不用编写！</strong></p><h2 id="6、主键策略"><a href="#6、主键策略" class="headerlink" title="6、主键策略"></a>6、主键策略</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Stormling"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"501344802@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//影响的行数</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//id自动回填</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong>数据库插入id值默认为：全局唯一id</p><p><a href="https://cdn.jsdelivr.net/gh/lingzhexi/blogImage/post/image-20240927110351744.png" title="新增一条数据" class="gallery-item"><img src="https://cdn.jsdelivr.net/gh/lingzhexi/blogImage/post/image-20240927110351744.png" alt="新增一条数据"></a> </p><h3 id="6-1、ASSIGN-ID-全局唯一ID（默认）"><a href="#6-1、ASSIGN-ID-全局唯一ID（默认）" class="headerlink" title="6.1、ASSIGN_ID 全局唯一ID（默认）"></a>6.1、<code>ASSIGN_ID</code> 全局唯一<code>ID</code>（默认）</h3><blockquote><p>不了解雪花算法的童鞋，后续更新一篇手写一个雪花算法（<strong>挖坑</strong>）</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">ASSIGN_ID</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>雪花算法</strong>是由 <code>Twitter</code> 公布的分布式主键生成算法，它能够保证不同进程主键的<strong>不重复性</strong>，以及相同进程主键的<strong>有序性</strong>。</p><p><strong>实现原理</strong></p><p>在同一个进程中，它首先是通过<strong>时间位保证不重复</strong>，如果时间相同则是通过<strong>序列位保证</strong>。 同时由于时间位是<strong>单调递增</strong>的，且各个服务器如果大体做了时间同步，那么生成的主键在分布式环境可以认为是<strong>总体有序</strong>的，这就保证了对<strong>索引字段的插入的高效性</strong>。 例如 <code>MySQL</code> 的 <code>Innodb</code> 存储引擎的主键。</p><p>使用雪花算法生成的主键，二进制表示形式包含 <code>4</code> 部分，从高位到低位分表为：<code>1bit</code> <strong>符号位</strong>、<code>41bit</code> <strong>时间戳位</strong>、<code>10bit</code> <strong>工作进程位</strong>以及 <code>12bit</code> <strong>序列号位</strong>。</p><ul><li>符号位（<code>1bit</code>）</li></ul><p>预留的符号位，恒为零。</p><ul><li>时间戳位（<code>41bit</code>）</li></ul><p><code>41</code> 位的时间戳可以容纳的毫秒数是 <code>2</code> 的 <code>41</code> 次幂，一年所使用的毫秒数是：<code>365 * 24 * 60 * 60 * 1000</code>。 通过计算可知：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">365</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果约等于 <code>69.73</code> 年，相信能满足绝大部分系统的要求。</p><ul><li>工作进程位（<code>10bit</code>）</li></ul><p>该标志在 <code>Java</code> 进程内是唯一的，如果是分布式应用部署应保证每个工作进程的 <code>id</code> 是不同的。 该值默认为 0，可通过属性设置。可以支持 <code>1024</code>(2 的 10 次幂)个工作进程</p><ul><li>序列号位（<code>12bit</code>）</li></ul><p>该序列是用来在同一个毫秒内生成不同的 <code>ID</code>。如果在这个毫秒内生成的数量超过 <code>4096</code> (2 的 12 次幂)，那么生成器会等待到下个毫秒继续生成。</p><p>雪花算法主键的详细结构见下图。</p><p><a href="https://cdn.jsdelivr.net/gh/lingzhexi/blogImage/post/202409240943887.png" title="雪花算法" class="gallery-item"><img src="https://cdn.jsdelivr.net/gh/lingzhexi/blogImage/post/202409240943887.png" alt="雪花算法"></a></p><h3 id="6-2、ASSIGN-UUID"><a href="#6-2、ASSIGN-UUID" class="headerlink" title="6.2、ASSIGN_UUID"></a>6.2、<code>ASSIGN_UUID</code></h3><ul><li>生成唯一的值，包含数字和字母，表对应字段类型<code>varchar</code>类型</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">AUTO</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-3、AUTO-自增策略"><a href="#6-3、AUTO-自增策略" class="headerlink" title="6.3、AUTO 自增策略"></a>6.3、<code>AUTO</code> 自增策略</h3><ul><li><p>要想主键自增需要配置如下主键策略</p><ul><li><p>需要在创建数据表的时候设置主键自增</p></li><li><p>实体字段中配置 <code>@TableId(type = IdType.AUTO)</code></p></li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">AUTO</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-4、INPUT-手动设置"><a href="#6-4、INPUT-手动设置" class="headerlink" title="6.4、INPUT 手动设置"></a>6.4、<code>INPUT</code> 手动设置</h3><ul><li>需要手动设置<code>id</code>值</li></ul><h2 id="7、分页插件"><a href="#7、分页插件" class="headerlink" title="7、分页插件"></a>7、分页插件</h2><blockquote><p>参考教程：<a href="https://baomidou.com/plugins/pagination/">分页插件</a></p></blockquote><p><code>MyBatis Plus</code>自带分页插件，只要简单的配置即可实现分页功能</p><h3 id="7-1、配置分页插件"><a href="#7-1、配置分页插件" class="headerlink" title="7.1、配置分页插件"></a>7.1、配置分页插件</h3><p>创建<code>MybatisPlusConfig</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>stormling<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 分页插件     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">optimisticLockerInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//向Mybatis过滤器链中添加分页拦截器</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token class-name">DbType</span><span class="token punctuation">.</span><span class="token constant">MYSQL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>属性介绍</p><p><code>PaginationInnerInterceptor</code> 提供了以下属性来定制分页行为：</p><table><thead><tr><th align="center">属性名</th><th align="center">类型</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">overflow</td><td align="center">boolean</td><td align="center">false</td><td align="center">溢出总页数后是否进行处理</td></tr><tr><td align="center">maxLimit</td><td align="center">Long</td><td align="center"></td><td align="center">单页分页条数限制</td></tr><tr><td align="center">dbType</td><td align="center">DbType</td><td align="center"></td><td align="center">数据库类型</td></tr><tr><td align="center">dialect</td><td align="center">IDialect</td><td align="center"></td><td align="center">方言实现类</td></tr></tbody></table><blockquote><p>建议单一数据库类型的均设置 dbType</p></blockquote><p> <code>Page</code> 类</p><p><code>Page</code> 类继承了 <code>IPage</code> 类，实现了简单分页模型。如果你需要实现自己的分页模型，可以继承 <code>Page</code> 类或实现 <code>IPage</code> 类。</p><table><thead><tr><th align="center">属性名</th><th align="center">类型</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">records</td><td align="center">List<T></td><td align="center">emptyList</td><td align="center">查询数据列表</td></tr><tr><td align="center">total</td><td align="center">Long</td><td align="center">0</td><td align="center">查询列表总记录数</td></tr><tr><td align="center">size</td><td align="center">Long</td><td align="center">10</td><td align="center">每页显示条数，默认 10</td></tr><tr><td align="center">current</td><td align="center">Long</td><td align="center">1</td><td align="center">当前页</td></tr><tr><td align="center">orders</td><td align="center">List<OrderItem></td><td align="center">emptyList</td><td align="center">排序字段信息</td></tr><tr><td align="center">optimizeCountSql</td><td align="center">boolean</td><td align="center">true</td><td align="center">自动优化 COUNT SQL</td></tr><tr><td align="center">optimizeJoinOfCountSql</td><td align="center">boolean</td><td align="center">true</td><td align="center">自动优化 COUNT SQL 是否把 join 查询部分移除</td></tr><tr><td align="center">searchCount</td><td align="center">boolean</td><td align="center">true</td><td align="center">是否进行 count 查询</td></tr><tr><td align="center">maxLimit</td><td align="center">Long</td><td align="center"></td><td align="center">单页分页条数限制</td></tr><tr><td align="center">countId</td><td align="center">String</td><td align="center"></td><td align="center">XML 自定义 count 查询的 statementId</td></tr></tbody></table><p>通过这些配置和使用方法，你可以轻松地在 MyBatis-Plus 中实现分页查询，提高应用的性能和用户体验。</p><h3 id="7-2、测试selectPage分页"><a href="#7-2、测试selectPage分页" class="headerlink" title="7.2、测试selectPage分页"></a>7.2、测试selectPage分页</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    page<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当前页</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 查询列表分页数</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 每页显示条数</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 查询列表总记录数</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 是否有下一页</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 是否有上一页</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 输出结果</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#x3D;&#x3D;&gt;  Preparing: SELECT COUNT(*) AS total FROM user&#x3D;&#x3D;&gt; Parameters: &lt;&#x3D;&#x3D;    Columns: total&lt;&#x3D;&#x3D;        Row: 6&lt;&#x3D;&#x3D;      Total: 1&#x3D;&#x3D;&gt;  Preparing: SELECT id,name,age,email FROM user LIMIT ?&#x3D;&#x3D;&gt; Parameters: 5(Long)&lt;&#x3D;&#x3D;    Columns: id, name, age, email&lt;&#x3D;&#x3D;        Row: 1, Jone, 18, test1@baomidou.com&lt;&#x3D;&#x3D;        Row: 2, Jack, 20, test2@baomidou.com&lt;&#x3D;&#x3D;        Row: 3, Tom, 28, test3@baomidou.com&lt;&#x3D;&#x3D;        Row: 4, Sandy, 21, test4@baomidou.com&lt;&#x3D;&#x3D;        Row: 5, Billie, 24, test5@baomidou.com&lt;&#x3D;&#x3D;      Total: 5Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@9e30f9a]User(id&#x3D;1, name&#x3D;Jone, age&#x3D;18, email&#x3D;test1@baomidou.com)User(id&#x3D;2, name&#x3D;Jack, age&#x3D;20, email&#x3D;test2@baomidou.com)User(id&#x3D;3, name&#x3D;Tom, age&#x3D;28, email&#x3D;test3@baomidou.com)User(id&#x3D;4, name&#x3D;Sandy, age&#x3D;21, email&#x3D;test4@baomidou.com)User(id&#x3D;5, name&#x3D;Billie, age&#x3D;24, email&#x3D;test5@baomidou.com)1256truefalse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8、逻辑删除"><a href="#8、逻辑删除" class="headerlink" title="8、逻辑删除"></a>8、逻辑删除</h2><ul><li>物理删除：真实删除，将对应数据从数据库中删除，之后查询不到此条被删除数据</li><li>逻辑删除：假删除，将对应数据中代表是否被删除的字段状态修改为“<code>被删除状态</code>”，之后在数据库中仍旧能看到此条数据记录</li></ul><h3 id="8-1、数据库中添加-deleted字段"><a href="#8-1、数据库中添加-deleted字段" class="headerlink" title="8.1、数据库中添加 deleted字段"></a>8.1、数据库中添加 deleted字段</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span> <span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span> <span class="token identifier"><span class="token punctuation">`</span>deleted<span class="token punctuation">`</span></span> <span class="token keyword">BOOLEAN</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'逻辑删除字段'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8-2、实体类添加deleted-字段"><a href="#8-2、实体类添加deleted-字段" class="headerlink" title="8.2、实体类添加deleted 字段"></a>8.2、实体类添加deleted 字段</h2><p>并加上 <code>@TableLogic</code> 注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@TableLogic</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> deleted<span class="token punctuation">;</span><span class="token comment">//private Boolean deleted;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-3、application-properties-配置"><a href="#8-3、application-properties-配置" class="headerlink" title="8.3、application.properties 配置"></a>8.3、application.properties 配置</h3><p>此为默认值，如果你的默认值和mp默认的一样，则不需要该配置</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#默认配置</span><span class="token key attr-name">mybatis-plus.global-config.db-config.logic-delete-value</span><span class="token punctuation">=</span><span class="token value attr-value">1</span><span class="token key attr-name">mybatis-plus.global-config.db-config.logic-not-delete-value</span><span class="token punctuation">=</span><span class="token value attr-value">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果使用了@TableLogic注解，则不需要该配置</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">mybatis-plus.global-config.db-config.logic-delete-field</span><span class="token punctuation">=</span><span class="token value attr-value">deleted</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-4、测试逻辑删除"><a href="#8-4、测试逻辑删除" class="headerlink" title="8.4、测试逻辑删除"></a>8.4、测试逻辑删除</h3><ul><li>测试后发现，数据并没有被删除，deleted字段的值由0变成了1</li><li>测试后分析打印的sql语句，是一条update</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 测试 逻辑删除 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogicDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#x3D;&#x3D;&gt;  Preparing: UPDATE user SET deleted&#x3D;1 WHERE id&#x3D;? AND deleted&#x3D;0&#x3D;&#x3D;&gt;  Parameters: 1(Long)&lt;&#x3D;&#x3D;    Updates: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-5、测试逻辑删除后的查询"><a href="#8-5、测试逻辑删除后的查询" class="headerlink" title="8.5、测试逻辑删除后的查询"></a>8.5、测试逻辑删除后的查询</h3><p>MyBatis Plus中查询操作也会自动添加逻辑删除字段的判断<code>（deleted = 0）</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 测试 查询操作 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#x3D;&#x3D;&gt;  Preparing: SELECT id,name,age,email,deleted FROM user WHERE deleted&#x3D;0&#x3D;&#x3D;&gt;  Parameters: &lt;&#x3D;&#x3D;    Columns: id, name, age, email, deleted&lt;&#x3D;&#x3D;        Row: 2, Jack, 20, test2@baomidou.com, 0&lt;&#x3D;&#x3D;        Row: 3, Tom, 28, test3@baomidou.com, 0&lt;&#x3D;&#x3D;        Row: 4, Sandy, 21, test4@baomidou.com, 0&lt;&#x3D;&#x3D;        Row: 5, Billie, 24, test5@baomidou.com, 0&lt;&#x3D;&#x3D;        Row: 1839500916857540609, Stormling, 28, 501344802@qq.com, 0&lt;&#x3D;&#x3D;        Row: 1844981342959046657, Stormling, 28, 501344802@qq.com, 0&lt;&#x3D;&#x3D;      Total: 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Mybatis Plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Mybatis Plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式系列（二） | Redisson分布式锁</title>
      <link href="/posts/50356.html"/>
      <url>/posts/50356.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><ul><li><strong>Redisson <strong>是一个在Redis的基础上实现的<code>Java</code>驻内存数据网格</strong>（In-Memory Data Grid）</strong>。它不仅提供了一系列的分布式的<strong>Java</strong>常用对象，还提供了许多分布式服务。</li><li><strong>Redisson</strong> 的宗旨是：促进使用者对<code>Redis</code>的关注分离<strong>（Separation of Concern）</strong>，从而让使用者能够将精力更集中地放在处理业务逻辑上。</li></ul><h2 id="2、四个条件"><a href="#2、四个条件" class="headerlink" title="2、四个条件"></a>2、四个条件</h2><p>为了确保分布式锁可用，我们至少要确保锁的实现同时满足以下四个条件：</p><ul><li>第一个：互斥性，在任何时刻，只有一个客户端能持有锁。</li><li>第二个：不会发生死锁，即使有一个客户端在获取锁操作时候崩溃了，也能保证其他客户端能获取到锁。</li><li>第三个：解铃还须系铃人，解锁加锁必须同一个客户端操作。</li><li>第四个：加锁和解锁必须具备<strong>原子性</strong></li></ul><h2 id="3、引入依赖"><a href="#3、引入依赖" class="headerlink" title="3、引入依赖"></a>3、引入依赖</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、配置类别"><a href="#4、配置类别" class="headerlink" title="4、配置类别"></a>4、配置类别</h2><h5 id="创建RedissonConfig-配置类"><a href="#创建RedissonConfig-配置类" class="headerlink" title="创建RedissonConfig 配置类"></a>创建<code>RedissonConfig</code> 配置类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.data.redis"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedissonConfig</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> host<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> port<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> timeout <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">ADDRESS_PREFIX</span> <span class="token operator">=</span> <span class="token string">"redis://"</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 自动装配     *     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">RedissonClient</span> <span class="token function">redissonSingle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"host is  empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">SingleServerConfig</span> serverConfig <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token constant">ADDRESS_PREFIX</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>host <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> port<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            serverConfig<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置 application.yml</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">data</span><span class="token punctuation">:</span>        <span class="token key atrule">redis</span><span class="token punctuation">:</span>          <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.2.5          <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>          <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>          <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">1800000</span>          <span class="token key atrule">password</span><span class="token punctuation">:</span>          <span class="token key atrule">jedis</span><span class="token punctuation">:</span>            <span class="token key atrule">pool</span><span class="token punctuation">:</span>              <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">20</span> <span class="token comment">#最大连接数</span>              <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">-1</span>    <span class="token comment">#最大阻塞等待时间(负数表示没限制)</span>              <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token comment">#最大空闲</span>              <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、代码实现"><a href="#5、代码实现" class="headerlink" title="5、代码实现"></a>5、代码实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLockRedisson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// 1.获取锁 可重入锁</span>       <span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">"lock1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 2.加锁</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token comment">// 阻塞 默认过期30s  看门狗：自动续期</span>           lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 设置过期 10s</span>           <span class="token comment">//lock.lock(10, TimeUnit.SECONDS);</span>           <span class="token comment">// 等待时间 、 设置过期时间</span>           <span class="token comment">// lock.tryLock(30, 10, TimeUnit.SECONDS);</span>           <span class="token comment">// 3.业务代码</span>           <span class="token class-name">String</span> value <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">return</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>           redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token operator">++</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//4.释放锁</span>           lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、Redisson-看门狗"><a href="#6、Redisson-看门狗" class="headerlink" title="6、Redisson 看门狗"></a>6、Redisson 看门狗</h2><pre><code>基于**`Redis`**的**`Redisson`**分布式可重入锁**`RLock` `Java`**对象实现了**`java.util.concurrent.locks.Lock`**接口。如果负责储存这个分布式锁的**`Redisson`**节点宕机以后，而且这个锁正好处于锁住的状态时，这个锁会出现**锁死**的状态。为了避免这种情况的发生，**`Redisson`**内部提供了一个**监控锁的看门狗**，它的作用是在**`Redisson`**实例被关闭前，不断的延长锁的有效期。默认情况下，看门狗的检查锁的超时时间是30秒钟，也可以通过修改**`Config.lockWatchdogTimeout来`**另行指定。</code></pre><p>另外**<code>Redisson</code><strong>还通过加锁的方法提供了</strong><code>leaseTime</code>**的参数来指定加锁的时间。超过这个时间后锁便自动解开了。</p><p>看门狗原理：</p><pre><code>只要线程一加锁成功，就会启动一个**`watch dog`**看门狗，它是一个**后台线程**，会每隔**10秒检查**一下，如果线程还持有锁，那么就会**不断的延长锁key**的生存时间。因此，**`Redisson`**就是使用**`watch dog`**解决了`锁过期释放，业务没执行完问题`。</code></pre><ul><li>如果我们指定了锁的超时时间，就发送给**<code>Redis</code>**执行脚本，进行占锁，默认超时就是我们制定的时间，不会自动续期；</li><li>如果我们未指定锁的超时时间，就使用 <code>lockwatchdogTimeout= 30 * 1000</code>【看门狗默认时间】</li></ul></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Redisson </category>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> Redisson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式系列（一） | Redis分布式锁</title>
      <link href="/posts/28724.html"/>
      <url>/posts/28724.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="Redis实现分布式锁"><a href="#Redis实现分布式锁" class="headerlink" title="Redis实现分布式锁"></a>Redis实现分布式锁</h2><blockquote><p>乐尚代驾学习笔记-Redis司机抢单分布式锁</p></blockquote><h3 id="1、setnx-过期时间实现"><a href="#1、setnx-过期时间实现" class="headerlink" title="1、setnx+过期时间实现"></a>1、setnx+过期时间实现</h3><p><a href="https://i-blog.csdnimg.cn/direct/d407440f16f144bcbe2b36c69c1d372f.png#pic_center" title="在这里插入图片描述" class="gallery-item"><img src="https://i-blog.csdnimg.cn/direct/d407440f16f144bcbe2b36c69c1d372f.png#pic_center" alt="在这里插入图片描述"></a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//从redis里面获取数据</span>   <span class="token comment">//1 获取当前锁  setnx</span>    <span class="token class-name">Boolean</span> ifAbsent <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span><span class="token string">"lock"</span><span class="token punctuation">,</span> <span class="token string">"lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2 如果获取到锁，从redis获取数据 数据+1 放回redis里面</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ifAbsent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取锁成功，执行业务代码</span>        <span class="token comment">//1.先从redis中通过key num获取值  key提前手动设置 num 初始值：0</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.如果值为空则非法直接返回即可</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//3.对num值进行自增加一</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token operator">++</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3 释放锁</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">testLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-1、问题："><a href="#1-1、问题：" class="headerlink" title="1.1、问题："></a>1.1、<strong>问题：</strong></h4><ul><li>如果业务执行过程中心出现异常，导致锁无法释放</li></ul><h4 id="1-2、解决方案："><a href="#1-2、解决方案：" class="headerlink" title="1.2、解决方案："></a>1.2、<strong>解决方案：</strong></h4><ul><li>设置过期时间，到时间之后自动释放锁</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1 获取当前锁  setnx  + 设置过期时间</span><span class="token comment">//        Boolean ifAbsent = redisTemplate.opsForValue().setIfAbsent("lock", "lock");</span> <span class="token class-name">Boolean</span> ifAbsent <span class="token operator">=</span>          redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span><span class="token string">"lock"</span><span class="token punctuation">,</span> <span class="token string">"lock"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、UUID防止误删"><a href="#2、UUID防止误删" class="headerlink" title="2、UUID防止误删"></a>2、UUID防止误删</h3><ul><li>使用setnx+过期时间实现分布式锁，存在问题：删除不是自己的锁，锁误删</li></ul><p><strong>场景：如果业务逻辑的执行时间是7s。执行流程如下</strong></p><ol><li><p>index1业务逻辑没执行完，3秒后锁被自动释放。</p></li><li><p>index2获取到锁，执行业务逻辑，3秒后锁被自动释放。</p></li><li><p>index3获取到锁，执行业务逻辑</p><p>index1业务逻辑执行完成，开始调用del释放锁，这时释放的是index3的锁， 导致index3的业务只执行1s就被别人释放。</p></li></ol><p>最终等于没锁的情况</p><p><a href="https://s2.loli.net/2024/12/22/Fv4hzfNTaPAudRK.png" title="在这里插入图片描述" class="gallery-item"><img src="https://s2.loli.net/2024/12/22/Fv4hzfNTaPAudRK.png" alt="在这里插入图片描述"></a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//uuid防止误删</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//从redis里面获取数据</span>    <span class="token class-name">String</span> uuid <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1 获取当前锁  setnx  + 设置过期时间</span>    <span class="token comment">//        Boolean ifAbsent = redisTemplate.opsForValue().setIfAbsent("lock", "lock");</span>    <span class="token class-name">Boolean</span> ifAbsent <span class="token operator">=</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span><span class="token string">"lock"</span><span class="token punctuation">,</span> uuid<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2 如果获取到锁，从redis获取数据 数据+1 放回redis里面</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ifAbsent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取锁成功，执行业务代码</span>        <span class="token comment">//1.先从redis中通过key num获取值  key提前手动设置 num 初始值：0</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.如果值为空则非法直接返回即可</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//3.对num值进行自增加一</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token operator">++</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//出现异常</span>        <span class="token comment">//3 释放锁</span>        <span class="token class-name">String</span> redisUuid <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>redisUuid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">testLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、LUA脚本保证原子性"><a href="#3、LUA脚本保证原子性" class="headerlink" title="3、LUA脚本保证原子性"></a>3、LUA脚本保证原子性</h3><ul><li><strong>通过uuid防止误删，但是还是存在问题，不具备原子性的</strong><br><a href="https://s2.loli.net/2024/12/22/NxteOgsJ5dfzDWm.png" title="在这里插入图片描述" class="gallery-item"><img src="https://s2.loli.net/2024/12/22/NxteOgsJ5dfzDWm.png" alt="在这里插入图片描述"></a></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//lua脚本保证原子性</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//从redis里面获取数据</span>    <span class="token class-name">String</span> uuid <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1 获取当前锁  setnx  + 设置过期时间</span>    <span class="token comment">//        Boolean ifAbsent = redisTemplate.opsForValue().setIfAbsent("lock", "lock");</span>    <span class="token class-name">Boolean</span> ifAbsent <span class="token operator">=</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span><span class="token string">"lock"</span><span class="token punctuation">,</span> uuid<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2 如果获取到锁，从redis获取数据 数据+1 放回redis里面</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ifAbsent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取锁成功，执行业务代码</span>        <span class="token comment">//1.先从redis中通过key num获取值  key提前手动设置 num 初始值：0</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.如果值为空则非法直接返回即可</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//3.对num值进行自增加一</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token operator">++</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//出现异常</span>        <span class="token comment">//3 释放锁 lua脚本实现</span>        <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> redisScript <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//lua脚本</span>        <span class="token class-name">String</span> script <span class="token operator">=</span> <span class="token string">"if redis.call(\"get\",KEYS[1]) == ARGV[1]\n"</span> <span class="token operator">+</span>                <span class="token string">"then\n"</span> <span class="token operator">+</span>                <span class="token string">"    return redis.call(\"del\",KEYS[1])\n"</span> <span class="token operator">+</span>                <span class="token string">"else\n"</span> <span class="token operator">+</span>                <span class="token string">"    return 0\n"</span> <span class="token operator">+</span>                <span class="token string">"end"</span><span class="token punctuation">;</span>        redisScript<span class="token punctuation">.</span><span class="token function">setScriptText</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置返回结果</span>        redisScript<span class="token punctuation">.</span><span class="token function">setResultType</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>redisScript<span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"lock"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">testLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h3><h4 id="4-1、加锁"><a href="#4-1、加锁" class="headerlink" title="4.1、加锁"></a>4.1、加锁</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1. 从Redis中获取锁,set k1 v1 px 20000 nx</span><span class="token class-name">String</span> uuid <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Boolean</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span><span class="token string">"lock"</span><span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2、使用lua释放锁"><a href="#4-2、使用lua释放锁" class="headerlink" title="4.2、使用lua释放锁"></a>4.2、使用lua释放锁</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 2. 释放锁 del</span><span class="token class-name">String</span> script <span class="token operator">=</span> <span class="token string">"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end"</span><span class="token punctuation">;</span><span class="token comment">// 设置lua脚本返回的数据类型</span><span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> redisScript <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置lua脚本返回类型为Long</span>redisScript<span class="token punctuation">.</span><span class="token function">setResultType</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>redisScript<span class="token punctuation">.</span><span class="token function">setScriptText</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>redisScript<span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"lock"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3、重试"><a href="#4-3、重试" class="headerlink" title="4.3、重试"></a>4.3、重试</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">testLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为了确保分布式锁可用，我们至少要确保锁的实现同时满足以下四个条件：</p><p><strong>第一个：互斥性</strong>，在任何时刻，只有一个客户端能持有锁。</p><p><strong>第二个：不会发生死锁</strong>，即使有一个客户端在获取锁操作时候崩溃了，也能保证其他客户端能获取到锁。</p><p><strong>第三个：解铃还须系铃人</strong>，解锁加锁必须同一个客户端操作。</p><p><strong>第四个：加锁和解锁必须具备原子性</strong></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系列(一) | MongoDB 7.0+ 快速入门&amp;整合SpringBoot</title>
      <link href="/posts/56299.html"/>
      <url>/posts/56299.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="MongoDB7-0-快速入门"><a href="#MongoDB7-0-快速入门" class="headerlink" title="MongoDB7.0+ 快速入门"></a>MongoDB7.0+ 快速入门</h2><h3 id="1、MongoDB"><a href="#1、MongoDB" class="headerlink" title="1、MongoDB"></a>1、MongoDB</h3><h4 id="1-1、MongoDB-概念"><a href="#1-1、MongoDB-概念" class="headerlink" title="1.1、MongoDB 概念"></a>1.1、MongoDB 概念</h4><h5 id="1-1-1、什么是MongoDB"><a href="#1-1-1、什么是MongoDB" class="headerlink" title="1.1.1、什么是MongoDB"></a>1.1.1、什么是MongoDB</h5><p><code>MongoDB</code> 是在<code>2007</code>年由<code>DoubleClick</code>公司的几位核心成员开发出的一款分布式文档数据库，由<code>C++</code>语言编写。</p><p>目的是为了解决数据大量增长的时候系统的可扩展性和敏捷性。<code>MongoDB</code>要比传统的关系型数据库简单很多。</p><p>在<code>MongoDB</code>中数据主要的组织结构就是<code>数据库、集合和文档</code>，文档存储在集合当中，集合存储在数据库中。</p><p><code>MongoDB</code>中每一条数据记录就是一个文档，<code>数据结构由键值(key=&gt;value)对组成</code>。</p><p>文档类似于 <code>JSON</code> 对象，它的数据结构被叫做<code>BSON</code>（<code>Binary JSON</code>）。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131956865.png" title="img" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131956865.png" alt="img"></a></p><p>下表将帮助您更容易理解<code>MongoDB</code>中的一些概念：</p><table><thead><tr><th>RDBMS</th><th>MongoDB</th></tr></thead><tbody><tr><td>数据库</td><td>数据库</td></tr><tr><td>表格</td><td>集合</td></tr><tr><td>行</td><td>文档</td></tr><tr><td>列</td><td>字段</td></tr><tr><td>表联合</td><td>嵌入文档</td></tr><tr><td>主键</td><td>_id</td></tr></tbody></table><h5 id="1-1-2、MongoDB适用场景"><a href="#1-1-2、MongoDB适用场景" class="headerlink" title="1.1.2、MongoDB适用场景"></a>1.1.2、MongoDB适用场景</h5><p><code>MongoDB</code>不需要去明确指定一张表的具体结构，对字段的管理非常灵活，有很强的可扩展性。</p><p>支持高并发、高可用、高可扩展性，自带数据压缩功能，支持海量数据的高效存储和访问。</p><p>支持基本的<code>CRUD</code>、数据聚合、文本搜索和地理空间查询功能。</p><p><strong>适用场景：</strong></p><ul><li>网站数据：<code>Mongo</code>非常适合实时的插入，更新与查询，并具备网站实时数据存储所需的复制及高度伸缩性。</li><li>高伸缩性的场景：<code>Mongo</code>非常适合由数十或数百台服务器组成的数据库。</li><li>大尺寸，低价值的数据：使用传统的关系型数据库存储一些数据时可能会比较昂贵，在此之前，很多时候程序员往往会选择传统的文件进行存储。</li><li>缓存：由于性能很高，<code>Mongo</code>也适合作为信息基础设施的缓存层。在系统重启之后，由<code>Mongo</code>搭建的持久化缓存层可以避免下层的数据源过载。</li></ul><p><strong>例如：</strong></p><p>弹幕、直播间互动信息、朋友圈信息、物流场景等</p><p><strong>不适用场合：</strong></p><ul><li>高度事务性系统：例如银行系统。传统的关系型数据库目前还是更适用于需要大量原子性复杂事务的应用程序。</li><li>传统的商业智能应用：针对特定问题的<code>BI</code>数据库会对产生高度优化的查询方式。对于此类应用，数据仓库可能是更合适的选择。</li></ul><h4 id="1-2、安装和启动（docker方式）"><a href="#1-2、安装和启动（docker方式）" class="headerlink" title="1.2、安装和启动（docker方式）"></a>1.2、安装和启动（docker方式）</h4><h5 id="1-2-1、拉取镜像"><a href="#1-2-1、拉取镜像" class="headerlink" title="1.2.1、拉取镜像"></a>1.2.1、拉取镜像</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker pull mongo:7.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-2-2、创建和启动容器"><a href="#1-2-2、创建和启动容器" class="headerlink" title="1.2.2、创建和启动容器"></a>1.2.2、创建和启动容器</h5><p>需要在宿主机建立文件夹</p><blockquote><p>rm -rf /opt/mongo</p><p>mkdir -p /opt/mongo/data/db</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d --restart&#x3D;always -p 27017:27017 --name mongo -v &#x2F;opt&#x2F;mongo&#x2F;data&#x2F;db:&#x2F;data&#x2F;db mongo:7.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-2-3、进入容器"><a href="#1-2-3、进入容器" class="headerlink" title="1.2.3、进入容器"></a>1.2.3、进入容器</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker exec -it mongo mongosh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-2-4、基本命令"><a href="#1-2-4、基本命令" class="headerlink" title="1.2.4、基本命令"></a>1.2.4、基本命令</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">show dbsdb.version() #当前db版本db.getMongo() #查看当前db的链接机器地址db.help() #帮助quit() #退出命令行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-4、数据库操作"><a href="#1-4、数据库操作" class="headerlink" title="1.4、数据库操作"></a>1.4、数据库操作</h4><h5 id="1-4-1、创建数据库"><a href="#1-4-1、创建数据库" class="headerlink" title="1.4.1、创建数据库"></a>1.4.1、创建数据库</h5><p>如果数据库不存在，则创建数据库，否则切换到指定数据库。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">use tingshu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-4-2、查看当前数据库"><a href="#1-4-2、查看当前数据库" class="headerlink" title="1.4.2、查看当前数据库"></a>1.4.2、查看当前数据库</h5><pre class="line-numbers language-none"><code class="language-none">db.getName()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-4-3、显示当前数据库状态"><a href="#1-4-3、显示当前数据库状态" class="headerlink" title="1.4.3、显示当前数据库状态"></a>1.4.3、显示当前数据库状态</h5><pre class="line-numbers language-none"><code class="language-none">db.stats()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-4-4、删除当前数据库"><a href="#1-4-4、删除当前数据库" class="headerlink" title="1.4.4、删除当前数据库"></a>1.4.4、删除当前数据库</h5><pre class="line-numbers language-none"><code class="language-none">db.dropDatabase()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-5、集合操作"><a href="#1-5、集合操作" class="headerlink" title="1.5、集合操作"></a>1.5、集合操作</h4><h5 id="1-5-1、创建集合"><a href="#1-5-1、创建集合" class="headerlink" title="1.5.1、创建集合"></a>1.5.1、创建集合</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">db.createCollection(&quot;User&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-5-2、删除集合"><a href="#1-5-2、删除集合" class="headerlink" title="1.5.2、删除集合"></a>1.5.2、删除集合</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">db.User.drop()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-6、文档操作"><a href="#1-6、文档操作" class="headerlink" title="1.6、文档操作"></a>1.6、文档操作</h4><p>文档是一组键值<code>(key-value)</code>对。<code>MongoDB</code> 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 <code>MongoDB</code> 非常突出的特点。</p><p><strong>需要注意的是：</strong></p><p>1、<code>MongoDB</code>区分类型和大小写。</p><p>2、<code>MongoDB</code>的文档不能有重复的键。</p><h5 id="1-6-1、insert"><a href="#1-6-1、insert" class="headerlink" title="1.6.1、insert"></a>1.6.1、insert</h5><p>向User集合插入一条记录。可以预先使用<code>createCollection</code>方法创建集合，也可以不创建集合，直接插入数据，那么集合会被自动创建</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">db.User.insert(&#123;name:&#39;zhangsan&#39;,age:21,sex:true&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-6-2、query"><a href="#1-6-2、query" class="headerlink" title="1.6.2、query"></a>1.6.2、query</h5><p>查询当前User集合中所有的记录</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">db.User.find()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询当前User集合中name是zhangsan的记录</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">db.User.find(&#123;name:&quot;zhangsan&quot;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-6-3、update"><a href="#1-6-3、update" class="headerlink" title="1.6.3、update"></a>1.6.3、update</h5><p>只更新匹配到的第一条记录</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">db.User.update(&#123;age:20&#125;, &#123;$set:&#123;name:100&#125;&#125;) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更新匹配到的所有记录</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">db.User.update(&#123;age:21&#125;, &#123;$set:&#123;age:99&#125;&#125;, &#123;multi: true&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-6-4、remove"><a href="#1-6-4、remove" class="headerlink" title="1.6.4、remove"></a>1.6.4、remove</h5><p>移除一个文档</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">db.User.remove(id)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>移除所有文档</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">db.User.remove(&#123;&#125;) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>更多命令参考：</strong><a href="https://www.runoob.com/mongodb/mongodb-tutorial.html">https://www.runoob.com/mongodb/mongodb-tutorial.html</a></p><h3 id="2、SpringBoot集成MongoDB"><a href="#2、SpringBoot集成MongoDB" class="headerlink" title="2、SpringBoot集成MongoDB"></a>2、SpringBoot集成MongoDB</h3><p><code>spring-data-mongodb</code>提供了<code>MongoTemplate</code>与<code>MongoRepository</code>两种方式访问<code>mongodb</code>，<code>MongoRepository</code>操作简单，<code>MongoTemplate</code>操作灵活，我们在项目中可以灵活使用这两种方式操作<code>mongodb</code>。</p><h4 id="2-1、集成spring-data-mongodb"><a href="#2-1、集成spring-data-mongodb" class="headerlink" title="2.1、集成spring-data-mongodb"></a>2.1、集成spring-data-mongodb</h4><h5 id="2-1-1、搭建项目"><a href="#2-1-1、搭建项目" class="headerlink" title="2.1.1、搭建项目"></a>2.1.1、搭建项目</h5><p>1、创建项目：<code>mongo_demo</code></p><p>2、导入<code>pom.xml：</code></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.atguigu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mongo_demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--mongodb--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-mongodb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、添加配置文件</p><p><code>application.yml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">data</span><span class="token punctuation">:</span>    <span class="token key atrule">mongodb</span><span class="token punctuation">:</span>      <span class="token key atrule">database</span><span class="token punctuation">:</span> daijia      <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.100.101      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">27017</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-1-2、添加实体"><a href="#2-1-2、添加实体" class="headerlink" title="2.1.2、添加实体"></a>2.1.2、添加实体</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mongo_demo<span class="token punctuation">.</span>model</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>bson<span class="token punctuation">.</span>types<span class="token punctuation">.</span></span><span class="token class-name">ObjectId</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Id</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span></span><span class="token class-name">Document</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Document</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span> <span class="token comment">//指定mongodb中的集合名字</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Id</span>    <span class="token keyword">private</span> <span class="token class-name">ObjectId</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createDate<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2、MongoRepository"><a href="#2-2、MongoRepository" class="headerlink" title="2.2、MongoRepository"></a>2.2、MongoRepository</h4><h5 id="2-2-1、添加Repository类"><a href="#2-2-1、添加Repository类" class="headerlink" title="2.2.1、添加Repository类"></a>2.2.1、添加Repository类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mongo_demo<span class="token punctuation">.</span>repository</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mongo_demo<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>bson<span class="token punctuation">.</span>types<span class="token punctuation">.</span></span><span class="token class-name">ObjectId</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">MongoRepository</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">MongoRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">ObjectId</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-2-2、创建测试类"><a href="#2-2-2、创建测试类" class="headerlink" title="2.2.2、创建测试类"></a>2.2.2、创建测试类</h5><p>test目录创建测试类：<code>MongoRepositoryTest</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mongo_demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mongo_demo<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mongo_demo<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">UserRepository</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>bson<span class="token punctuation">.</span>types<span class="token punctuation">.</span></span><span class="token class-name">ObjectId</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Example</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Page</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">PageRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Sort</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoRepositoryTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserRepository</span> userRepository<span class="token punctuation">;</span>    <span class="token comment">//插入</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"小谷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setCreateDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//查询所有</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//根据id查询</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> optional <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">ObjectId</span><span class="token punctuation">(</span><span class="token string">"64eee9dff317c823c62b4faf"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> present <span class="token operator">=</span> optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>present<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">User</span> user <span class="token operator">=</span> optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//条件查询</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindAllExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Example</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> example <span class="token operator">=</span> <span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//排序查询</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindAllSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Sort</span> sort <span class="token operator">=</span> <span class="token class-name">Sort</span><span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span><span class="token class-name">Sort<span class="token punctuation">.</span>Direction</span><span class="token punctuation">.</span><span class="token constant">DESC</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//分页查询</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindAllPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">PageRequest</span> pageRequest <span class="token operator">=</span> <span class="token class-name">PageRequest</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>pageRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> totalPages <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getTotalPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>totalPages<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//更新</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//注意：先查询，再更新</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> optional <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">ObjectId</span><span class="token punctuation">(</span><span class="token string">"64eee9dff317c823c62b4faf"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">User</span> user <span class="token operator">=</span> optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//user中包含id，就会执行更新</span>            userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//删除</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        userRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">ObjectId</span><span class="token punctuation">(</span><span class="token string">"64eee9dff317c823c62b4faf"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3、MongoTemplate"><a href="#2-3、MongoTemplate" class="headerlink" title="2.3、MongoTemplate"></a>2.3、MongoTemplate</h4><p>test目录创建测试类：MongoTemplateTest</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mongo_demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mongo_demo<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">DeleteResult</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">UpdateResult</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">MongoTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">Criteria</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">Query</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">Update</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token class-name">Pattern</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoTemplateTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MongoTemplate</span> mongoTemplate<span class="token punctuation">;</span>    <span class="token comment">//添加</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"test@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mongoTemplate<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//查询所有</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//根据id查询</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindUserById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token string">"64eeeae31711344f35635788"</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//删除</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRemove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Criteria</span> criteria <span class="token operator">=</span> <span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">"_id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">"64eeeae31711344f35635788"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Query</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span>criteria<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DeleteResult</span> result <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getDeletedCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//条件查询 and</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Criteria</span> criteria <span class="token operator">=</span> <span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Query</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span>criteria<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//分页查询</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findUsersPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Query</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//先查询总记录数</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//后查询分页列表</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//修改</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Criteria</span> criteria <span class="token operator">=</span> <span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">"_id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">"64eeeae31711344f35635788"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Query</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span>criteria<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Update</span> update <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        update<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        update<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UpdateResult</span> result <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">upsert</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> update<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//改一条</span>        <span class="token comment">//UpdateResult result = mongoTemplate.updateMulti(query, update, User.class);//改多条</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getModifiedCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MonogDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MonogDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MQ系列（七）| RocketMQ 为什么性能不如Kafka?</title>
      <link href="/posts/56299.html"/>
      <url>/posts/56299.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="RocketMQ-为什么性能不如-Kafka？"><a href="#RocketMQ-为什么性能不如-Kafka？" class="headerlink" title="RocketMQ 为什么性能不如 Kafka？"></a>RocketMQ 为什么性能不如 Kafka？</h1><blockquote><p><strong>RocketMQ 使用的是 mmap 零拷贝技术，而 kafka 使用的是 sendfile</strong> (硬件设备技术 <strong>SG-DMA</strong>，不影响（不占用）CPU工作)</p><p>mmap   内核缓冲区-&gt;映射用户缓冲区-&gt;内核缓冲区-&gt;网卡<br>sendfile 内核缓冲区-&gt; SG-DMA -&gt; 网卡</p></blockquote><p>在上篇文章《<a href="https://www.cnblogs.com/stormling2022/p/18605383">rocketmq 是什么</a>》中，我们了解到 <code>RocketMQ</code> 的架构其实参考了 <code>kafka</code> 的设计思想，同时又在 <code>kafka</code> 的基础上做了一些调整。<br>看起来，<code>RocketMQ</code> 好像各方面都比 <code>kafka</code> 更能打。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171407187.jpeg" title="Kafka与RocketMQ对比" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171407187.jpeg" alt="Kafka与RocketMQ对比"></a></p><p>但 <code>kafka</code> 却一直没被淘汰，说明 <code>RocketMQ</code> 必然是有着不如 <code>kafka</code> 的地方。<br>是啥呢？<br><strong>性能</strong>，严格来说是<strong>吞吐量</strong>。阿里中间件团队对它们做过压测，同样条件下，<code>kafka</code> 比 <code>RocketMQ</code> 快 **50%**左右。但即使这样，<code>RocketMQ</code> 依然能每秒处理 <code>10w</code> 量级的数据，依旧非常能打。<br>你不能说 <code>RocketMQ</code> 弱，只能说 <code>Kafka</code> 性能太强了。</p><p>不过这就很奇怪了，<strong>为什么 RocketMQ 参考了 kafka 的架构，却不能跟 kafka 保持一样的性能呢</strong>？<br>在回答这个问题之前，我们来聊下什么是<strong>零拷贝</strong>。</p><h2 id="零拷贝是什么"><a href="#零拷贝是什么" class="headerlink" title="零拷贝是什么"></a>零拷贝是什么</h2><p>我们知道，消息队列的消息为了防止进程崩溃后丢失，一般不会放内存里，而是放磁盘上。<br>那么问题就来了，消息从消息队列的磁盘，发送到消费者，过程是怎么样的呢？</p><h3 id="消息的发送过程"><a href="#消息的发送过程" class="headerlink" title="消息的发送过程"></a>消息的发送过程</h3><p>操作系统分为<strong>用户空间</strong>和<strong>内核空间</strong>。<br>程序处于用户空间，而磁盘属于硬件，操作系统本质上是程序和硬件设备的一个<strong>中间层</strong>。程序需要通过操作系统去调用硬件能力。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171417675.jpeg" title="操作系统是程序和硬件的中间层" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171417675.jpeg" alt="操作系统是程序和硬件的中间层"></a><br>如果用户想要将数据从磁盘发送到网络。那么就会发生下面这几件事：<br>程序会发起<strong>系统调用</strong><code>read()</code>，尝试读取磁盘数据，</p><ul><li>磁盘数据从设备<strong>拷贝</strong>到内核空间的缓冲区。</li><li>再从内核空间的缓冲区<strong>拷贝</strong>到用户空间。</li></ul><p>程序再发起<strong>系统调用</strong><code>write()</code>，将读到的数据发到网络：</p><ul><li>数据从用户空间<strong>拷贝</strong>到 <code>socket</code> 发送缓冲区</li><li>再从 <code>socket</code> 发送缓冲区<strong>拷贝</strong>到网卡。</li></ul><p>最终数据就会经过网络到达消费者。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171419834.jpeg" title="原始发送流程" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171419834.jpeg" alt="原始发送流程"></a></p><p>整个过程，本机内发生了 <code>2</code> 次<strong>系统调用</strong>，对应 <code>4</code> 次用户空间和内核空间的<strong>切换</strong>，以及 <code>4</code> 次数据<strong>拷贝</strong>。<br><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171417261.jpeg" title="4次切换" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171417261.jpeg" alt="4次切换"></a><br>一顿操作猛如虎，结果就是同样一份数据来回拷贝。<br>有没有办法优化呢？<br>有，它就是零拷贝技术，常见的方案有两种，分别是 <code>mmap</code> 和 <code>sendfile</code>。我们来看下它们是什么。</p><h3 id="mmap-是什么"><a href="#mmap-是什么" class="headerlink" title="mmap 是什么"></a>mmap 是什么</h3><p><code>mmap</code> 是操作系统内核提供的一个方法，可以将内核空间的缓冲区<strong>映射</strong>到用户空间。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171417734.jpeg" title="mmap映射内存" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171417734.jpeg" alt="mmap映射内存"></a></p><p>用了它，整个发送流程就有了一些变化。<br>程序发起<strong>系统调用</strong><code>mmap()</code>，尝试读取磁盘数据，具体情况如下：</p><ul><li>磁盘数据从设备<strong>拷贝</strong>到内核空间的缓冲区。</li><li>内核空间的缓冲区<strong>映射</strong>到用户空间，这里<strong>不需要</strong>拷贝。</li></ul><p>程序再发起<strong>系统调用</strong><code>write()</code>，将读到的数据发到网络：</p><ul><li>数据从内核空间缓冲区<strong>拷贝</strong>到 socket 发送缓冲区。</li><li>再从 socket 发送缓冲区<strong>拷贝</strong>到网卡。</li></ul><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171417402.jpeg" title="基于mmap的发送流程" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171417402.jpeg" alt="基于mmap的发送流程"></a></p><p>整个过程，发生了 <code>2</code> 次系统调用，对应 <code>4</code> 次用户空间和内核空间的切换，以及 <code>3</code> 次数据拷贝，对比之前，省下<strong>一次</strong>内核空间到用户空间的拷贝。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171426344.jpeg" title="4次切换" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171426344.jpeg" alt="4次切换"></a><br>看到这里大家估计也蒙了，不是说零拷贝吗？怎么还有 3 次拷贝。<br><code>mmap</code> 作为一种零拷贝技术，指的是<strong>用户空间到内核空间这个过程不需要拷贝</strong>，而不是指数据从磁盘到发送到网卡这个过程零拷贝。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171426553.jpeg" title="这该洗的文字游戏" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171426553.jpeg" alt="这该洗的文字游戏"></a><br><strong>确实省了一点，但不多</strong>。有没有更彻底的零拷贝？<br>有，用 <code>sendfile</code>.</p><h3 id="sendfile-是什么"><a href="#sendfile-是什么" class="headerlink" title="sendfile 是什么"></a>sendfile 是什么</h3><p><code>sendfile</code>，也是内核提供的一个方法，从名字可以看出，就是用来<strong>发送文件数据</strong>的。<br>程序发起<strong>系统调用</strong><code>sendfile()</code>，内核会尝试读取磁盘数据然后发送，具体情况如下：</p><ul><li>磁盘数据从设备<strong>拷贝</strong>到内核空间的缓冲区。</li><li>内核空间缓冲区里的数据<strong>可以</strong>直接<strong>拷贝</strong>到网卡。</li></ul><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171426494.jpeg" title="基于sendfile的发送流程" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171426494.jpeg" alt="基于sendfile的发送流程"></a></p><p>整个过程，发生了 <code>1</code> 次系统调用，对应 <code>2</code> 次用户空间和内核空间的切换，以及 <code>2</code> 次数据拷贝。<br>这时候问题很多的小明就有意见了，说好的<strong>零</strong>拷贝怎么还有 <code>2</code> 次拷贝？</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171426101.jpeg" title="2次切换" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171426101.jpeg" alt="2次切换"></a><br>其实，这里的零拷贝指的是<strong>零 CPU</strong>拷贝。<br>也就是说 <code>sendfile</code> 场景下，需要的两次拷贝，都<strong>不是 CPU 直接参与的拷贝</strong>，而是其他<strong>硬件设备技术</strong>做的拷贝，不耽误我们 CPU 跑程序。</p><h3 id="kafka-为什么性能比-RocketMQ-好"><a href="#kafka-为什么性能比-RocketMQ-好" class="headerlink" title="kafka 为什么性能比 RocketMQ 好"></a>kafka 为什么性能比 RocketMQ 好</h3><p>聊完两种零拷贝技术，我们回过头来看下 <code>kafka</code> 为什么性能比 <code>RocketMQ</code> 好。<br>这是因为 <strong>RocketMQ 使用的是 mmap 零拷贝技术，而 kafka 使用的是 sendfile</strong>。<code>kafka</code> 以更少的拷贝次数以及系统内核切换次数，获得了更高的性能。<br>但问题又来了，为什么 <code>RocketMQ</code> 不使用 <code>sendfile</code>？参考 <code>kafka</code> 抄个作业也不难啊？<br>我们来看下 <code>sendfile</code> 函数长啥样。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">ssize_t</span> <span class="token function">sendfile</span><span class="token punctuation">(</span><span class="token keyword">int</span> out_fd<span class="token punctuation">,</span> <span class="token keyword">int</span> in_fd<span class="token punctuation">,</span> <span class="token class-name">off_t</span><span class="token operator">*</span> offset<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// num = sendfile(xxx);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再来看下 <code>mmap</code> 函数长啥样。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> prot<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token class-name">off_t</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// buf = mmap(xxx)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注释里写的是两个函数的用法，<code>mmap</code> 返回的是数据的<strong>具体内容</strong>，应用层能获取到消息内容并进行一些逻辑处理。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171426131.jpeg" title="mmap能获取到具体内容" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171426131.jpeg" alt="mmap能获取到具体内容"></a>而 <code>sendfile</code> 返回的则是发送成功了几个<strong>字节数</strong>，<strong>具体发了什么内容，应用层根本不知道</strong>。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171426996.jpeg" title="sendfile只返回num" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171426996.jpeg" alt="sendfile只返回num"></a><br>而 <code>RocketMQ</code> 的一些功能，却<strong>需要了解具体这个消息内容</strong>，<strong>方便二次投递</strong>等，比如将消费失败的消息重新<strong>投递到死信队列</strong>中，如果 <code>RocketMQ</code> 使用 <code>sendfile</code>，那根本没机会获取到消息内容长什么样子，也就没办法实现一些好用的功能了。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171426725.jpeg" title="rocketMQ有二次投递等功能" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171426725.jpeg" alt="rocketMQ有二次投递等功能"></a><br>而 <code>kafka</code> 却没有这些功能特性，追求极致性能，正好可以使用 <code>sendfile</code>。</p><p>除了零拷贝以外，<code>kafka</code> 高性能的原因还有很多，比如什么批处理，数据压缩啥的，但那些优化手段 <code>rocketMQ</code> 也都能借鉴一波，唯独这个零拷贝，那是毫无办法。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171427354.jpeg" title="Kafka的优化手段" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171427354.jpeg" alt="Kafka的优化手段"></a><br>所以还是那句话，没有一种架构是完美的，一种架构往往用于适配某些场景，你很难做到既要又要还要。<br>当场景不同，我们就需要做一些定制化改造，通过牺牲一部分能力去换取另一部分能力。<br>做架构，做到最后都是在做折中。<br>是不是感觉升华了。</p><h3 id="kafka-和-RocketMQ-怎么选？"><a href="#kafka-和-RocketMQ-怎么选？" class="headerlink" title="kafka 和 RocketMQ 怎么选？"></a>kafka 和 RocketMQ 怎么选？</h3><p>这时候大家估计还是想知道 <code>kafka</code> 和 <code>RocketMQ</code> 到底该怎么选，用哪个。<br>官方点的回答是”这个要看场景的”。说了等于没说。<br>这不是我的风格。<br>我的标准只有一个，如果是大数据场景，比如你能频繁听到 <code>spark</code>，<code>flink</code> 这些关键词的时候，那就用 kafka。<br>除此之外，如果公司组件支持，尽量用 <code>RocketMQ</code>。</p><p>现在大家通了吗？</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><code>RocketMQ</code> 和 <code>kafka</code> 相比，在架构上做了减法，在功能上做了加法</li><li>跟 <code>kafka</code> 的架构相比，<code>RocketMQ</code> 简化了协调节点和分区以及备份模型。同时<strong>增强了消息过滤</strong>、消息回溯和<strong>事务能力</strong>，加入了<strong>延迟队列</strong>，<strong>死信队列</strong>等新特性。</li><li>凡事皆有代价，<code>RocketMQ</code> 牺牲了一部分性能，换取了比 <code>kafka</code> 更强大的功能特性。</li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MQ系列（六）| RocketMQ 快速入门</title>
      <link href="/posts/15036.html"/>
      <url>/posts/15036.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="RocketMQ-快速入门"><a href="#RocketMQ-快速入门" class="headerlink" title="RocketMQ 快速入门"></a>RocketMQ 快速入门</h1><hr><blockquote><p>本参考链接：<a href="https://golangguide.top/%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketmq/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/RocketMQ%E6%98%AF%E4%BB%80%E4%B9%88.html#%E5%9C%A8%E6%9E%B6%E6%9E%84%E4%B8%8A%E5%81%9A%E5%87%8F%E6%B3%95"><code>RocketMQ</code> 是什么？</a><br>原作者：<a href="https://golangguide.top/" title="小白debug">小白debug</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p> 作为一个程序员，假设你有 A、B 两个服务，A 服务发出消息后，不想让 B 服务<strong>立马</strong>处理到。而是要<strong>过半小时</strong>才让 B 服务处理到，该怎么实现？<br> 这类延迟处理消息的场景非常常见，举个例子，比如我每天早上到公司后都会点个外卖，我希望外卖能在中午送过来，而不是立马送过来，这就需要将外卖消息经过延时后，再投递到商家侧。</p></blockquote><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171202428.jpeg" title="延时消息场景" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171202428.jpeg" alt="延时消息场景"></a></p><h2 id="延时消息场景"><a href="#延时消息场景" class="headerlink" title="延时消息场景"></a>延时消息场景</h2><p>那么问题就来了，有没有优雅的解决方案？<br>当然有，<strong>没有什么是加一层中间层不能解决的，如果有，那就再加一层</strong>。<br>这次我们要加的中间层是消息队列 **<code>RocketMQ</code>**。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171202896.jpeg" title="RocketMQ" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171202896.jpeg" alt="RocketMQ"></a></p><h3 id="RocketMQ-是什么？"><a href="#RocketMQ-是什么？" class="headerlink" title="RocketMQ 是什么？"></a><code>RocketMQ</code> 是什么？</h3><p><code>RocketMQ</code> 是阿里自研的国产<strong>消息队列</strong>，目前已经是 <code>Apache</code> 的顶级项目。和其他消息队列一样，它接受来自<strong>生产者</strong>的消息，将消息分类，每一类是一个 <strong>topic</strong>，<strong>消费者</strong>根据需要订阅 <code>topic</code>，获取里面的消息。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171202844.jpeg" title="消息队列模型" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171202844.jpeg" alt="消息队列模型"></a></p><p>是不是很像我们上篇文章里提到的消息队 <code>Kafka</code>，那么问题很自然就来了，<strong>既然都是消息队列，那它们之间有什么区别呢</strong>？</p><h3 id="RocketMQ-和-Kafka-区别"><a href="#RocketMQ-和-Kafka-区别" class="headerlink" title="RocketMQ 和 Kafka 区别"></a><code>RocketMQ</code> 和 <code>Kafka</code> 区别</h3><p><code>RocketMQ</code> 的架构其实参考了 <code>Kafka</code> 的设计思想，同时又在 <code>Kafka</code> 的基础上做了一些调整。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171202547.jpeg" title="RocketMQ参考Kafka架构" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171202547.jpeg" alt="RocketMQ参考Kafka架构"></a></p><p>这些调整，用一句话总结就是，”<strong>和 Kafka 相比，RocketMQ 在架构上做了减法，在功能上做了加法</strong>“。我们来看下这句话的含义。</p><h2 id="在架构上做减法"><a href="#在架构上做减法" class="headerlink" title="在架构上做减法"></a>在架构上做减法</h2><p>我们来简单回顾下消息队列 Kafka 的架构。<br><code>kakfa</code> 也是通过多个 <code>topic</code> 对消息进行分类。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171202917.jpeg" title="topic分类" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171202917.jpeg" alt="topic分类"></a></p><ul><li>为了提升单个 topic 的并发<strong>性能</strong>，将<strong>单个 topic</strong> 拆为多个 <code>partition</code>。</li></ul><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171202262.jpeg" title="partition" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171202262.jpeg" alt="partition"></a></p><ul><li>为了提升系统<strong>扩展性</strong>，将多个 partition 分别部署在不同 <code>broker</code> 上。</li><li>为了提升系统的<strong>可用性</strong>，为 partition 加了多个副本。</li><li>为了协调和管理 Kafka 集群的数据信息，引入<code>Zookeeper</code>作为协调节点。</li></ul><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171202698.jpeg" title="kakfa架构" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171202698.jpeg" alt="kakfa架构"></a></p><p>如果你对这些依旧很陌生，可以看看上篇文章《**<a href="https://www.cnblogs.com/stormling2022/p/18605254">MQ系列（五）|Kafka 快速入门</a>**》。<br>Kafka 已经是非常强的消息队列了，我们来看下 <code>RocketMQ</code> 在 Kafka 架构的基础上，还能玩出什么花样来。</p><h3 id="简化协调节点"><a href="#简化协调节点" class="headerlink" title="简化协调节点"></a>简化协调节点</h3><blockquote><p>zookeeper 太重 ，nameserver 替代 zookeeper</p></blockquote><p><code>Zookeeper</code> 在 Kafka 架构中会和 broker 通信，维护 Kafka 集群信息。一个新的 <code>broker</code> 连上 <code>Zookeeper</code> 后，其他 <code>broker</code> 就能立马感知到它的加入，像这种能在分布式环境下，让多个实例同时获取到同一份信息的服务，就是所谓的<strong>分布式协调服务</strong>。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171202011.jpeg" title="Zookeeper的作用" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171202011.jpeg" alt="Zookeeper的作用"></a><code>Zookeeper</code>的作用</p><p>但 <code>Zookeeper</code> 作为一个<strong>通用的</strong>分布式协调服务，它不仅可以用于服务注册与发现，还可以用于分布式锁、配置管理等场景。 Kafka 其实只用到了它的部分功能，多少有点<strong>杀鸡用牛刀</strong>的味道。<strong>太重了</strong>。</p><p>所以 <code>RocketMQ</code> 直接将 <code>Zookeeper</code> 去掉，换成了 <strong>nameserver</strong>，用一种更轻量的方式，管理消息队列的集群信息。生产者通过 nameserver 获取到 topic 和 broker 的路由信息，然后再与 broker 通信，实现<strong>服务发现</strong>和<strong>负载均衡</strong>的效果。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171338641.jpeg" title="nameserver是什么" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171338641.jpeg" alt="nameserver是什么"></a></p><p>当然，开发 <code>Kafka</code> 的大佬们后来也意识到了 <code>Zookeeper</code> 过重的问题，所以从 2.8.0 版本就支持将 <code>Zookeeper</code> 移除，通过 在 <code>broker</code> 之间加入一致性算法 <code>raft</code> 实现同样的效果，这就是所谓的 <strong><code>KRaft</code></strong> 或 <strong><code>Quorum</code></strong> 模式。</p><blockquote><p>raft 算法可以看下这里：<a href="https://javaguide.cn/distributed-system/protocol/raft-algorithm.html">Raft 算法详解 | JavaGuide</a></p></blockquote><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171202973.jpeg" title="KRaft模式" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171202973.jpeg" alt="KRaft模式"></a></p><h3 id="简化分区"><a href="#简化分区" class="headerlink" title="简化分区"></a>简化分区</h3><blockquote><p>Queue 替换 partition，增加一个 <code>commitLog</code> ，Queue放消息的简要信息（包含消息偏移量），<code>commitLog</code> 放具体的消息</p></blockquote><p>我们知道，<code>Kafka</code> 会将 <code>topic</code> 拆分为多个 <code>partition</code>，用来提升<strong>并发性能</strong>。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171202431.jpeg" title="partition是什么" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171202431.jpeg" alt="partition是什么"></a></p><p>在 <code>RocketMQ</code> 里也一样，将 <code>topic</code> 拆分成了多个分区，但换了个名字，叫 <strong>Queue</strong>,也就是”<strong>队列</strong>“。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171203970.jpeg" title="RocketMQ中的队列" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171203970.jpeg" alt="RocketMQ中的队列"></a></p><p><code>Kafka</code> 中的 <code>partition</code> 会存储<strong>完整</strong>的消息体，而 <code>RocketMQ</code> 的 <code>Queue</code> 上却只存一些<strong>简要</strong>信息，比如消息偏移 <code>offset</code>，而消息的完整数据则放到”一个”叫 <code>commitlog</code> 的文件上，通过 <code>offset</code> 我们可以定位到 <code>commitlog</code> 上的某条消息。<br><code>Kafka</code> 消费消息，<code>broker</code> 只需要直接从 <code>partition</code> 读取消息返回就好，也就是读第<strong>一次</strong>就够了。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171203298.jpeg" title="img" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171203298.jpeg" alt="img"></a></p><p>而在 <code>RocketMQ</code> 中，<code>broker</code> 则需要先从 <code>Queue</code> 上读取到 offset 的值，再跑到 <code>commitlog</code> 上将完整数据读出来，也就是需要读<strong>两次</strong>。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171203460.jpeg" title="img" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171203460.jpeg" alt="img"></a></p><p>那么问题就来了，看起来 <code>Kafka</code> 的设计更高效？为什么 <code>RocketMQ</code> 不采用 <code>Kafka</code> 的设计？<br>这就不得说一下 Kafka 的<strong>底层存储</strong>了。</p><h2 id="Kafka-的底层存储"><a href="#Kafka-的底层存储" class="headerlink" title="Kafka 的底层存储"></a>Kafka 的底层存储</h2><blockquote><p>segment 小文件</p></blockquote><p><code>Kafka</code> 的 <code>partition</code> 分区，其实在底层由很多<strong>段</strong>（**<code>segment</code><strong>）组成，每个 <code>segment</code> 可以认为就是个</strong>小文件**。将消息数据写入到 <code>partition</code> 分区，本质上就是将数据写入到某个 <code>segment</code> 文件下。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171353496.jpeg" title="segment是什么" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171353496.jpeg" alt="segment是什么"></a></p><h3 id="segment是什么"><a href="#segment是什么" class="headerlink" title="segment是什么"></a>segment是什么</h3><blockquote><p>多个segment 文件下顺序列劣化成随机写，性能下降指标：8个分区 64个 <code>topic</code></p></blockquote><p>我们知道，操作系统的机械磁盘，<strong>顺序写</strong>的性能会比<strong>随机写</strong>快很多，差距高达几十倍。为了提升性能，<code>Kafka</code> 对每个小文件都是顺序写。<br>如果只有<strong>一个</strong> <code>segment</code> 文件，那写文件的性能会很好。<br>但当 <code>topic</code> 变多之后，<code>topic</code> 底下的 <code>partition</code> 分区也会变多，对应的 <code>partition</code> 底下的 <code>segment</code> 文件也会变多。同时写<strong>多个</strong> <code>topic</code> 底下的 <code>partition</code>，就是同时<strong>写多个文件</strong>，虽然每个文件内部都是顺序写，但多个文件存放在磁盘的不同地方，原本<strong>顺序写磁盘就可能劣化变成了随机写</strong>。于是写性能就降低了。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171353184.jpeg" title="顺序写劣化为随机写" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171353184.jpeg" alt="顺序写劣化为随机写"></a></p><p>那问题又又来了，究竟多少 topic 才算多？这个看实际情况，但打太极从来不是我的风格。<br>我给一个经验值<strong>仅供参考</strong>，8 个分区的情况下，超过 64 topic, Kafka 性能就会开始下降。</p><h2 id="RocketMQ-的底层存储"><a href="#RocketMQ-的底层存储" class="headerlink" title="RocketMQ 的底层存储"></a><code>RocketMQ</code> 的底层存储</h2><p>为了缓解同时写多个文件带来的随机写问题，<code>RocketMQ</code> 索性将单个 broker 底下的多个 topic 数据，全都写到”<strong>一个</strong>“逻辑文件 <code>CommitLog</code> 上，这就消除了随机写多文件的问题，将所有写操作都变成了顺序写。大大提升了 <code>RocketMQ</code> 在多 topic 场景下的写性能。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171353601.jpeg" title="CommitLog的作用" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171353601.jpeg" alt="CommitLog的作用"></a><code>CommitLog</code>的作用</p><blockquote><p>注意上面提到的”<strong>一个</strong>“是带引号的，虽然逻辑上它是一个大文件，但实际上这个 <code>CommitLog</code> 由多个小文件组成。每个文件的大小是固定的，当一个文件被写满后，会创建一个新的文件来继续存储新的消息。这种方式可以方便地管理和清理旧的消息。</p></blockquote><h3 id="简化备份模型"><a href="#简化备份模型" class="headerlink" title="简化备份模型"></a>简化备份模型</h3><blockquote><p><code>kafka</code> 将主<code>broker</code> 中 <code>partition</code> <strong>同步</strong> <code>segment</code> 文件数据到到 从 <code>broker</code>的副本 <code>partition</code>下 <code>segement</code>文件</p><p><code>rocketMQ</code> 直接同步主 <code>broker</code>中的 <code>commitLog</code> 文件到 从 <code>broker</code> 中</p></blockquote><p>我们知道，<code>Kafka</code> 会将 <code>partition</code> 分散到多个 <code>broker</code> 中，并为 <code>partition</code> 配置副本，将 <code>partition</code> 分为 <code>leader</code>和 <code>follower</code>，也就是<strong>主和从</strong>。<code>broker</code> 中既可能有 <strong>A</strong> <code>topic</code> 的主 <code>partition</code>，也可能有 <strong>B</strong> <code>topic</code> 的从 <code>partition</code>。<br>主从 <code>partition</code> 之间会建立数据同步，本质上就是同步 <code>partition</code> 底下的 <code>segment</code> 文件数据</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171353101.jpeg" title="Kafka主从parttion同步数据" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171353101.jpeg" alt="Kafka主从parttion同步数据"></a></p><p><code>RocketMQ</code> 将 <code>broker</code> 上的所有 <code>topic</code> 数据到写到 <code>CommitLog</code> 上。如果还像 <code>Kafka</code> 那样给每个分区单独建立同步通信，就还得将 <code>CommitLog</code> 里的内容<strong>拆开</strong>，这就还是退化为<strong>随机读</strong>了。<br>于是 <code>RocketMQ</code> 索性<strong>以 broker 为单位区分主从</strong>，主从之间同步 <code>CommitLog</code> 文件，保持高可用的同时，也大大简化了备份模型。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171353848.jpeg" title="RocketMQ主从broker同步" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171353848.jpeg" alt="RocketMQ主从broker同步"></a></p><p>好了，到这里，我们熟悉的 <code>Kafka</code> 架构，就成了 <code>RocketMQ</code> 的架构。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171353845.jpeg" title="Kafka架构" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171353845.jpeg" alt="Kafka架构"></a></p><p>是不是跟 <code>Kafka</code> 的很像但又简化了不少？</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171353940.jpeg" title="RocketMQ架构" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171353940.jpeg" alt="RocketMQ架构"></a></p><h2 id="在功能上做加法"><a href="#在功能上做加法" class="headerlink" title="在功能上做加法"></a>在功能上做加法</h2><p>虽然 <code>RocketMQ</code> 的架构比 Kafka 的简单，但功能却比 <code>Kafka</code> 要更丰富，我们来看下。</p><h3 id="消息过滤"><a href="#消息过滤" class="headerlink" title="消息过滤"></a>消息过滤</h3><blockquote><p><code>RocketMQ</code> 支持对消息打标，消费者根据 tag 过滤需要的数据，支持二级分类</p><p><code>kafka</code> 需要获取全部消息，再过滤出需要的消息</p></blockquote><p>我们知道，<code>Kafka</code> 支持通过 <code>topic</code> 将数据进行分类，比如订单数据和用户数据是两个不同的 <code>topic</code>，但如果我还想<strong>再进一步分类</strong>呢？比如同样是用户数据，还能根据 <code>vip</code> 等级进一步分类。假设我们只需要获取 <code>vip6</code> 的用户数据，在 <code>Kafka</code> 里，消费者需要消费 <code>topic</code> 为用户数据的<strong>所有消息</strong>，再将 <code>vip6</code> 的用户过滤出来。</p><p>而 <code>RocketMQ</code> 支持对消息打上<strong>标记</strong>，也就是打 <strong>tag</strong>，消费者能根据 tag 过滤所需要的数据。比如我们可以在部分消息上标记 tag=vip6，这样消费者就能<strong>只获取</strong>这部分数据，省下了消费者过滤数据时的资源消耗。</p><blockquote><p>相当于 <code>RocketMQ</code> 除了支持通过 <code>topic</code> 进行一级分类，还支持通过 <code>tag</code> 进行二级分类。</p></blockquote><p><a href="https://cdn.xiaobaidebug.top/1716039636534.jpeg" title="tag二级过滤" class="gallery-item"><img src="https://cdn.xiaobaidebug.top/1716039636534.jpeg" alt="tag二级过滤"></a></p><h3 id="支持事务"><a href="#支持事务" class="headerlink" title="支持事务"></a>支持事务</h3><p>我们知道 <code>Kafka</code> 支持事务，比如生产者发三条消息 <code>ABC</code>，这三条消息要么同时发送成功，要么同时发送失败。</p><p><a href="https://cdn.xiaobaidebug.top/1716039652367.jpeg" title="Kafka的事务" class="gallery-item"><img src="https://cdn.xiaobaidebug.top/1716039652367.jpeg" alt="Kafka的事务"></a><br>是，这确实也叫事务，但<strong>跟我们要的不太一样</strong>。</p><p>写业务代码的时候，我们更想要的事务是，”<strong>执行一些自定义逻辑</strong>“和”<strong>生产者发消息</strong>“这两件事，要么同时成功，要么同时失败。</p><p>而这正是 <code>RocketMQ</code> 支持的事务能力。</p><p><a href="https://cdn.xiaobaidebug.top/1716039663099.jpeg" title="RocketMQ的事务" class="gallery-item"><img src="https://cdn.xiaobaidebug.top/1716039663099.jpeg" alt="RocketMQ的事务"></a></p><h3 id="加入延时队列"><a href="#加入延时队列" class="headerlink" title="加入延时队列"></a>加入延时队列</h3><blockquote><p><code>kafka</code> 实现费劲</p></blockquote><p>如果我们希望消息投递出去之后，消费者不能立马消费到，而是过个一定时间后才消费，也就是所谓的<strong>延时消息</strong>，就像文章开头的定时外卖那样。如果我们使用 Kafka， 要实现类似的功能的话，就会很费劲。<br>但 <code>RocketMQ</code> 天然支持<strong>延时队列</strong>，我们可以很方便实现这一功能。</p><h3 id="加入死信队列"><a href="#加入死信队列" class="headerlink" title="加入死信队列"></a>加入死信队列</h3><blockquote><p><code>kafka</code> 原生不支持</p></blockquote><p>消费消息是有可能失败的，失败后一般可以设置<strong>重试</strong>。如果多次重试失败，<code>RocketMQ</code> 会将消息放到一个专门的队列，方便我们<strong>后面单独处理</strong>。这种专门存放失败消息的队列，就是<strong>死信队列</strong>。<br>Kafka 原生不支持这个功能，需要我们自己实现。</p><h3 id="消息回溯"><a href="#消息回溯" class="headerlink" title="消息回溯"></a>消息回溯</h3><blockquote><p><code>kafka</code> 调整<code>offset</code></p><p><code>rocketMQ</code> 还可以调整时间</p></blockquote><p>Kafka 支持通过<strong>调整 offset</strong> 来让消费者从某个地方开始消费，而 <code>RocketMQ</code>，除了可以调整 offset, 还支持<strong>调整时间</strong>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><code>RocketMQ</code> 和 <code>Kafka</code> 相比，在架构上做了减法，在功能上做了加法</li><li>跟 Kafka 的架构相比，<code>RocketMQ</code> 简化了协调节点和分区以及备份模型。同时增强了消息过滤、消息回溯和事务能力，加入了延迟队列，死信队列等新特性</li></ul><h2 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h2><p>最后遗留一个问题。<br>现在看起来，<code>RocketMQ</code> 好像各方面都比 <code>Kafka</code> 更能打。<br>但 <code>Kafka</code> 却一直没被淘汰，说明 <code>RocketMQ</code> 必然是有着不如 <code>Kafka</code> 的地方。<br>是啥呢？<br><strong>性能</strong>，严格来说是<strong>吞吐量</strong>。<br>这就很奇怪了，**为什么 <code>RocketMQ</code> 参考了 Kafka 的架构，性能却还不如 <code>Kafka</code>**？</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MQ系列（五）| Kafka 快速入门</title>
      <link href="/posts/24869.html"/>
      <url>/posts/24869.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="Kafka-快速入门介绍"><a href="#Kafka-快速入门介绍" class="headerlink" title="Kafka 快速入门介绍"></a>Kafka 快速入门介绍</h1><blockquote><p>参考：<a href="https://golangguide.top/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/kafka%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E6%9E%B6%E6%9E%84%E6%98%AF%E6%80%8E%E4%B9%88%E6%A0%B7%E7%9A%84%EF%BC%9F.html#%E6%80%BB%E7%BB%93">Kafka 是什么？</a></p></blockquote><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>一个高性能，高扩展性，高可用，支持持久化的超强消息队列，它就是我们常说的消息队列 <strong>Kafka</strong><br><code>Zookeeper</code> 协调管理多个 broker 组成，内部有多个 <code>topic</code> 分类，每个 <code>topic</code> 又分成多个 <code>partition</code> ，每个 <code>partition</code> 有多个副本 replia，不同的<code>partition</code> 会分布在不同 <code>broker</code> 上，提升性能同时，还增加了系统可用性和可扩展性</p><p><a href="https://cdn.xiaobaidebug.top/1713672461143.jpeg" title="Kafka是什么" class="gallery-item"><img src="https://cdn.xiaobaidebug.top/1713672461143.jpeg" alt="Kafka是什么"></a></p><h2 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h2><p><a href="https://cdn.xiaobaidebug.top/1713672053390.jpeg" title="增加生产者和消费者" class="gallery-item"><img src="https://cdn.xiaobaidebug.top/1713672053390.jpeg" alt="增加生产者和消费者"></a></p><p>对消息进行分类，每个类是一个 topic</p><p><a href="https://cdn.xiaobaidebug.top/1713672075754.jpeg" title="多个topic" class="gallery-item"><img src="https://cdn.xiaobaidebug.top/1713672075754.jpeg" alt="多个topic"></a></p><p>单个 <code>topic</code> 的消息可能过多，可将单个队列拆分成多个段，每段就是一个<strong>分区 partition</strong> ，每个消费者负责一个 <code>partition</code></p><p><a href="https://cdn.xiaobaidebug.top/1713672107754.jpeg" title="partition" class="gallery-item"><img src="https://cdn.xiaobaidebug.top/1713672107754.jpeg" alt="partition"></a></p><h2 id="高扩展性"><a href="#高扩展性" class="headerlink" title="高扩展性"></a>高扩展性</h2><p>可将 <code>partition</code> 分部在多台设备，每台设备代表一个 <code>broker</code></p><p><a href="https://cdn.xiaobaidebug.top/1713672180019.jpeg" title="broker" class="gallery-item"><img src="https://cdn.xiaobaidebug.top/1713672180019.jpeg" alt="broker"></a></p><h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h2><p>存在一个问题，如果其中一个<code>partition</code>所在的 <code>broker</code> 挂了，那么这部分的消息不久丢失了吗？</p><p>可以给<code>partition</code> 多加几个副本 <code>replica</code>，从中分为 <code>Leader</code> 和 <code>Follower</code>，<code>Leader</code> 负责生产者和消费者的读写，<code>Follower</code> 负责同步数据</p><p><a href="https://cdn.xiaobaidebug.top/1713672211341.jpeg" title="replicas" class="gallery-item"><img src="https://cdn.xiaobaidebug.top/1713672211341.jpeg" alt="replicas"></a></p><p>将<code>Leader</code> 和 <code>Follower</code> 分散在不同的 <code>broker</code> 上，这样如果 <code>Leader</code>所在的<code>broker</code> 挂了，也不影响 <code>Follower</code>所在的<code>broker</code>，还能从 <code>Followe</code> 选举新的<code>Leader partition</code> 顶上</p><p><a href="https://cdn.xiaobaidebug.top/1713672217821.jpeg" title="高可用" class="gallery-item"><img src="https://cdn.xiaobaidebug.top/1713672217821.jpeg" alt="高可用"></a></p><h2 id="持久化过期策略"><a href="#持久化过期策略" class="headerlink" title="持久化过期策略"></a>持久化过期策略</h2><p>假设所有 <code>broker</code> 都挂了，那岂不是数据全丢了？<br>为了解决这个问题，我们不能光把数据放内存里，还要<strong>持久化</strong>到磁盘中，这样哪怕全部 <code>broker</code> 都挂了，数据也不会全丢，重启服务后，也能从<strong>磁盘里读出数据</strong>，继续工作。</p><p><a href="https://cdn.xiaobaidebug.top/1713672282194.jpeg" title="持久化" class="gallery-item"><img src="https://cdn.xiaobaidebug.top/1713672282194.jpeg" alt="持久化"></a></p><p>磁盘总是有限的，提供保留策略 <code>retention policy</code>，数据超过大小或者时间清理掉</p><h2 id="消费者组-Comsumer-Group"><a href="#消费者组-Comsumer-Group" class="headerlink" title="消费者组 Comsumer Group"></a>消费者组 Comsumer Group</h2><ul><li>每次新增的消费者只能跟着<strong>最新的</strong>消费 Offset 接着消费</li><li>哪怕 B 服务有多个实例，但本质上，它只有一个消费业务方，新增实例一般也是接着之前的 <code>offset</code> 继续消费</li><li>假设现在来了个新的业务方，C 服务，它想从头开始消费消息队列里的数据，这时候就不能跟在 B 服务的 <code>offset</code> 后边继续消费了</li></ul><p>消息队列加入消费者组（<code>consumer group</code>）的概念，B 和 C 服务各自是一个独立的消费者组，不同消费者组维护自己的消费进度，互不打搅</p><p><a href="https://cdn.xiaobaidebug.top/1713672430656.jpeg" title="消费者组互相独立" class="gallery-item"><img src="https://cdn.xiaobaidebug.top/1713672430656.jpeg" alt="消费者组互相独立"></a></p><h2 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h2><p> <strong>ZooKeeper</strong> 组件。它会定期和 broker 通信，获取 整个 kafka 集群的状态，以此判断 某些 broker 是不是跪了，某些消费组消费到哪了。</p><p><a href="https://cdn.xiaobaidebug.top/1713672523963.jpeg" title="加入ZooKeeper" class="gallery-item"><img src="https://cdn.xiaobaidebug.top/1713672523963.jpeg" alt="加入ZooKeeper"></a></p><h2 id="kafka-的应用场景"><a href="#kafka-的应用场景" class="headerlink" title="kafka 的应用场景"></a><code>kafka</code> 的应用场景</h2><p>消息队列是架构中最常见的中间件之一，使用场景之多，堪称万金油！</p><ul><li><strong>削峰填谷：</strong>上游流量忽高忽低，想要提升 <code>cpu/gpu</code> 利用率</li><li><strong>降低系统耦合：</strong> 系统过大，消息流向盘根错节，想要拆解组件</li><li><strong>保护服务：</strong>再比如秒杀活动，请求激增，保护服务尽量不影响用户</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><code>kafka</code> 是消息队列，像消息队列投递消息的是生产者，消费消息的是消费者。增加生产者和消费者的实例个数可以提升系统吞吐。多个消费者可以组成一个消费者组，不同消费者组维护自己的消费进度，互不打搅。</li><li><code>kafka</code> 将消息分为多个 <code>topic</code>，每个 <code>topic</code> 内部拆分为多个 <code>partition</code>，每个 <code>partition</code> 又有自己的副本，不同的 <code>partition</code> 会分布在不同的 <code>broker</code> 上，提升性能的同时，还增加了系统可用性和可扩展性。</li></ul></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MQ系列（四）| RabbitMQ 死信队列和延迟队列</title>
      <link href="/posts/40901.html"/>
      <url>/posts/40901.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h1><h2 id="死信是什么"><a href="#死信是什么" class="headerlink" title="死信是什么"></a>死信是什么</h2><p>死信：无法被消费的消息。由于特定的原因导致队列中的某些消息无法被消费，这些消息没有后续的处理，就会变成死信。当消息在队列中无法被正常消费时，会被发送到死信队列中。</p><h2 id="死信来源"><a href="#死信来源" class="headerlink" title="死信来源"></a>死信来源</h2><p>消息 TTL<br>队列达到最大长度<br>消息拒签(<code>basicNack</code> 或 <code>basicReject</code>)且重入队列为<code>false</code>(<code>requeue=false)</code></p><h2 id="死信架构"><a href="#死信架构" class="headerlink" title="死信架构"></a>死信架构</h2><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141840091.png" title="image-20241211220211008" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141840091.png" alt="image-20241211220211008"></a> </p><h3 id="消息TTL"><a href="#消息TTL" class="headerlink" title="消息TTL"></a>消息TTL</h3><table><thead><tr><th>名称</th><th>交换机</th><th>路由键</th><th>类型</th><th>特征</th><th>参数</th></tr></thead><tbody><tr><td>普通交换机</td><td>normal_exchange</td><td><code>zhangsan</code></td><td>direct</td><td>/</td><td>/</td></tr><tr><td>普通队列</td><td>normal_queue</td><td><code>zhangsan</code></td><td>/</td><td>TTL DLX DLK</td><td><code>x-dead-letter-exchange</code>：<code>dead_exchange</code><br /><code>x-dead-letter-routing-key</code>：<code>lisi</code><br /><code>x-message-ttl</code>: <code>10 * 1000</code></td></tr><tr><td>死信交换机</td><td>dead_exchange</td><td><code>lisi</code></td><td>direct</td><td>/</td><td>/</td></tr><tr><td>死信队列</td><td>dead_queue</td><td><code>lisi</code></td><td>/</td><td>/</td><td>/</td></tr></tbody></table><p>生产者发送消息10条消息到队列 <code>normal-queue</code>，消费者C1关闭不去消费，消息存活时间10s到后，10条消息进去死信队列 <code>dead-queue</code>，</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141840525.png" title="image-20241211220303413" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141840525.png" alt="image-20241211220303413"></a> </p><p>消费端<code>C2</code>开启，开始消费死信队列里的消息</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141840940.png" title="image-20241211222528449" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141840940.png" alt="image-20241211222528449"></a> </p><h3 id="消息被拒"><a href="#消息被拒" class="headerlink" title="消息被拒"></a>消息被拒</h3><p>核心代码：在接收消息的地方  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//消息拒签 requeue 设置 false 表示不重入队</span>channel<span class="token punctuation">.</span><span class="token function">basicReject</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment">//消息不确认，multiple=false 不批量 requeue=false 不重入队</span><span class="token comment">//channel.basicNack(deliveryTag,false,false)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>发送10条消息到队列</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141841649.png" title="image-20241211225554204" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141841649.png" alt="image-20241211225554204"></a> </p><p> 消费端C2拒绝一条消息</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141841516.png" title="image-20241211230004126" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141841516.png" alt="image-20241211230004126"></a> </p><h3 id="队列大小最大长度"><a href="#队列大小最大长度" class="headerlink" title="队列大小最大长度"></a>队列大小最大长度</h3><p>将 <code>x-message-ttl</code> 属性改成 <code>x-max-length : 6</code>，重新启动，发送10个消息，死信队列接收到4个消息</p><table><thead><tr><th>名称</th><th>交换机</th><th>路由键</th><th>类型</th><th>特征</th><th>参数</th></tr></thead><tbody><tr><td>普通队列</td><td>normal_queue</td><td><code>zhangsan</code></td><td>/</td><td>TTL DLX DLK</td><td><code>x-dead-letter-exchange</code>：<code>dead_exchange</code><br /><code>x-dead-letter-routing-key</code>：<code>lisi</code><br /><code>x-max-length</code>: <code>6</code></td></tr></tbody></table><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141841306.png" title="image-20241211223706816" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141841306.png" alt="image-20241211223706816"></a> </p><h1 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><pre><code>延迟队列,队列**内部是有序**的，最重要的特性就体现在它的延时属性上，延时队列中的元素是希望 在指定时间到了**以后或之前取出和处**理，简单来说，延时队列就是用来存放需要**在指定时间被处理**的元素的队列。</code></pre><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ol><li>订单在十分钟之内未支付则自动取消  </li><li>新创建的店铺，如果在十天内都没有上传过商品，则自动发送消息提醒。  </li><li>用户注册成功后，如果三天内没有登陆则进行短信提醒。  </li><li>用户发起退款，如果三天内没有得到处理则通知相关运营人员。 </li><li>预定会议后，需要在预定的时间点前十分钟通知各个与会人员参加会议</li></ol><h3 id="分析场景特点：X-事件发生之后之前-X-时间完成-X-任务"><a href="#分析场景特点：X-事件发生之后之前-X-时间完成-X-任务" class="headerlink" title="分析场景特点：X 事件发生之后之前 X 时间完成 X 任务"></a>分析场景特点：X 事件发生之后之前 X 时间完成 X 任务</h3><p>定时轮询：可能可以解决问题，但如果短期数据量很多，活动期间甚至百万千万的数据，轮询就不能解决了    </p><ul><li><p>☑️账单一周账单未结算的自动结算 </p></li><li><p>❌订单十分钟内未支付则关闭</p></li></ul><h2 id="RabbitMQ-TTL"><a href="#RabbitMQ-TTL" class="headerlink" title="RabbitMQ TTL"></a>RabbitMQ TTL</h2><pre><code>最大存活时间 `TTL： Time to Live`，`RabbitMQ` 中**消息**或**队列**的属性，表面消息或队列的**最大存活时间**如果一条消息设置了 `TTL` 属性或者进入了设置`TTL` 属性的队列，那么这 条消息如果在`TTL` 设置的时间内没有被消费，则会成为&quot;死信&quot;。如果同时配置了队列的TTL 和消息的 `TTL`，那么较小的那个值将会被使用，有两种方式设置 `TTL`。</code></pre><h3 id="消息-TTL"><a href="#消息-TTL" class="headerlink" title="消息 TTL"></a>消息 TTL</h3><p>另一种方式便是针对每条消息设置TTL</p><p> <a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141841893.png" title="image-20241212115827412" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141841893.png" alt="image-20241212115827412"></a></p><h3 id="队列-TTL"><a href="#队列-TTL" class="headerlink" title="队列 TTL"></a>队列 TTL</h3><p>第一种是在创建队列的时候设置队列的 【<code>x-message-ttl</code>】属性 </p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141841078.png" title="image-20241211231446238" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141841078.png" alt="image-20241211231446238"></a> </p><h2 id="整合SpringBoot"><a href="#整合SpringBoot" class="headerlink" title="整合SpringBoot"></a>整合<code>SpringBoot</code></h2><h3 id="架构：队列TTL"><a href="#架构：队列TTL" class="headerlink" title="架构：队列TTL"></a>架构：队列TTL</h3><p>创建两个队列 QA 和 QB，两者队列 TTL 分别设置为 10S 和 40S，然后在创建一个交换机 X 和死信交 换机 Y，它们的类型都是direct，创建一个死信队列 QD，它们的绑定关系</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141841879.png" title="image-20241211233441601" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141841879.png" alt="image-20241211233441601"></a>  </p><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">spring.rabbitmq.host</span><span class="token punctuation">=</span><span class="token value attr-value">localhost</span><span class="token key attr-name">spring.rabbitmq.port</span><span class="token punctuation">=</span><span class="token value attr-value">5672 </span><span class="token key attr-name">spring.rabbitmq.username</span><span class="token punctuation">=</span><span class="token value attr-value">guest </span><span class="token key attr-name">spring.rabbitmq.password</span><span class="token punctuation">=</span><span class="token value attr-value">guest</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置类：TtlQueueConfig"><a href="#配置类：TtlQueueConfig" class="headerlink" title="配置类：TtlQueueConfig"></a>配置类：<code>TtlQueueConfig</code></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TtlQueueConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//普通交换机和队列</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">X_EXCHANGE</span> <span class="token operator">=</span> <span class="token string">"X"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">QUEUE_A</span> <span class="token operator">=</span> <span class="token string">"QA"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">QUEUE_B</span> <span class="token operator">=</span> <span class="token string">"QB"</span><span class="token punctuation">;</span>    <span class="token comment">//普通路由键</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">XA_ROUTING_KEY</span> <span class="token operator">=</span> <span class="token string">"XA"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">XB_ROUTING_KEY</span> <span class="token operator">=</span> <span class="token string">"XB"</span><span class="token punctuation">;</span>    <span class="token comment">//死信交换机和队列</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">Y_DEAD_LETTER_EXCHANGE</span> <span class="token operator">=</span> <span class="token string">"Y"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DEAD_LETTER_QUEUE</span> <span class="token operator">=</span> <span class="token string">"QD"</span><span class="token punctuation">;</span>    <span class="token comment">//死信路由键</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">Y_DEAD_LETTER_ROUTING_KEY</span> <span class="token operator">=</span> <span class="token string">"YD"</span><span class="token punctuation">;</span>    <span class="token comment">//声明普通交换机 X</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"xExchange"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">xExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token constant">X_EXCHANGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//声明死信交换机 Y</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"yExchange"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">yExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token constant">Y_DEAD_LETTER_EXCHANGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//声明普通队列 A 绑定到对应死信交换机 Y 上</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"queueA"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queueA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span> <span class="token constant">Y_DEAD_LETTER_EXCHANGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span> <span class="token constant">Y_DEAD_LETTER_ROUTING_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token constant">QUEUE_A</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//声明普通队列 B ttl 40s 并绑定到对应死信交换机Y</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"queueB"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queueB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span> <span class="token constant">Y_DEAD_LETTER_EXCHANGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span> <span class="token constant">Y_DEAD_LETTER_ROUTING_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span> <span class="token number">40000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token constant">QUEUE_B</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//声明死信队列QD</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"queueD"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queueD</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token constant">DEAD_LETTER_QUEUE</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//声明普通队列 A 绑定到 普通交换机 X</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">queueBindingX</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"queueA"</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queueA<span class="token punctuation">,</span>                                 <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"xExchange"</span><span class="token punctuation">)</span> <span class="token class-name">DirectExchange</span> xExchange<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueA<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>xExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token constant">XA_ROUTING_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//声明普通队列 B 绑定到 普通交换机 X</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">queueBBindingX</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"queueB"</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queueB<span class="token punctuation">,</span>                                  <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"xExchange"</span><span class="token punctuation">)</span> <span class="token class-name">DirectExchange</span> xExchange<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueB<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>xExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token constant">XB_ROUTING_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">deadLetterBindingY</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"queueD"</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queueD<span class="token punctuation">,</span>                                  <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"yExchange"</span><span class="token punctuation">)</span> <span class="token class-name">DirectExchange</span> yExchange<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueD<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>yExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token constant">Y_DEAD_LETTER_ROUTING_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="生产者：SendMsgController"><a href="#生产者：SendMsgController" class="headerlink" title="生产者：SendMsgController"></a>生产者：<code>SendMsgController</code></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/ttl"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendMsgController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"sendMsg/&#123;msg&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：&#123;&#125;,发送一条消息给两个TTL队列：&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"X"</span><span class="token punctuation">,</span> <span class="token string">"XA"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"X"</span><span class="token punctuation">,</span> <span class="token string">"XB"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="消费者：DeadLetterQueueConsumer"><a href="#消费者：DeadLetterQueueConsumer" class="headerlink" title="消费者：DeadLetterQueueConsumer"></a>消费者：<code>DeadLetterQueueConsumer</code></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLetterQueueConsumer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"QD"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveD</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：&#123;&#125;,收到死信队列信息：&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发起一个请求 <a href="http://localhost:8080/ttl/sendMsg/%E5%98%BB%E5%98%BB%E5%98%BB">http://localhost:8080/ttl/sendMsg/嘻嘻嘻</a></p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141841495.png" title="image-20241212111944595" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141841495.png" alt="image-20241212111944595"></a> </p><p>第一条消息在 10S 后变成了死信消息，然后被消费者消费掉，第二条消息在 40S 之后变成了死信消息，  然后被消费掉，这样一个延时队列就打造完成了。</p><h3 id="优化：动态设置Ttl的队列"><a href="#优化：动态设置Ttl的队列" class="headerlink" title="优化：动态设置Ttl的队列"></a>优化：动态设置<code>Ttl</code>的队列</h3><p>在这里新增了一个队列 QC,绑定关系如下,该队列不设置TTL 时间</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141841653.png" title="image-20241212112115951" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141841653.png" alt="image-20241212112115951"></a></p><h4 id="配置类-MsgTtlQueueConfig"><a href="#配置类-MsgTtlQueueConfig" class="headerlink" title="配置类 MsgTtlQueueConfig"></a>配置类 <code>MsgTtlQueueConfig</code></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MsgTtlQueueConfig</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">Y_DEAD_LETTER_EXCHANGE</span> <span class="token operator">=</span> <span class="token string">"Y"</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">QUEUE_C</span> <span class="token operator">=</span> <span class="token string">"QC"</span><span class="token punctuation">;</span>      <span class="token comment">//声明队列 C 死信交换机 </span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"queueC"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queueB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//声明当前队列绑定的死信交换机 </span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span> <span class="token constant">Y_DEAD_LETTER_EXCHANGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//声明当前队列的死信路由 key </span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span> <span class="token string">"YD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//没有声明 TTL 属性 </span>        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token constant">QUEUE_C</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token comment">//声明队列 B 绑定 X 交换机 </span>    <span class="token annotation punctuation">@Bean</span>     <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">queuecBindingX</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"queueC"</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queueC<span class="token punctuation">,</span>       <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"xExchange"</span><span class="token punctuation">)</span> <span class="token class-name">DirectExchange</span> xExchange<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueC<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>xExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">"XC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="生产者发送消息"><a href="#生产者发送消息" class="headerlink" title="生产者发送消息"></a>生产者发送消息</h4><p>核心代码： <code>correlationData.getMessageProperties().setExpiration(ttlTime);</code> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"sendExpirationMsg/&#123;message&#125;/&#123;ttlTime&#125;"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> message<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> ttlTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"X"</span><span class="token punctuation">,</span> <span class="token string">"XC"</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> correlationData<span class="token operator">-></span><span class="token punctuation">&#123;</span>         correlationData<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span>ttlTime<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> correlationData<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：&#123;&#125;,发送一条时长&#123;&#125;毫秒 TTL 信息给队列 C:&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ttlTime<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 发起请求 http:&#x2F;&#x2F;localhost:8080&#x2F;ttl&#x2F;sendExpirationMsg&#x2F;你好 1&#x2F;20000 http:&#x2F;&#x2F;localhost:8080&#x2F;ttl&#x2F;sendExpirationMsg&#x2F;你好 2&#x2F;2000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141841093.png" title="image-20241212112615811" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141841093.png" alt="image-20241212112615811"></a> </p><p><strong>分析</strong>：<strong>RabbitMQ 只会检查第一个消息是否过期</strong>，如果消息过期则丢到死信队列，  如果第一个消息的延时时长很长，而第二个消息的延时时长很短，第二个消息并不会优先得到执行</p><h3 id="安装延时插件"><a href="#安装延时插件" class="headerlink" title="安装延时插件"></a>安装延时插件</h3><ol><li><p>在官网上下载 <a href="https://www.rabbitmq.com/community-plugins.html%EF%BC%8C%E4%B8%8B%E8%BD%BD">https://www.rabbitmq.com/community-plugins.html，下载</a> <code>rabbitmq_delayed_message_exchange</code></p></li><li><p>将插件复制到RabbitMQ 容器的 /plugins 路径，</p><pre class="line-numbers language-none"><code class="language-none"># 复制插件到容器（rabbitmq）的路径(&#x2F;plugins)docker cp D:&#x2F;rabbitmq_delayed_message_exchange-4.0.2.ez rabbitmq:&#x2F;plugins<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>执行命令</p><pre class="line-numbers language-none"><code class="language-none">rabbitmq-plugins enable rabbitmq_delayed_message_exchange<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141841999.png" title="image-20241212113757789" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141841999.png" alt="image-20241212113757789"></a> </p></li><li><p>插件生效</p></li></ol><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141841191.png" title="image-20241212113809910" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141841191.png" alt="image-20241212113809910"></a></p><h3 id="优化：延时队列插件-delayed"><a href="#优化：延时队列插件-delayed" class="headerlink" title="优化：延时队列插件 delayed"></a>优化：延时队列插件 <code>delayed</code></h3><p>在这里新增了一个队列<code>delayed.queue</code>,一个自定义交换机 <code>delayed.exchange</code>，绑定关系如下:</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141841798.png" title="image-20241212113930549" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141841798.png" alt="image-20241212113930549"></a></p><h4 id="配置类-DelayedQueueConfig"><a href="#配置类-DelayedQueueConfig" class="headerlink" title="配置类 DelayedQueueConfig"></a>配置类 <code>DelayedQueueConfig</code></h4><p>在我们自定义的交换机中，这是一种新的交换类型，该类型<strong>消息</strong>支<strong>持延迟投递</strong>机制 消息传递后并不会立即投递到目标队列中，而是存储在 【**<code>mnesia</code><strong>】(<strong>一个分布式数据系统</strong>)表中，当</strong>达到投递时间<strong>时，</strong>才投递**到目标队列中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayedQueueConfig</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DELAYED_EXCHANGE_NAME</span> <span class="token operator">=</span> <span class="token string">"delayed.exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DELAYED_QUEUE_NAME</span> <span class="token operator">=</span> <span class="token string">"delayed.queue"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DELAYED_ROUTING_KEY</span> <span class="token operator">=</span> <span class="token string">"delayed.routingkey"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">delayedQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token constant">DELAYED_QUEUE_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 自定义延迟交换机</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CustomExchange</span> <span class="token function">delayedExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//自定义交换机的类型</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-delayed-type"</span><span class="token punctuation">,</span> <span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomExchange</span><span class="token punctuation">(</span><span class="token constant">DELAYED_EXCHANGE_NAME</span><span class="token punctuation">,</span> <span class="token string">"x-delayed-message"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 绑定延迟队列 到 延迟交换机</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">bindingDelayedQueue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"delayedQueue"</span><span class="token punctuation">)</span><span class="token class-name">Queue</span> delayedQueue<span class="token punctuation">,</span>                                       <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"delayedExchange"</span><span class="token punctuation">)</span> <span class="token class-name">CustomExchange</span> delayedExchange  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>delayedQueue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>delayedExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token constant">DELAYED_ROUTING_KEY</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="消息生产者代码"><a href="#消息生产者代码" class="headerlink" title="消息生产者代码"></a>消息生产者代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DELAYED_EXCHANGE_NAME</span> <span class="token operator">=</span> <span class="token string">"delayed.exchange"</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DELAYED_ROUTING_KEY</span> <span class="token operator">=</span> <span class="token string">"delayed.routingkey"</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"sendDelayMsg/&#123;msg&#125;/&#123;delayTime&#125;"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> delayTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"delayed.exchange"</span><span class="token punctuation">,</span> <span class="token string">"delayed.routingkey"</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> correlationData <span class="token operator">-></span> <span class="token punctuation">&#123;</span> correlationData<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDelay</span><span class="token punctuation">(</span>delayTime<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> correlationData<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：&#123;&#125;,发送一条延迟&#123;&#125;毫秒信息给队列delayed.queue:&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> delayTime<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="消息消费者代码：DeadLetterQueueConsumer-添加消费"><a href="#消息消费者代码：DeadLetterQueueConsumer-添加消费" class="headerlink" title="消息消费者代码：DeadLetterQueueConsumer 添加消费"></a>消息消费者代码：<code>DeadLetterQueueConsumer</code> 添加消费</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"delayed.queue"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveDelayedQueue</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：&#123;&#125;,收到延时队列的消息：&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 发起请求： http:&#x2F;&#x2F;localhost:8080&#x2F;ttl&#x2F;sendDelayMsg&#x2F;come on baby1&#x2F;20000 http:&#x2F;&#x2F;localhost:8080&#x2F;ttl&#x2F;sendDelayMsg&#x2F;come on baby2&#x2F;2000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141841505.png" title="image-20241212114815590" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141841505.png" alt="image-20241212114815590"></a> </p><p> 第二个消息被先消费掉了，符合预期</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><pre><code>延时队列在需要延时处理的场景下非常有用，使用 `RabbitMQ` 来实现延时队列可以很好的利用 `RabbitMQ` 的特性，如：消息可靠发送、消息可靠投递、死信队列来保障消息至少被消费一次以及未被正 确处理的消息不会被丢弃。另外，通过 `RabbitMQ` 集群的特性，可以很好的解决单点故障问题，不会因为 单个节点挂掉导致延时队列不可用或者消息丢失。 </code></pre></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MQ系列（三）| RabbitMQ 消息确认机制</title>
      <link href="/posts/38624.html"/>
      <url>/posts/38624.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="RabbitMQ-消息确认机制"><a href="#RabbitMQ-消息确认机制" class="headerlink" title="RabbitMQ 消息确认机制"></a>RabbitMQ 消息确认机制</h2><blockquote><p>:heavy_exclamation_mark::heavy_exclamation_mark::heavy_exclamation_mark:温馨提示：基于<code>JDK17</code>、<code>SpringBoot 2.1.8.RELEASE</code> 版本，由于<code>RabbitMQ</code> 在 <code>SpringBoot3+</code> 的配置项有所不同， 所以请严格按照该本版来使用，挖一坑：【后续会出一个<code>SpringBoot3+</code>版本的配置相关教程】</p></blockquote><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528538.svg" title="RabbitMQ 消息确认机制-可靠抵达.drawio" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528538.svg" alt="RabbitMQ 消息确认机制-可靠抵达.drawio"></a> </p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>保证消息不丢失，可靠抵达，可以使用事务消息，性能下降250倍 为此引入<strong>确认机制</strong></p><ul><li>生产者确认回调：<code>publisher</code> <code>confirmCallback</code></li><li>生产者退回回调：<code>publisher</code> <code>returnCallback</code>未投递到<code>queue</code>退回模式</li><li>消费者确认：<code>consumer</code> <code>ack</code>确认机制</li></ul><h3 id="ComfirmCallback【生产者确认回调】"><a href="#ComfirmCallback【生产者确认回调】" class="headerlink" title="ComfirmCallback【生产者确认回调】"></a><code>ComfirmCallback</code>【生产者确认回调】</h3><ul><li><strong>概念：</strong><code>ComfirmCallback</code>是生产者消息确认机制的一部分。当生产者发送消息到 <code>RabbitMQ</code> 的交换器（<code>Exchange</code>）后，<code>RabbitMQ</code> 会返回一个确认消息给生产者，这个确认过程可以通过 <code>ConfirmCallback</code> 来处理。</li><li><strong>原理：</strong>生产者发送消息时，会为每条消息关联一个 <code>CorrelationData</code> 对象，这个对象可以包含一些自定义的信息，用于跟踪消息。当消息成功发送到交换器后，<code>RabbitMQ</code> 会触发 <code>ConfirmCallback</code> 接口中的【 <code>confirm</code>】 方法。</li></ul><h3 id="ReturnCallback【生产者退回回调】"><a href="#ReturnCallback【生产者退回回调】" class="headerlink" title="ReturnCallback【生产者退回回调】"></a><code>ReturnCallback</code>【生产者退回回调】</h3><ul><li><strong>概念：</strong><code>ReturnCallback</code> 用于处理消息<strong>无法被正确路由</strong>到队列的情况。当生产者发送消息到交换器后，如果交换器无法将消息路由到任何队列（例如，没有匹配的绑定规则或者队列不存在），消息会被退回给生产者，这个退回过程可以通过 <code>ReturnCallback</code> 来处理。</li><li><strong>原理：</strong>生产者需要配置消息退回机制，并且实现 <code>ReturnCallback</code> 接口。当消息被退回时，<code>ReturnCallback</code> 接口中的 【<code>returnedMessage</code>】 方法会被触发。</li></ul><h3 id="BasicAck【消费者确认】"><a href="#BasicAck【消费者确认】" class="headerlink" title="BasicAck【消费者确认】"></a><code>BasicAck</code>【消费者确认】</h3><ul><li><strong>概念：</strong> <code>BasicAck</code>是消费者确认消息的一种方式。在 <code>RabbitMQ</code> 中，消费者接收到消息后，需要向 <code>RabbitMQ</code> 服务器确认消息已经被正确处理，这样 <code>RabbitMQ</code> 才会从队列中删除该消息。<code>BasicAck</code> 是手动确认模式下用于确认消息的方法之一。</li><li><strong>原理：</strong>消费者在手动确认模式下，从队列中接收消息并进行处理。当处理完成且没有出现问题时，消费者可以使用 Channel 对象的<code>basicAck</code>方法来确认消息。<code>basicAck</code>方法需要传入两个参数：<code>deliveryTag</code>和<code>multiple</code>。<code>deliveryTag</code>是消息的唯一标识，由 RabbitMQ 服务器分配；<code>multiple</code>是一个布尔值，用于表示是否确认多条消息。</li></ul><h2 id="生产者确认回调-ConfirmCallback"><a href="#生产者确认回调-ConfirmCallback" class="headerlink" title="生产者确认回调 ConfirmCallback"></a>生产者确认回调 <code>ConfirmCallback</code></h2><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 开启生产者消息确认机制</span><span class="token key attr-name">spring.rabbitmq.publisher-confirms</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="添加-RabbitMQConfig"><a href="#添加-RabbitMQConfig" class="headerlink" title="添加 RabbitMQConfig"></a>添加 <code>RabbitMQConfig</code></h3><p><strong>自定义 <code>confirmCallback#confirm</code></strong> </p><ul><li><code>CorrelationData</code>：当前消息唯一关联数据【消息的唯一Id】</li><li><code>ack</code>：是否成功收到状态</li><li><code>cause</code>：失败原因</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">&#123;</span>     <span class="token annotation punctuation">@Autowired</span>     <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>         <span class="token annotation punctuation">@PostConstruct</span> <span class="token comment">//创建RabbitMQConfig对象后，执行这个方法</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initRabbitTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//设置确认回调</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ConfirmCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * @param correlationData 当前消息的唯一关联数据（这个消息的唯一id）         * @param ack 消息是否成功收到         * @param cause  失败的原因        */</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token class-name">CorrelationData</span> correlationData<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ack<span class="token punctuation">,</span> <span class="token class-name">String</span> cause<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"confirm=>correlationData【&#123;&#125;】=>ack【&#123;&#125;】=>cause【&#123;&#125;】 "</span><span class="token punctuation">,</span> correlationData<span class="token punctuation">,</span> ack<span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试：生产者确认"><a href="#测试：生产者确认" class="headerlink" title="测试：生产者确认"></a>测试：生产者确认</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>    <span class="token comment">/**     * 发送消息     *     * @param num     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/send"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">OrderReturnReasonEntity</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderReturnReasonEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                data<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"测试-"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"hello-java-exchange"</span><span class="token punctuation">,</span> <span class="token string">"hello-java"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">OrderEntity</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                data<span class="token punctuation">.</span><span class="token function">setOrderSn</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"hello-java-exchange"</span><span class="token punctuation">,</span> <span class="token string">"hello-java"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发送消息: &#123;&#125;条完成"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>消息发送成功，生产者确认回调生效，<strong>注意下这里的<code>correlationData</code>的数据为<code>null</code></strong></p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528539.png" title="image-20241209143121904" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528539.png" alt="image-20241209143121904"></a> </p><h3 id="修改下发送信息"><a href="#修改下发送信息" class="headerlink" title="修改下发送信息"></a>修改下发送信息</h3><p><code>ProducerController</code>#<code>sendMessage</code>中添加当前消息的唯一<code>id</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"hello-java-exchange"</span><span class="token punctuation">,</span> <span class="token string">"hello-java"</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">CorralationData</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>这里<code>correlationData.getId()</code>（也就是<code>UUID</code>）可以帮助开发者在多个消息发送场景中，唯一地标识每条消息，从而准确地跟踪某一条特定消息的发送状态，是发送成功还是失败。</li></ul><h3 id="测试2：消息唯一Id"><a href="#测试2：消息唯一Id" class="headerlink" title="测试2：消息唯一Id"></a>测试2：消息唯一Id</h3><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528540.png" title="image-20241209143421885" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528540.png" alt="image-20241209143421885"></a></p><h2 id="生产者回退回调-ReturnCallback"><a href="#生产者回退回调-ReturnCallback" class="headerlink" title="生产者回退回调 ReturnCallback"></a>生产者回退回调 <code>ReturnCallback</code></h2><p><code>confirm</code> 模式只能保证消息到达 <code>broker</code>，不能保证消息准确投递到目标 <code>queue</code> 里，我们需要保证消息一定要投递到目标 <code>queue</code> 里，此时就需要用到<br><code>return</code> 退回模式。</p><h3 id="添加配置-1"><a href="#添加配置-1" class="headerlink" title="添加配置"></a>添加配置</h3><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">spring.rabbitmq.publisher-returns</span><span class="token punctuation">=</span><span class="token value attr-value">true # 开启生产者消息抵达队列的确认</span><span class="token key attr-name">spring.rabbitmq.template.mandatory</span><span class="token punctuation">=</span><span class="token value attr-value">true # 只要抵达队列，以异步发送优先回调 return confirm,【发送端确认，默认false】，当交换机无法找到队列时，false【直接丢弃数据】，true【会将消息返回给生产者】</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="RabbitMQConfig-配置类添加"><a href="#RabbitMQConfig-配置类添加" class="headerlink" title="RabbitMQConfig 配置类添加"></a><code>RabbitMQConfig</code> 配置类添加</h3><pre><code>只有当前消息不能抵达队列才会触发这个回调</code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//设置消息抵达队列的确认回调</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">setReturnCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ReturnCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**          * 只要消息没有投递给指定的队列，就触发这个失败回调          * @param message  投递失败的消息详细信息          * @param replyCode  回复的状态码          * @param replyText  回复的文本内容          * @param exchange  当时这个消息发给哪个交换机          * @param routingKey  当时这个消息用哪个路由键        */</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">returnedMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token keyword">int</span> replyCode<span class="token punctuation">,</span> <span class="token class-name">String</span> replyText<span class="token punctuation">,</span> <span class="token class-name">String</span> exchange<span class="token punctuation">,</span> <span class="token class-name">String</span> routingKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"消息发送失败，消息：&#123;&#125;，失败码：&#123;&#125;，失败原因：&#123;&#125;，发送的交换机：&#123;&#125;,路由键：&#123;&#125;"</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> replyCode<span class="token punctuation">,</span> replyText<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> replyCode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改发送消息的路由键"><a href="#修改发送消息的路由键" class="headerlink" title="修改发送消息的路由键"></a>修改发送消息的路由键</h3><pre><code>`ProducerController`#`sendMessage`发送消息核心代码修改，将其中一个路由键修改成  `hello2-java`（或者修改成没有可绑定的队列即可）</code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"hello-java-exchange"</span><span class="token punctuation">,</span> <span class="token string">"hello2-java"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 修改这个路由键为 hello2-java</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="测试：生产者退回回调"><a href="#测试：生产者退回回调" class="headerlink" title="测试：生产者退回回调"></a>测试：生产者退回回调</h3><p>执行发送消息，结果如下</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528541.png" title="image-20241209143647892" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528541.png" alt="image-20241209143647892"></a></p><ul><li>消息成功到达 <code>Broker</code> 服务器，消息确认机制生效，打印 <code>confirm</code> 相关信息</li><li>消息接收失败，生产者回退模式生效，其中 <strong>失败原因</strong>：【<code>NO_ROUTE</code>】没有路由到队列，其中<strong>路由键</strong>：【<code>hello2-java</code>】，交换机和失败码等信息都打印出来</li></ul><h2 id="消费者确认：Ack"><a href="#消费者确认：Ack" class="headerlink" title="消费者确认：Ack"></a>消费者确认：Ack</h2><pre><code>消费者收到消息，成功处理发送 `Ack` 给 `Broker`    消费者收到消息自动确认，但是无法确认消息是否被处理完成或者成功处理，需要手动开启`ack`</code></pre><h3 id="测试：默认自动-ack"><a href="#测试：默认自动-ack" class="headerlink" title="测试：默认自动 ack"></a>测试：默认自动 ack</h3><p><code>ProducerController</code> 添加一个发送消息方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"sendMQ/&#123;num&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMQ</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">OrderReturnReasonEntity</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderReturnReasonEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"测试-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"hello-java-exchange"</span><span class="token punctuation">,</span> <span class="token string">"hello-java"</span><span class="token punctuation">,</span>                                       data<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发送消息: &#123;&#125;条完成"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发送10条消息</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528542.png" title="image-20241209162941438" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528542.png" alt="image-20241209162941438"></a>  </p><p>客户端接收到消息，开始处理，处理一条消息完成后，接收下一条消息宕机 </p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528543.png" title="image-20241209160547226" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528543.png" alt="image-20241209160547226"></a> </p><p>收到消息处理一条完成，队列剩下9条消息</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528544.png" title="image-20241209161006108" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528544.png" alt="image-20241209161006108"></a></p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528546.png" title="image-20241209163428598" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528546.png" alt="image-20241209163428598"></a>  </p><p>此时直接结束服务，代表宕机，队列中的<strong>未确认</strong>的消息自动被确认</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528547.png" title="image-20241209163452903" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528547.png" alt="image-20241209163452903"></a> </p><h3 id="手动ack-：添加配置"><a href="#手动ack-：添加配置" class="headerlink" title="手动ack ：添加配置"></a>手动ack ：添加配置</h3><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">spring.rabbitmq.listener.simple.acknowleage-mode</span><span class="token punctuation">=</span><span class="token value attr-value">maunal # 手动ack消息</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发送10条消息，收到后模拟宕机，发现消息不会自动确认</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528548.png" title="image-20241209164445649" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528548.png" alt="image-20241209164445649"></a> </p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528549.png" title="image-20241209164430742" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528549.png" alt="image-20241209164430742"></a> </p><p>宕机后，消息回到准备状态，没有确认 </p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141529496.png" title="image-20241209164704294" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141529496.png" alt="image-20241209164704294"></a>  </p><h3 id="修改接收消息代码"><a href="#修改接收消息代码" class="headerlink" title="修改接收消息代码"></a>修改接收消息代码</h3><p>添加消费者消息确认<code>ack</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RabbitHandler</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveOrderReturnReason</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">OrderReturnReasonEntity</span> content<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"接收到消息：&#123;&#125;"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//消息体</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//消息头配置</span>    <span class="token class-name">MessageProperties</span> messageProperties <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消息处理完成：消息体内容：&#123;&#125;"</span><span class="token punctuation">,</span> content<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//channel内按顺序自增</span>    <span class="token keyword">long</span> deliveryTag <span class="token operator">=</span> messageProperties<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"deliveryTag:&#123;&#125;"</span><span class="token punctuation">,</span> deliveryTag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//签收获取，非批量模式</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>deliveryTag <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"签收货物：&#123;&#125;"</span><span class="token punctuation">,</span> deliveryTag<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>           <span class="token comment">// 拒签 requeue=false丢弃 requeue=true 发回服务器，服务器重新入队</span>           <span class="token comment">// long deliveryTag, boolean multiple, boolean requeue</span>           channel<span class="token punctuation">.</span><span class="token function">basicNack</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// long deliveryTag, boolean requeue</span>           <span class="token comment">// channel.basicReject(deliveryTag, false);</span>           log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"拒绝签收货物：&#123;&#125;"</span><span class="token punctuation">,</span> deliveryTag<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//网络中断</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>消息确认ack，从消息头中获取 <code>deliveryTag</code></li><li><code>deliveryTag</code>：是消息传递标签，它是一个正整数，用于唯一标识一条消息的投递。这个标签主要用于消息确认机制。<ul><li>消息投递顺序：在通道内【<code>channel</code>】内，消息按照顺序被投递，并且【<code>deliveryTag</code> 】值是单调递增的</li><li>重试机制：可以根据未确认<code>deliveryTag</code>重新将消息发送给其他消费者或者在一定时间后重新发送给同一消费者。</li></ul></li><li><code>channel.basicAck(deliveryTag,false)</code> 手动确认，<code>false</code> 非批量</li><li><code>channel.basicNack(deliveryTag,false,false)</code> 拒绝确认<ul><li><code>deliveryTag</code>标识消息的标签， <code>multiple=false</code> 非批量，<code>requeue=false</code>丢弃( <code>requeue=true</code> <strong>发回服务器，服务器重新入队</strong>)</li></ul></li><li><code>channel.basicReject(deliverTag,false)</code> 拒绝确认，不能批量</li></ul><h3 id="测试：重新入队requeue-true"><a href="#测试：重新入队requeue-true" class="headerlink" title="测试：重新入队requeue=true"></a>测试：重新入队<code>requeue=true</code></h3><pre><code>发送10条消息，`channel.basicNack(deliveryTag,false,true)` 中 `requeue=true` ，消息重新入队，再次消费</code></pre><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528551.png" title="image-20241209203537538" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528551.png" alt="image-20241209203537538"></a> </p><p>所有消息消费完毕</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528350.png" title="image-20241209203737712" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528350.png" alt="image-20241209203737712"></a> </p><h3 id="测试：丢弃消息-requeue-false"><a href="#测试：丢弃消息-requeue-false" class="headerlink" title="测试：丢弃消息 requeue=false"></a>测试：丢弃消息 <code>requeue=false</code></h3><p>发送10条消息，<code>channel.basicNack(deliveryTag,false,false)</code> 中 <code>requeue=false</code> ，消息直接丢弃<a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528299.png" title="image-20241209203750543" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528299.png" alt="image-20241209203750543"></a> </p><p>拒绝的消息直接丢弃</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528604.png" title="image-20241209203831722" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412141528604.png" alt="image-20241209203831722"></a> </p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MQ系列（二）| RabbitMQ 整合 SpringBoot</title>
      <link href="/posts/41545.html"/>
      <url>/posts/41545.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="RabbitMQ-整合-SpringBoot"><a href="#RabbitMQ-整合-SpringBoot" class="headerlink" title="RabbitMQ 整合 SpringBoot"></a>RabbitMQ 整合 SpringBoot</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li><pre><code>大多应用中，可通过消息服务中间件来提升系统异步通信、扩展解耦能力、流量削峰</code></pre></li><li> 消息服务中两个重要概念：<pre><code>消息代理（`message broker`）和目的地（`destination`）当消息发送者发送消息以后，将由消息代理接管，消息代理保证消息传递到指定目的地。</code></pre></li><li> 消息队列主要有两种形式的目的地<pre><code>1.     队列（`queue`）：点对点消息通信（`point-to-point`）2.     主题（`topic`）：发布（`publish`）/订阅（`subscribe`）消息通信</code></pre></li></ol><h2 id="RabbitMQ-架构图"><a href="#RabbitMQ-架构图" class="headerlink" title="RabbitMQ 架构图"></a>RabbitMQ 架构图</h2><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131721524.svg" title="rabbitmq架构" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131721524.svg" alt="rabbitmq架构"></a></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h4 id="生产者-Producer"><a href="#生产者-Producer" class="headerlink" title="生产者 Producer"></a>生产者 Producer</h4><pre><code>生产者是消息的发送方，它将消息发送到 RabbitMQ 的交换器中。</code></pre><h4 id="✨消息-Message"><a href="#✨消息-Message" class="headerlink" title="✨消息 Message"></a>✨消息 Message</h4><ul><li>消息=消息头+消息体，根据routekey发送到指定的交换机 Exchange</li><li>消息头：含有各种属性 <strong>routing-key</strong>（路由键）、priority（优先级）、delivery-mode（指出该消息可能需要持久性存储）等。</li></ul><h4 id="✨消息代理-Broker"><a href="#✨消息代理-Broker" class="headerlink" title="✨消息代理 Broker"></a>✨消息代理 Broker</h4><ul><li>消息传递的中间件服务器，负责接收、存储和转发消息，作用类似邮局🏣</li><li>消息存储+消息路由</li><li>Broker = VHost1+Vhost2+Vhost3+…..</li><li>Virtual Host = Exchange + Queue +Binding</li></ul><h4 id="虚拟主机-Virtual-Host"><a href="#虚拟主机-Virtual-Host" class="headerlink" title="虚拟主机 Virtual Host"></a>虚拟主机 Virtual Host</h4><ul><li><p>逻辑分组机制，将不同的用户、队列、交换器等资源隔离开来</p></li><li><p>Virtual 即 VHost</p></li><li><p>默认目录 /</p></li></ul><h4 id="✨交换机-Exchange"><a href="#✨交换机-Exchange" class="headerlink" title="✨交换机 Exchange"></a>✨交换机 Exchange</h4><ul><li>绑定 routekey接收消息并发送到符合routekey 的 队列</li><li>常用三种类型<ul><li>✨<strong>dirct</strong>：<strong>Direct Exchange（直连交换器）</strong> 【<strong>单播</strong>】完全匹配<strong>路由键</strong>的队列<ul><li><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131719657.png" title="image-20241207003055398" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131719657.png" alt="image-20241207003055398"></a> </li></ul></li><li>✨<strong>fanout</strong>：<strong>Fanout Exchange（扇出交换器）</strong>【<strong>广播</strong>】消息分发所有绑定队列上，不处理路由键<ul><li><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131719560.png" title="image-20241207003049286" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131719560.png" alt="image-20241207003049286"></a> </li></ul></li><li>✨<strong>topic</strong>：<strong>Topic Exchange（主题交换器）</strong>【<strong>模式匹配</strong>】<ul><li><code>#</code>:配置0个或者多个单词</li><li><code>*</code>：匹配一个单词</li><li><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720772.png" title="image-20241207003038106" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720772.png" alt="image-20241207003038106"></a>　</li></ul></li><li>headers：很少使用</li><li>system：很少使用</li></ul></li></ul><h4 id="✨队列-Queue"><a href="#✨队列-Queue" class="headerlink" title="✨队列 Queue"></a>✨队列 Queue</h4><ul><li>存储消息的容器，FIFO</li><li>缓冲消息+持久化</li></ul><h4 id="绑定-Binding"><a href="#绑定-Binding" class="headerlink" title="绑定 Binding"></a>绑定 Binding</h4><ul><li>用于消息队列和交换器之间的关联。</li><li>一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。</li><li>Exchange 和Queue的绑定可以是多对多的关系。</li></ul><h4 id="连接-Connection"><a href="#连接-Connection" class="headerlink" title="连接 Connection"></a>连接 Connection</h4><ul><li>网络连接，比如一个TCP连接</li></ul><h4 id="信道-Channel"><a href="#信道-Channel" class="headerlink" title="信道 Channel"></a>信道 Channel</h4><ul><li>信道，多路复用连接中的一条<strong>独立的双向数据流通道</strong>。信道是建立在真实的TCP连接内的虚拟连接，AMQP 命令都是通过信道发出去的，不管是<strong>发布消息</strong>、<strong>订阅队列</strong>还是<strong>接收消息</strong>，这些动作都是通过信道完成。因为对于操作系统来说建立和销毁 TCP 都是非常昂贵的开销，所以引入了信道的概念，以复用一条 TCP 连接。</li></ul><h4 id="消费者-Consumer"><a href="#消费者-Consumer" class="headerlink" title="消费者 Consumer"></a>消费者 Consumer</h4><pre><code>消费者是消息的接收方，它从 RabbitMQ 的队列中获取消息并进行处理。</code></pre><h2 id="Docker-安装-RMQ"><a href="#Docker-安装-RMQ" class="headerlink" title="Docker 安装 RMQ"></a>Docker 安装 RMQ</h2> <pre class="line-numbers language-none"><code class="language-none">docker run -d --restart&#x3D;always --name rabbitmq -p 5671:5671 -p 5672:5672 -p 4369:43699-p25672:25672-p 15671:15671 -p 15672:15672 rabbitmq:management<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="后台页面收发消息"><a href="#后台页面收发消息" class="headerlink" title="后台页面收发消息"></a>后台页面收发消息</h2><p>打开 <a href="localhost:15672">localhost:15672</a></p><h3 id="登录页面"><a href="#登录页面" class="headerlink" title="登录页面"></a>登录页面</h3><pre class="line-numbers language-none"><code class="language-none">登录的用户密码：guest&#x2F;guest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720654.png" title="登录页面" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720654.png" alt="登录页面"></a> </p><h3 id="登录后台首页"><a href="#登录后台首页" class="headerlink" title="登录后台首页"></a>登录后台首页</h3><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720356.png" title="首页" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720356.png" alt="首页"></a></p><h3 id="交换机-Exchange页面"><a href="#交换机-Exchange页面" class="headerlink" title="交换机 Exchange页面"></a>交换机 Exchange页面</h3><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720609.png" title="交换机页面" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720609.png" alt="交换机页面"></a> </p><p>五种交换机类型：<strong>direct</strong>、<strong>fanout</strong>、headers、<strong>topic</strong>、x-local-random</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720740.png" title="新增交换机" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720740.png" alt="新增交换机"></a> </p><h3 id="队列页面"><a href="#队列页面" class="headerlink" title="队列页面"></a>队列页面</h3><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720697.png" title="队列页面" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720697.png" alt="队列页面"></a> </p><h3 id="绑定：交换机根据路由键绑定到对应的队列"><a href="#绑定：交换机根据路由键绑定到对应的队列" class="headerlink" title="绑定：交换机根据路由键绑定到对应的队列"></a>绑定：交换机根据路由键绑定到对应的队列</h3><blockquote><p><strong>Virtual Host</strong>【Exchange –&gt; binding(<strong>route-key</strong>) 】–&gt; Queue(<strong>route-key</strong>)</p><p>默认的虚拟主机的路径是 “/“，即<strong>根目录</strong></p></blockquote><p><strong>交换机和队列绑定</strong></p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720696.png" title="交换机绑定队列" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720696.png" alt="交换机绑定队列"></a> </p><p><strong>队列和交换机绑定关系</strong></p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720966.png" title="队列和交换机绑定关系" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720966.png" alt="队列和交换机绑定关系"></a></p><h2 id="SpringBoot-整合"><a href="#SpringBoot-整合" class="headerlink" title="SpringBoot 整合"></a>SpringBoot 整合</h2><h3 id="配置pom-文件"><a href="#配置pom-文件" class="headerlink" title="配置pom 文件"></a>配置pom 文件</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--AMQP依赖，包含RabbitMQ--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置application-yaml"><a href="#配置application-yaml" class="headerlink" title="配置application.yaml"></a>配置application.yaml</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> rabbitmq<span class="token punctuation">-</span>demo  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest    <span class="token key atrule">virtualHost</span><span class="token punctuation">:</span> /<span class="token comment">#    publisher-confirm-type: CORRELATED</span><span class="token comment">#    publisher-returns: true</span><span class="token comment">#    listener:</span><span class="token comment">#      simple:</span><span class="token comment">#        acknowledge-mode: manual #默认情况下消息消费者是自动确认消息的，如果要手动确认消息则需要修改确认模式为manual</span><span class="token comment">#        prefetch: 1 # 消费者每次从队列获取的消息数量。此属性当不设置时为：轮询分发，设置为1为：公平分发</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试类中-创建交换机"><a href="#测试类中-创建交换机" class="headerlink" title="测试类中-创建交换机"></a>测试类中-创建交换机</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">RabbitmqDemoApplicationTests</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">AmqpAdmin</span> amqpAdmin<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DirectExchange</span> directExchange <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">"hello-java-exchange"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        amqpAdmin<span class="token punctuation">.</span><span class="token function">declareExchange</span><span class="token punctuation">(</span>directExchange<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Exchange[hello-java-exchange] 创建完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>成功创建</strong><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720837.png" title="image-20241206170654862" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720837.png" alt="image-20241206170654862"></a></p><h3 id="创建队列"><a href="#创建队列" class="headerlink" title="创建队列"></a>创建队列</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Queue</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"hello-java-queue"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    amqpAdmin<span class="token punctuation">.</span><span class="token function">declareQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Queue[hello-java-queue] 创建完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行后成功创建</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720822.png" title="image-20241206170811552" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720822.png" alt="image-20241206170811552"></a> </p><h3 id="创建绑定"><a href="#创建绑定" class="headerlink" title="创建绑定"></a>创建绑定</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Binding</span> binding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"hello-java-queue"</span><span class="token punctuation">,</span>                                  <span class="token class-name">Binding<span class="token punctuation">.</span>DestinationType</span><span class="token punctuation">.</span><span class="token constant">QUEUE</span><span class="token punctuation">,</span>                                  <span class="token string">"hello-java-exchange"</span><span class="token punctuation">,</span>                                  <span class="token string">"hello-java"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    amqpAdmin<span class="token punctuation">.</span><span class="token function">declareBinding</span><span class="token punctuation">(</span>binding<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Binding[hello-java-binding] 创建完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>直连交换机</strong>【<code>hello-java-exchang</code>e】和队列【<code>hello-java-queue</code>】用 <code>routingkey</code> 【<code>hello-java</code>】绑定</p><p><strong>队列绑定</strong></p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720396.png" title="image-20241206170917982" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720396.png" alt="image-20241206170917982"></a></p><p><strong>交换机绑定</strong></p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720598.png" title="image-20241206171001858" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720598.png" alt="image-20241206171001858"></a></p><h3 id="发送消息【JSON消息转换器】"><a href="#发送消息【JSON消息转换器】" class="headerlink" title="发送消息【JSON消息转换器】"></a>发送消息【JSON消息转换器】</h3><p>配置 <code>RabbitConfig</code> 序列化 <code>json</code> </p><blockquote><p>根据源码 <code>RabbitAutoConfiguration</code>  创建<code>@Bean RabbitTemplate</code> 中的消息转换器属性 <code>MessageConverter messageConverter = new SimpleMessageConverter();</code></p><p>说明了<code>RabbitMQ</code> 自动配置过程中，创建工具类【<code>RabbitTemplate</code>】，其中默认的消息转换器是 【<code>SimpleMessageConverter</code>】，我们来看下【<code>SimpleMessageConverter</code>】源码是如何收发消息的</p></blockquote><p><strong><code>SimpleMessageConverter</code>创建消息</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建消息,默认使用序列化 Serializable类型发送，发送的消息实体需要实现序列化</span><span class="token keyword">protected</span> <span class="token class-name">Message</span> <span class="token function">createMessage</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">MessageProperties</span> messageProperties<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MessageConversionException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        messageProperties<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/octet-stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            bytes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>object<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MessageConversionException</span><span class="token punctuation">(</span><span class="token string">"failed to convert to Message content"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        messageProperties<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/plain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        messageProperties<span class="token punctuation">.</span><span class="token function">setContentEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">Serializable</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            bytes <span class="token operator">=</span> <span class="token class-name">SerializationUtils</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MessageConversionException</span><span class="token punctuation">(</span><span class="token string">"failed to convert to serialized Message content"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        messageProperties<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/x-java-serialized-object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        messageProperties<span class="token punctuation">.</span><span class="token function">setContentLength</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> messageProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> var10002 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>var10002 <span class="token operator">+</span> <span class="token string">" only supports String, byte[] and Serializable payloads, received: "</span> <span class="token operator">+</span> object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>SimpleMessageConverter</code>消费消息</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">fromMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MessageConversionException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> content <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">MessageProperties</span> properties <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>properties <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> contentType <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>contentType <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> contentType<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> encoding <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getContentEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>encoding <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    encoding <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultCharset<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MessageConversionException</span><span class="token punctuation">(</span><span class="token string">"failed to convert text-based Message content"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>contentType <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> contentType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"application/x-java-serialized-object"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    content <span class="token operator">=</span> <span class="token class-name">SerializationUtils</span><span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> <span class="token operator">|</span> <span class="token class-name">IllegalStateException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MessageConversionException</span><span class="token punctuation">(</span><span class="token string">"failed to convert serialized Message content"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>content <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            content <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>自定义消息类型转器 <code>MessageConverter</code></strong></p><blockquote><p><code>MessageConverter</code> 的层次结构</p></blockquote><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720416.png" title="image-20241207013346381" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720416.png" alt="image-20241207013346381"></a></p><p><strong>自定义消息类型转换器</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>support<span class="token punctuation">.</span>converter<span class="token punctuation">.</span></span><span class="token class-name">Jackson2JsonMessageConverter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>support<span class="token punctuation">.</span>converter<span class="token punctuation">.</span></span><span class="token class-name">MessageConverter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MessageConverter</span> <span class="token function">jsonMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建数据：<strong>订单退出原因实体对象</strong> 注意需要序列化 <code>Serializable</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">//@TableName("oms_order_return_reason")</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderReturnReasonEntity</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span><span class="token comment">/** * 退货原因名 */</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">/** * 排序 */</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> sort<span class="token punctuation">;</span><span class="token comment">/** * 启用状态 */</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> status<span class="token punctuation">;</span><span class="token comment">/** * create_time */</span><span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类中发送消息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">OrderReturnReasonEntity</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderReturnReasonEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    data<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"hello-java-exchange"</span><span class="token punctuation">,</span> <span class="token string">"hello-java"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发送消息: &#123;&#125;"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>队列收到消息</strong></p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720069.png" title="image-20241206192848893" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720069.png" alt="image-20241206192848893"></a> </p><p><strong>收到消息对象</strong> </p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720465.png" title="image-20241206193039689" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412131720465.png" alt="image-20241206193039689"></a> </p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"测试"</span><span class="token punctuation">,</span><span class="token property">"sort"</span><span class="token operator">:</span><span class="token null keyword">null</span><span class="token punctuation">,</span><span class="token property">"status"</span><span class="token operator">:</span><span class="token null keyword">null</span><span class="token punctuation">,</span><span class="token property">"createTime"</span><span class="token operator">:</span><span class="token number">1733484472414</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="接收信息"><a href="#接收信息" class="headerlink" title="接收信息"></a>接收信息</h3><p>在<strong>启动类</strong>上添加 <code>@EnableRabbit </code>开启 RabbitMQ</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableRabbit</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitmqDemoApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">RabbitmqDemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在需要接收消息的地方添加方法 <code>@RabbitListerner</code> 、<code>@RabbitHandler</code></p><blockquote><p>@<code>RabbitListerner</code> ：用在类和方法上并绑定对应的队列</p><p>@<code>RabbitHandler</code>：用在方法上，可以接收<strong>不同的类型的数据</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"hello-java-queue"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderMQHandler</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitHandler</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveOrderReturnReason</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">OrderReturnReasonEntity</span> content<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//消息体</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//消息头配置</span>        <span class="token class-name">MessageProperties</span> messageProperties <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消息体内容：&#123;&#125;"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RabbitHandler</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiverOrder</span><span class="token punctuation">(</span><span class="token class-name">OrderEntity</span> content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"接收消息=>Order：&#123;&#125;"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功收到<code>OrderReturnReasonEntity</code>对象数据</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">2024-12-06T22:46:37.495+08:00  INFO 15808 --- [ntContainer#0-3] c.s.rabbitmqdemo.handler.OrderMQHandler  : 消息体内容：OrderReturnReasonEntity(id&#x3D;1, name&#x3D;测试-0, sort&#x3D;null, status&#x3D;null, createTime&#x3D;Fri Dec 06 22:46:37 CST 2024)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功收到<code>OrderEntity</code>对象数据</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">2024-12-06T22:46:37.522+08:00  INFO 15808 --- [ntContainer#0-3] c.s.rabbitmqdemo.handler.OrderMQHandler  : 接收消息&#x3D;&gt;Order：OrderEntity(id&#x3D;1, memberId&#x3D;null, orderSn&#x3D;null, couponId&#x3D;null, createTime&#x3D;Fri Dec 06 22:46:37 CST 2024, memberUsername&#x3D;测试-1, totalAmount&#x3D;null, payAmount&#x3D;null, freightAmount&#x3D;null, promotionAmount&#x3D;null, integrationAmount&#x3D;null, couponAmount&#x3D;null, discountAmount&#x3D;null, payType&#x3D;null, sourceType&#x3D;null, status&#x3D;null, deliveryCompany&#x3D;null, deliverySn&#x3D;null, autoConfirmDay&#x3D;null, integration&#x3D;null, growth&#x3D;null, billType&#x3D;null, billHeader&#x3D;null, billContent&#x3D;null, billReceiverPhone&#x3D;null, billReceiverEmail&#x3D;null, receiverName&#x3D;null, receiverPhone&#x3D;null, receiverPostCode&#x3D;null, receiverProvince&#x3D;null, receiverCity&#x3D;null, receiverRegion&#x3D;null, receiverDetailAddress&#x3D;null, note&#x3D;null, confirmStatus&#x3D;null, deleteStatus&#x3D;null, useIntegration&#x3D;null, paymentTime&#x3D;null, deliveryTime&#x3D;null, receiveTime&#x3D;null, commentTime&#x3D;null, modifyTime&#x3D;null)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MQ系列（一）| RabbitMQ 快速入门</title>
      <link href="/posts/46172.html"/>
      <url>/posts/46172.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="RabbitMQ-快速入门"><a href="#RabbitMQ-快速入门" class="headerlink" title="RabbitMQ 快速入门"></a>RabbitMQ 快速入门</h1><blockquote><p>官网：<a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a></p><p>入门教程：<a href="https://www.rabbitmq.com/tutorials">https://www.rabbitmq.com/tutorials</a></p><p>最新版本：<code>4.0.2</code></p><p>版本参考：<code>JDK17、Maven Or Gradle</code></p></blockquote><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>RabbitMQ是一个可靠且成熟的消息传递和流代理，易于部署在云环境、本地和本地机器上。它目前被全球数百万人使用。<br><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/post/rabbitmq-logo-with-name.svg" title="rabbitmq-logo-with-name" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/post/rabbitmq-logo-with-name.svg" alt="rabbitmq-logo-with-name"  /></a></p><h2 id="2、为什么使用"><a href="#2、为什么使用" class="headerlink" title="2、为什么使用"></a>2、为什么使用</h2><p>公司业务场景核心：解耦、异步、削峰</p><h3 id="2-1、解耦"><a href="#2-1、解耦" class="headerlink" title="2.1、解耦"></a>2.1、解耦</h3><p><code>A</code>系统发数据给到<code>BCD</code>系统，如果<code>E</code>系统需要接入？<code>C</code>系统不需要了？A系统的负责人就需要来回修改接口对接其他系统。</p><p> <a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/post/202203061747025.png" title="未解耦" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/post/202203061747025.png" alt="未解耦"></a></p><p>如果使用<code>MQ</code>，<code>A</code>系统产生一条数据，发送到<code>MQ</code>中，那个系统需要数据自己去<code>MQ</code>消费。如果新的系统需要数据，直接从<code>MQ</code>中消费；某个系统不需要数据的话，取消消费这个<code>MQ</code>即可。这样<code>A</code>系统不需要考虑谁发送数据给谁，不需要考虑是否调用成功、失败超时等问题。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/post/202203062104532.png" title="MQ解耦" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/post/202203062104532.png" alt="MQ解耦"></a> </p><p><strong>总结</strong>：通过一个<code>MQ</code>，<code>Pub/Sub</code>发布订阅消息模型，<code>A</code>系统就和其他系统彻底耦合了。</p><h4 id="2-2-1、项目应用"><a href="#2-2-1、项目应用" class="headerlink" title="2.2.1、项目应用"></a>2.2.1、项目应用</h4><p> 车站系统通过控制命令下发给各个设备，其中车站的设备通常包含：<strong>闸机</strong>、<strong>半自动售票机</strong>、<strong>自动售票机</strong>、<strong>手持机等设备</strong>。</p><p>如果按照常规的同步方式来对接不同的设备，这将使得系统冗余的代码很多。当车站增减一个设备就可能需要重新对接接口，造成系统<strong>耦合性很高</strong>，这样的效率不高且不优雅。</p><p>所以当系统需要发送命令（<strong>生产一个数据</strong>），将数据放到<code>MQ</code>中，不需要知道哪个设备接收消息成功或者失败，其中需要消费的设备自己去订阅并且获取相应的消息即可。这样就可以达到系统下发设备控制命令，不同设备响应。</p><h3 id="2-2、异步"><a href="#2-2、异步" class="headerlink" title="2.2、异步"></a>2.2、异步</h3><p> <code>A</code>系统接收请求，需要本地入库，还需要<code>BCD</code>三个系统入库，本地入库（<code>3ms</code>），<code>BCD</code>（<code>300ms+400ms+500ms</code>），用户体验很差等待时间太长。业内请求需要做到 <code>200ms</code> 以内，对用户几乎无感。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/post/202203062204267.png" title="异步-1" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/post/202203062204267.png" alt="异步-1"></a> </p><p> 使用MQ，A系统连续发送3条消息到消息队列，假如消耗5ms，请求花了 5 + 3 = 8ms ，对于用户来说就是点了一个按钮返回很快。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203062210072.png" title="异步-2" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203062210072.png" alt="异步-2"></a> </p><h3 id="2-3、削峰"><a href="#2-3、削峰" class="headerlink" title="2.3、削峰"></a>2.3、削峰</h3><p> 每天一段时间，A系统风平浪静，每秒请求数量就<code>50</code>个。结果每次一到 <code>12:00~13:00</code>，每秒并发请求数量突然暴增到5k+条。但是系统是直接基于<code>MySQL</code>，大量请求涌入<code>MySQL</code>，每秒执行约<code>5k</code>条<code>SQL</code>， 一般情况下<code>MySQL</code> 每秒可抗 <code>2k</code>请求，<code>5k</code>的请求可能打死<code>MySQL</code>，导致无法使用。 一旦过了高峰，到了下午就到了低峰期，每秒请求数量 <code>50</code> 左右，对整个系统没有多少压力了。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/post/202203062301225.png" title="未削峰" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/post/202203062301225.png" alt="未削峰"></a> </p><p>如果使用MQ，每秒 5k 请求写入 MQ , A系统每秒最多处理 2k 个请求，因为 MySQL每秒最多请求 2k 个请求。A系统从MQ中慢慢拉取请求，每秒2k个请求，不超过自己每秒最大的请求数量即可。所以再高峰期，A系统不会挂掉。而MQ每秒进 5k ，出 2k，请求就会在高峰期积压可能多大十几万甚至百万的消息再 MQ中。 </p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/post/202203062328446.png" title="MQ削峰" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/post/202203062328446.png" alt="MQ削峰"></a> </p><p>总结：短暂的挤压后是可允许的，等到高峰期过后，每秒进入<code>MQ</code>的消息降低很多，但是系统依然按照 2k 的请求取消费，<code>A</code>系统很快的就会把挤压解决掉了。</p><h3 id="2-4、并行"><a href="#2-4、并行" class="headerlink" title="2.4、并行"></a>2.4、并行</h3><p> <a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/post/202409252215400.jpg" title="img" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/post/202409252215400.jpg" alt="img"></a></p><h3 id="2-5、排队"><a href="#2-5、排队" class="headerlink" title="2.5、排队"></a>2.5、排队</h3><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/post/202409252215401.jpg" title="img" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/post/202409252215401.jpg" alt="img"></a> </p><h2 id="3、消息队列工具-RabbitMQ"><a href="#3、消息队列工具-RabbitMQ" class="headerlink" title="3、消息队列工具 RabbitMQ"></a>3、消息队列工具 RabbitMQ</h2><h3 id="3-1、常见MQ产品"><a href="#3-1、常见MQ产品" class="headerlink" title="3.1、常见MQ产品"></a>3.1、常见MQ产品</h3><ul><li><p>ActiveMQ：基于<code>JMS</code>（<code>Java Message Service</code>）协议，<code>java</code>语言，<code>jdk</code></p></li><li><p>RabbitMQ：基于<code>AMQP</code>协议，<code>erlang</code>语言开发，稳定性好</p></li><li><p>RocketMQ：基于<code>JMS</code>，阿里巴巴产品，目前交由<code>Apache</code>基金会</p></li><li><p>Kafka：分布式消息系统，高吞吐量</p></li></ul><h3 id="3-2、RabbitMQ基础概念"><a href="#3-2、RabbitMQ基础概念" class="headerlink" title="3.2、RabbitMQ基础概念"></a>3.2、RabbitMQ基础概念</h3><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/post/RabbitMQ%E7%BB%84%E4%BB%B6.jpg" title="RabbitMQ组件" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/post/RabbitMQ%E7%BB%84%E4%BB%B6.jpg" alt="RabbitMQ组件"></a>        Broker：简单来说就是消息队列服务器实体</p><pre><code>Exchange：消息交换机，它指定消息按什么规则，路由到哪个队列Queue：消息队列载体，每个消息都会被投入到一个或多个队列Binding：绑定，它的作用就是把 exchange和 queue按照路由规则绑定起来Routing Key：路由关键字， exchange根据这个关键字进行消息投递vhost：虚拟主机，一个 broker里可以开设多个 vhost，用作不同用户的权限分离producer：消息生产者，就是投递消息的程序consumer：消息消费者，就是接受消息的程序channel：消息通道，在客户端的每个连接里，可建立多个 channel，每个 channel代表一个会话任务</code></pre><h3 id="3-3、五种消息模型"><a href="#3-3、五种消息模型" class="headerlink" title="3.3、五种消息模型"></a>3.3、五种消息模型</h3><p>RabbitMQ提供了6种消息模型，但是第6种其实是RPC，并不是MQ，因此不予学习。那么也就剩下5种。</p><p>但是其实3、4、5这三种都属于订阅模型，只不过进行路由的方式不同。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/post/202409252215403.jpg" title="img" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/post/202409252215403.jpg" alt="img"></a> </p><ul><li><strong>基本消息模型</strong>：生产者–&gt;队列–&gt;消费者</li></ul><ul><li><strong><code>work</code>消息模型</strong>：生产者–&gt;队列–&gt;多个消费者竞争消费</li></ul><ul><li><strong>订阅模型</strong>-**<code>Fanout</code>**：广播模式，将消息交给所有绑定到交换机的队列，每个消费者都会收到同一条消息</li></ul><ul><li>**订阅模型-<code>Direct</code>**：定向，把消息交给符合指定 <strong><code>rotingKey</code></strong> 的队列</li></ul><ul><li><strong>订阅模型-<code>Topic</code> 主题模式</strong>：通配符，把消息交给符合**<code>routing pattern</code>（**路由模式） 的队列</li></ul><h2 id="4、消息不丢失"><a href="#4、消息不丢失" class="headerlink" title="4、消息不丢失"></a>4、消息不丢失</h2><h3 id="4-1、MQ角度"><a href="#4-1、MQ角度" class="headerlink" title="4.1、MQ角度"></a>4.1、<code>MQ</code>角度</h3><ol><li><p>生产者不丢数据</p></li><li><p>MQ服务器不丢数据</p></li><li><p>消费者不丢数据</p></li></ol><p>保证消息不丢失有两种<strong>实现方式</strong>：</p><ul><li><p>开启事务模式 (不推荐)</p></li><li><p>消息息确认模式（生产者，消费者）</p></li></ul><p>说明：开启事务会大幅<strong>降低消息发送及接收效率</strong>，使用的<strong>相对较少</strong>，因此我们生产环境一般都采取消息<strong>确认模式</strong></p><h3 id="4-2、消息确认"><a href="#4-2、消息确认" class="headerlink" title="4.2、消息确认"></a>4.2、消息确认</h3><h5 id="1、消息持久化"><a href="#1、消息持久化" class="headerlink" title="1、消息持久化"></a>1、消息持久化</h5><p>如果希望RabbitMQ重启之后消息不丢失，那么需要对以下3种实体均配置持久化</p><ul><li><strong>Exchange</strong></li><li><strong>Queue</strong></li><li><strong>message</strong></li></ul><p>声明exchange时设置持久化（<code>durable = true</code>）并且不自动删除 (<code>autoDelete = false</code>)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> durable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> autoDelete <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"dlx"</span><span class="token punctuation">,</span> <span class="token constant">TOPIC</span><span class="token punctuation">,</span> durable<span class="token punctuation">,</span> autoDelete<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>声明queue时设置持久化（<code>durable = true</code>）并且不自动删除 (<code>autoDelete = false</code>)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> durable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> autoDelete <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"order-summary-queue"</span><span class="token punctuation">,</span> durable<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> autoDelete<span class="token punctuation">,</span> queueArguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>发送消息时通过设置（<code>deliveryMode=2</code>）持久化消息：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">deliveryMode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">priority</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">,</span> <span class="token string">"order.created"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> properties<span class="token punctuation">,</span> <span class="token string">"sample-data"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、发送确认"><a href="#2、发送确认" class="headerlink" title="2、发送确认"></a>2、发送确认</h5><p>有时，业务处理成功，消息也发了，但是我们并不知道消息是否成功到达了<code>rabbitmq</code>，如果由于网络等原因导致业务成功而消息发送失败，那么发送方将出现不一致的问题，此时可以使用<code>rabbitmq</code>的发送确认功能，即要求<code>rabbitmq</code>显式告知我们消息是否已成功发送。</p><h5 id="3、手动消费确认"><a href="#3、手动消费确认" class="headerlink" title="3、手动消费确认"></a>3、手动消费确认</h5><p>有时，消息被正确投递到消费方，但是消费方处理失败，那么便会出现消费方的不一致问题。比如:订单已创建的消息发送到用户积分子系统中用于增加用户积分，但是积分消费方处理却都失败了，用户就会问：我购买了东西为什么积分并没有增加呢？</p><p>要解决这个问题，需要引入消费方确认，即只有消息被成功处理之后才告知<code>rabbitmq</code>以<code>ack</code>，否则告知<code>rabbitmq</code>以<code>nack</code></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis系列（一）| 单机集群搭建3主3从</title>
      <link href="/posts/12892.html"/>
      <url>/posts/12892.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="Redis集群部署-单主机-6节点-3M-3S"><a href="#Redis集群部署-单主机-6节点-3M-3S" class="headerlink" title="Redis集群部署-单主机 6节点 3M+3S"></a>Redis集群部署-单主机 6节点 3M+3S</h1><h2 id="下载docker-redis-镜像"><a href="#下载docker-redis-镜像" class="headerlink" title="下载docker redis 镜像"></a>下载docker redis 镜像</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker pull redis:4.0# 或者直接下载最新版redis镜像docker pull redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>!!! 注意 redis 5.0以上创建集群不在使用ruby，因此如果使用最新版的redis 一下ruby部分内容直接跳过</strong></p><h2 id="在-data下新建-redis-cluster-文件夹，然后创建-redis-cluster-tmpl-文件"><a href="#在-data下新建-redis-cluster-文件夹，然后创建-redis-cluster-tmpl-文件" class="headerlink" title="在 /data下新建 redis-cluster 文件夹，然后创建 redis-cluster.tmpl 文件"></a>在 /data下新建 redis-cluster 文件夹，然后创建 redis-cluster.tmpl 文件</h2><pre class="line-numbers language-tmpl" data-language="tmpl"><code class="language-tmpl"># bind 127.0.0.1protected-mode noport $&#123;PORT&#125;daemonize nodir &#x2F;data&#x2F;redisappendonly yescluster-enabled yescluster-config-file nodes.confcluster-node-timeout 15000cluster-announce-port $&#123;PORT&#125;cluster-announce-bus-port 1$&#123;PORT&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编写初始化脚本-init-redis-cluster-sh，执行创建目录的任务"><a href="#编写初始化脚本-init-redis-cluster-sh，执行创建目录的任务" class="headerlink" title="编写初始化脚本 init-redis-cluster.sh，执行创建目录的任务"></a>编写初始化脚本 init-redis-cluster.sh，执行创建目录的任务</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#! &#x2F;bin&#x2F;bash# 下载redis镜像docker pull redis# 创建redis基础对应的虚拟网络docker network create redis-net# 创建redis集群环境所需要的目录 单机 6节点 3主3从mkdir -p &#x2F;data&#x2F;cluster&#x2F;rediscp &#x2F;data&#x2F;redis-cluster.tmpl &#x2F;data&#x2F;cluster&#x2F;redis# 创建6个节点对应的目录 7001-7003 为master  7004-7006为slavefor port in &#96;seq 7000 7005&#96;; do        mkdir -p &#x2F;data&#x2F;cluster&#x2F;redis&#x2F;$port&#x2F; \        &amp;&amp; mkdir -p &#x2F;data&#x2F;cluster&#x2F;redis&#x2F;$port&#x2F;data \        &amp;&amp; PORT&#x3D;$port envsubst &lt; &#x2F;data&#x2F;cluster&#x2F;redis&#x2F;redis-cluster.tmpl &gt; &#x2F;data&#x2F;cluster&#x2F;redis&#x2F;$port&#x2F;redis$port.conf;done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="启动redis-编写redis启动脚本-create-redis-instance-sh"><a href="#启动redis-编写redis启动脚本-create-redis-instance-sh" class="headerlink" title="启动redis 编写redis启动脚本 create-redis-instance.sh"></a>启动redis 编写redis启动脚本 create-redis-instance.sh</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#! &#x2F;bin&#x2F;bash# 运行docker redis 的 master 和 slave 实例for port in &#96;seq 7000 7005&#96;; do    docker run -d --net host \    --privileged&#x3D;true \    -v &#x2F;data&#x2F;cluster&#x2F;redis&#x2F;$&#123;port&#125;&#x2F;redis$&#123;port&#125;.conf:&#x2F;data&#x2F;redis.conf \    -v &#x2F;data&#x2F;cluster&#x2F;redis&#x2F;$&#123;port&#125;&#x2F;data:&#x2F;data&#x2F;redis \    --restart always --name redis-$&#123;port&#125; \    redis redis-server &#x2F;data&#x2F;redis.conf;done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编写关闭并删除redis容器的脚本"><a href="#编写关闭并删除redis容器的脚本" class="headerlink" title="编写关闭并删除redis容器的脚本"></a>编写关闭并删除redis容器的脚本</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#! &#x2F;bin&#x2F;bashdocker stop redis-7000docker stop redis-7001docker stop redis-7002docker stop redis-7003docker stop redis-7004docker stop redis-7005# 间隔5s后继续执行sleep 5sdocker rm redis-7000docker rm redis-7001docker rm redis-7002docker rm redis-7003docker rm redis-7004docker rm redis-7005<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="检查集群是否运行正常"><a href="#检查集群是否运行正常" class="headerlink" title="检查集群是否运行正常"></a>检查集群是否运行正常</h2><p>进入7000 容器</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker exec -it redis-7000 &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建redis集群"><a href="#创建redis集群" class="headerlink" title="创建redis集群"></a>创建redis集群</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">redis-cli --cluster create \172.162.0.202:6000 \172.162.0.202:6001 \172.162.0.202:6002 \172.162.0.202:6003 \172.162.0.202:6004 \172.162.0.202:6005 \--cluster-replicas 1输入yes确认<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo系列（三）| 整合全局音乐</title>
      <link href="/posts/9338.html"/>
      <url>/posts/9338.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="Hexo系列（三）-整合全局音乐"><a href="#Hexo系列（三）-整合全局音乐" class="headerlink" title="Hexo系列（三）| 整合全局音乐"></a>Hexo系列（三）| 整合全局音乐</h1><h2 id="1、hexo-目录下安装"><a href="#1、hexo-目录下安装" class="headerlink" title="1、hexo 目录下安装"></a>1、hexo 目录下安装</h2><p><code>npm install –save hexo-tag-aplayer</code></p><h2 id="2、修改-hexo-目录下-Hexo-配置文件-config-yml"><a href="#2、修改-hexo-目录下-Hexo-配置文件-config-yml" class="headerlink" title="2、修改 hexo 目录下 Hexo 配置文件_config.yml"></a>2、修改 hexo 目录下 Hexo 配置文件_config.yml</h2><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">aplayer</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">asset_inject</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3、修改-hexo-目录下主题配置文件-config-butterfly-yml"><a href="#3、修改-hexo-目录下主题配置文件-config-butterfly-yml" class="headerlink" title="3、修改 hexo 目录下主题配置文件_config.butterfly.yml"></a>3、修改 hexo 目录下主题配置文件_config.butterfly.yml</h2><p>找到： <code>aplayerInject</code></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">aplayerInject</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token key atrule">per_page</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>找到：<code>pjax</code></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">pjax</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>找到：<code>inject</code> 在 <code>bottom</code> 里添加</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">inject</span><span class="token punctuation">:</span>  <span class="token key atrule">head</span><span class="token punctuation">:</span>  <span class="token key atrule">bottom</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">'&lt;div data-id="60198" data-server="netease" data-type="song" data-fixed="true" data-autoplay="true"> &lt;/div>'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>以上修改后，既可实现全局播放器，不会因为页面切换中断</strong></p><h2 id="以下是添加音乐的方法：修改以上bottom内的代码"><a href="#以下是添加音乐的方法：修改以上bottom内的代码" class="headerlink" title="以下是添加音乐的方法：修改以上bottom内的代码"></a>以下是添加音乐的方法：修改以上bottom内的代码</h2><p>引用自 <a href="https://butterfly.js.org/posts/507c070f/#%E9%97%9C%E9%96%89-asset-inject">butterfly 主题文档说明</a>，加了翻译</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">&lt;div data<span class="token punctuation">-</span>id="60198" data<span class="token punctuation">-</span>server="netease" data<span class="token punctuation">-</span>type="playlist" data<span class="token punctuation">-</span>fixed="true" data<span class="token punctuation">-</span>autoplay="`false`"<span class="token punctuation">></span> &lt;/div<span class="token punctuation">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>option</th><th>default</th><th>description</th></tr></thead><tbody><tr><td>data-id</td><td><strong>require</strong></td><td>song id / playlist id / album id / search keyword</td></tr><tr><td>data-server</td><td><strong>require</strong></td><td>music platform: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td></tr><tr><td>data-type</td><td><strong>require</strong></td><td><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td></tr><tr><td>data-fixed</td><td><code>false</code></td><td>enable fixed mode 【开启固定模式】</td></tr><tr><td>data-mini</td><td><code>false</code></td><td>enable mini mode 【开启迷你模式】</td></tr><tr><td>data-autoplay</td><td><code>false</code></td><td>audio autoplay 【自动播放，移动端浏览器暂时不支持此功能】</td></tr><tr><td>data-theme</td><td><code>#2980b9</code></td><td>main color 【主题颜色】</td></tr><tr><td>data-loop</td><td><code>all</code></td><td>player loop play, values: ‘all’, ‘one’, ‘none’ 【列表循环模式：<code>all</code>, <code>one</code>,<code>none</code>】</td></tr><tr><td>data-order</td><td><code>list</code></td><td>player play order, values: ‘list’, ‘random’ 【列表播放模式： <code>list</code>, <code>random</code>】</td></tr><tr><td>data-preload</td><td><code>auto</code></td><td>values: ‘none’, ‘metadata’, ‘auto’ 【音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code>】</td></tr><tr><td>data-volume</td><td><code>0.7</code></td><td>default volume, notice that player will remember user setting, default volume will not work after user set volume themselves 【默认音量，注意播放器会记住用户的设置，用户自己设置音量后，默认音量将不起作用】</td></tr><tr><td>data-mutex</td><td><code>true</code></td><td>prevent to play multiple player at the same time, pause other players when this player start play 【防止同时播放多个播放器，在该播放器开始播放时暂停其他播放器】</td></tr><tr><td>data-lrctype</td><td><code>0</code></td><td>lyric type 【歌词格式类型】</td></tr><tr><td>data-listfolded</td><td><code>false</code></td><td>indicate whether list should folded at first 【表示列表是否应首先折叠】</td></tr><tr><td>data-listmaxheight</td><td><code>340px</code></td><td>list max height 【列表最大高度】</td></tr><tr><td>data-storagename</td><td><code>metingjs</code></td><td>localStorage key that store player setting【存储播放器设置的本地存储键】</td></tr></tbody></table></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java系列（九）| Java多线程</title>
      <link href="/posts/19057.html"/>
      <url>/posts/19057.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p><strong><a href="https://blog.csdn.net/twotwo22222/article/details/128450613?spm=1001.2014.3001.5502">java 多线程及线程池原理讲解</a></strong></p><h2 id="1-线程是什么？多线程是什么？"><a href="#1-线程是什么？多线程是什么？" class="headerlink" title="1. 线程是什么？多线程是什么？"></a>1. 线程是什么？多线程是什么？</h2><p>​    <strong>线程：</strong> 是最小的调度单位，包含在进程中。<br>​    <strong>多线程：</strong> 多个线程并发执行的技术。</p><h2 id="2-守护线程和用户线程"><a href="#2-守护线程和用户线程" class="headerlink" title="2. 守护线程和用户线程"></a>2. 守护线程和用户线程</h2><p><strong>守护线程：</strong> <code>jvm</code> 给的线程。比如：<code>GC</code> 守护线程。 </p><p><strong>用户线程：</strong> 用户自己定义的线程。比如：<code>main()</code> 线程。</p><p><strong>拓展：</strong></p><ul><li><code>Thread.setDaemon(false)</code> 设置为用户线程  </li><li><code>Thread.setDaemon(true)</code> 设置为守护线程</li></ul><h2 id="3-线程的各个状态"><a href="#3-线程的各个状态" class="headerlink" title="3. 线程的各个状态"></a>3. 线程的各个状态</h2><ul><li><strong>新建 (New):</strong> 新建一个线程。</li><li><strong>就绪 (Runnable):</strong> 抢夺 <code>cpu</code> 的使用权。  </li><li><strong>运行 (Running):</strong> 开始执行任务。  </li><li><strong>阻塞 (Blocked)：</strong> 让线程等待，等待结束进入就绪队列。  </li><li><strong>死亡 (Dead)：</strong> 线程正常结束或异常结束。</li></ul><h2 id="4-线程相关的基本方法有-wait，notify，notifyAll，sleep，join，yield-等"><a href="#4-线程相关的基本方法有-wait，notify，notifyAll，sleep，join，yield-等" class="headerlink" title="4. 线程相关的基本方法有 wait，notify，notifyAll，sleep，join，yield 等"></a>4. 线程相关的基本方法有 <code>wait</code>，<code>notify</code>，<code>notifyAll</code>，<code>sleep</code>，<code>join</code>，<code>yield</code> 等</h2><ul><li><strong>wait()：</strong> 线程等待，会释放锁，用于同步代码块或同步方法中，进入等待状态  </li><li><strong>sleep()：</strong> 线程睡眠，不会释放锁，进入超时等待状态  </li><li><strong>yield()：</strong> 线程让步，会使线程让出 <code>cpu</code> 使用权，进入就绪状态  </li><li><strong>join()：</strong> 指定的线程加入到当前线程，可以将两个交替执行的线程合并为顺序执行的线程。  </li><li><strong>notify()：</strong> 随机唤醒一个在等待中的线程，进入就绪状态。  </li><li><strong><code>notifyAll</code>()：</strong> 唤醒全部在等待中的线程，进入就绪状态。</li></ul><h2 id="5-wait-和-sleep-的区别？"><a href="#5-wait-和-sleep-的区别？" class="headerlink" title="5.wait() 和 sleep() 的区别？"></a>5.wait() 和 sleep() 的区别？</h2><table><thead><tr><th>wait()</th><th>sleep()</th></tr></thead><tbody><tr><td>来自<code>Object</code></td><td>来自<code>Thread</code></td></tr><tr><td>释放锁</td><td>不会释放锁</td></tr><tr><td>不用捕获异常</td><td>需要捕获异常</td></tr><tr><td>只能用在同步方法或代码块中</td><td>任何地方</td></tr></tbody></table><h2 id="6-为什么-wait-、notify-、notifyAll-方法定义在-Object-类里面，而不是-Thread-类？"><a href="#6-为什么-wait-、notify-、notifyAll-方法定义在-Object-类里面，而不是-Thread-类？" class="headerlink" title="6. 为什么 wait()、notify()、notifyAll() 方法定义在 Object 类里面，而不是 Thread 类？"></a>6. 为什么 <code>wait()</code>、<code>notify()</code>、<code>notifyAll()</code> 方法定义在 <code>Object</code> 类里面，而不是 <code>Thread</code> 类？</h2><p>​    ① 锁可以是任何对象，如果在 <code>Thread</code> 类中，那只能是 <code>Thread</code> 类的对象才能调用上面的方法了。  </p><p>​    ② <code>java</code> 中进入<strong>临界区</strong> (同步代码块或同步方法)，线程只需要拿到锁就行，而并不关心锁被那个线程持有。  </p><p>​    ③ 上面方法是 <code>java</code> 两个线程之间的通信机制，如果不能通过类似 <code>synchronized</code> 这样的 <code>Java</code> 关键字来实现这种机制，那么 <code>Object</code> 类中就是定义它们最好的地方，以此来使任何 <code>Java</code> 对象都可以拥有实现线程通信机制的能力。</p><h2 id="7-start-和-run-的区别"><a href="#7-start-和-run-的区别" class="headerlink" title="7.start() 和 run() 的区别"></a>7.start() 和 run() 的区别</h2><p>​    <strong>start() 方法：</strong> 是<strong>启动线程</strong>，调用了之后线程会进入<strong>就绪</strong>状态，一旦拿到 <code>cpu</code> 使用权就开始执行 <strong>run()</strong> 方法, 不能重复调用 <strong>start()</strong>, 否则会报异常。<br>​    <strong>run() 方法：</strong> 就相当于一个普通的方法而已。直接调用 <strong>run()</strong> 方法就还只有一个主线程，还是会顺序执行，也可以重复调用 run() 方法。</p><h2 id="8-实现多线程的方式"><a href="#8-实现多线程的方式" class="headerlink" title="8. 实现多线程的方式"></a>8. 实现多线程的方式</h2><p>​    ①继承 Thread 类。  </p><p>​    ②实现 Runnable 接口  </p><p>​    ③实现 Callable 接口  </p><p>​    ④线程池</p><h2 id="9-Runnable-和-Callable-的区别"><a href="#9-Runnable-和-Callable-的区别" class="headerlink" title="9.Runnable 和 Callable 的区别"></a>9.Runnable 和 Callable 的区别</h2><p>​    ①<code>Runnable</code> 没有返回值，<code>Callable</code> 有返回值。  </p><p>​    ②<code>Runnable</code> 只能抛出异常，不能捕获，<code>Callable</code> 能抛出异常，也能捕获。</p><h2 id="10-线程池的好处"><a href="#10-线程池的好处" class="headerlink" title="10. 线程池的好处"></a>10. 线程池的好处</h2><p>​    ① 线程是<strong>稀缺资源</strong>，使用线程池可以减少线程的<strong>创建和销毁</strong>，每个线程都可重复使用。  </p><p>​    ② 可以根据系统的需求，调整线程池里面线程的个数，防止了因为消耗内存过多导致服务器崩溃。</p><h2 id="11-🌟线程池的七大参数"><a href="#11-🌟线程池的七大参数" class="headerlink" title="11. 🌟线程池的七大参数"></a>11. 🌟线程池的七大参数</h2><ul><li><strong><code>corePoolSize</code>：</strong> 核心线程数，创建不能被回收，可以设置被回收。  </li><li><strong><code>maximumPoolSize</code>：</strong> 最大线程数。  </li><li><strong><code>keepAliveTime</code>：</strong> 空闲线程存活时间。  </li><li><strong><code>unit</code>：</strong> 单位。  </li><li><strong><code>workQueue</code>：</strong> 等待队列。  </li><li><strong><code>threadFactory</code>：</strong> 线程工程，用于创建线程。 </li><li><strong><code>handler</code>：</strong> 拒绝策略。</li></ul><h2 id="12-线程池的执行过程"><a href="#12-线程池的执行过程" class="headerlink" title="12. 线程池的执行过程"></a>12. 线程池的执行过程</h2><p>​    ①接到任务，判断核心线程池是否满了，没满执行任务，满了放入等待队列。  </p><p>​    ②等待队列没满，存入队列，等待执行，满了去查看最大线程数。  </p><p>​    ③最大线程数没满，执行任务，满了执行拒绝策略。</p><h2 id="13-🌟四大方法"><a href="#13-🌟四大方法" class="headerlink" title="13. 🌟四大方法"></a>13. 🌟四大方法</h2><table><thead><tr><th><code>ExecutorService executor = Executors.newCachedThreadPool()</code></th><th>缓存线程池</th><th>灵活回收线程，任务过多，会 OOM</th></tr></thead><tbody><tr><td><code>ExecutorService executor = Executors.newFixedThreadPool()</code></td><td>指定线程数量的线程池</td><td>提高了线程池的效率和线程的创建的开销，等待队列可能堆积大量请求，导致 OOM</td></tr><tr><td><code>ExecutorService executor = Executors.newSingleThreadPool()</code></td><td>单线程</td><td>保证线程的有序，出现异常再次创建，速度没那么快。</td></tr><tr><td><code>ExecutorService executor = Executors.newScheduleThreadPool()</code></td><td>定长的线程池</td><td>支持定时及周期性任务执行。</td></tr></tbody></table><h2 id="14-四大拒绝策略"><a href="#14-四大拒绝策略" class="headerlink" title="14. 四大拒绝策略"></a>14. 四大拒绝策略</h2><p>​    <strong>①<code>new ThreadPoolExecutor.AbortPolicy()</code>：</strong> 添加线程池被拒绝，会抛出异常 (默认策略)。  </p><p>​    <strong>②<code>new ThreadPoolExecutor.CallerRunsPolicy()</code>：</strong> 添加线程池被拒绝，不会放弃任务，也不会抛出异常，会让调用者线程去执行这个任务 (就是不会使用线程池里的线程去执行任务，会让调用线程池的线程去执行)。  </p><p>​    <strong>③<code>new ThreadPoolExecutor.DiscardPolicy()</code>：</strong> 添加线程池被拒绝，丢掉任务，不抛异常。  </p><p>​    <strong>④<code>new ThreadPoolExecutor.DiscardOldestPolicy()</code>：</strong> 添加线程池被拒绝，会把线程池队列中等待最久的任务放弃，把拒绝任务放进去。</p><h2 id="15-shutdown-和-shutdownNow-的区别？"><a href="#15-shutdown-和-shutdownNow-的区别？" class="headerlink" title="15.shutdown 和 shutdownNow 的区别？"></a>15.shutdown 和 shutdownNow 的区别？</h2><p>​    ①<code>shutdown</code> 没有返回值，<code>shutdownNow</code> 会返回没有执行完任务的集合。  </p><p>​    ②<code>shutdown</code> 不会抛出异常，<code>shutdownNow</code> 会抛出异常。  </p><p>​    ③<code>shutdown</code> 会等待执行完线程池的任务再关闭，<code>shutdownNow</code> 会给所以线程发送<strong>中断信号</strong>，然后中断任务，关闭线程池。</p><h2 id="16-🌟什么是死锁？"><a href="#16-🌟什么是死锁？" class="headerlink" title="16. 🌟什么是死锁？"></a>16. 🌟什么是死锁？</h2><p>​    各进程互相等待对方手里的资源，导致各进程都阻塞，无法向前推进的现象。</p><h2 id="17-🌟造成死锁的四个必要条件"><a href="#17-🌟造成死锁的四个必要条件" class="headerlink" title="17. 🌟造成死锁的四个必要条件"></a>17. 🌟造成死锁的四个必要条件</h2><p><strong>互斥：</strong> 当资源被一个线程占用时，别的线程不能使用。<br><strong>不可抢占：</strong> 进程阻塞时，对占用的资源不释放。<br><strong>不剥夺：</strong> 进程获得资源未使用完，不能被强行剥夺。<br><strong>循环等待：</strong> 若干进程之间形成头尾相连的循环等待资源关系。</p><h2 id="18-线程安全主要是三方面"><a href="#18-线程安全主要是三方面" class="headerlink" title="18. 线程安全主要是三方面"></a>18. 线程安全主要是三方面</h2><p>​    <strong>原子性：</strong> 一个或多个操作，要么全部执行，要么全部不执行 (执行的过程中是不会被任何因素打断的)。  </p><p>​    <strong>可见性：</strong> 一个线程对主内存的修改可以及时的被其他线程观察到。  </p><p>​    <strong>有序性：</strong> 程序执行的顺序按照代码的先后顺序执行。</p><h3 id="保证原子性"><a href="#保证原子性" class="headerlink" title="保证原子性"></a><strong>保证原子性</strong></h3><p>使用锁 <code>synchronized</code> 和 <code>lock</code>。<br>使用 <code>CAS (compareAndSet</code>：比较并交换），<code>CAS</code> 是 <code>cpu</code> 的并发原语)。</p><h3 id="保证可见性"><a href="#保证可见性" class="headerlink" title="保证可见性"></a><strong>保证可见性</strong></h3><p>使用锁 <code>synchronized</code> 和 <code>lock</code>。<br>使用 <code>volatile</code> 关键字 。</p><h3 id="保证有序性"><a href="#保证有序性" class="headerlink" title="保证有序性"></a><strong>保证有序性</strong></h3><p>使用 <code>volatile</code> 关键字<br>使用 <code>synchronized</code> 关键字。</p><h2 id="19-volatile-和-synchronized-的区别"><a href="#19-volatile-和-synchronized-的区别" class="headerlink" title="19.volatile 和 synchronized 的区别"></a>19.<code>volatile</code> 和 <code>synchronized</code> 的区别</h2><p>​    ① <code>volatile</code> 仅能使用在<strong>变量</strong>级别的，<code>synchronized</code> 可以使用在<strong>变量、方法、类</strong>级别的  </p><p>​    ② <code>volatile</code> 不具备<strong>原子性</strong>，具备<strong>可见性</strong>，<code>synchronized</code> 有<strong>原子性和可见性</strong>。  </p><p>​    ③ <code>volatile</code> 不会造成<strong>线程阻塞</strong>，<code>synchronized</code> 会造成线程阻塞。  </p><p>​    ④ <code>volatile</code> 关键字是<strong>线程同步的轻量级</strong>实现，所以 <code>volatile</code> 性能肯定比 <code>synchronized</code> 要好。</p><h2 id="20-synchronized-和-lock-的区别"><a href="#20-synchronized-和-lock-的区别" class="headerlink" title="20.synchronized 和 lock 的区别"></a>20.synchronized 和 lock 的区别</h2><p>​    ① <code>synchronized</code> 是关键字，<code>lock</code> 是 <code>java</code> 类，默认是不公平锁（源码）。  </p><p>​    ② <code>synchronized</code> 适合<strong>少量同步代码</strong>，<code>lock</code> 适合<strong>大量同步代码</strong>。  </p><p>​    ③ <code>synchronized</code> 会<strong>自动释放锁</strong>，<code>lock</code> 必须放在 <code>finally</code> 中手工 <code>unlock</code> 释放锁，不然容易<strong>死锁</strong>。</p><h2 id="21-JMM-java-内存模型"><a href="#21-JMM-java-内存模型" class="headerlink" title="21.JMM(java 内存模型)"></a>21.JMM(java 内存模型)</h2><p>​    <strong>java</strong> 内存模型，一个抽象的概念，不是真是存在，描述的是一种<strong>规则或规范</strong>，和多线程相关的规则。需要每个 JVM 都遵循。</p><h2 id="22-JMM-的约定"><a href="#22-JMM-的约定" class="headerlink" title="22.JMM 的约定"></a>22.JMM 的约定</h2><p>​    ①线程解锁前，必须把<strong>共享变量</strong>立即刷回主存。  </p><p>​    ②线程加锁前，必须读取主存中的<strong>最新值到工作内存</strong>中。  </p><p>​    ③加锁和解锁必须是<strong>同一把锁</strong>。</p><h2 id="23-JMM-的八个命令"><a href="#23-JMM-的八个命令" class="headerlink" title="23.JMM 的八个命令"></a>23.JMM 的八个命令</h2><p>为了支持 <code>JMM</code>，定义了 8 条原子操作，用于主存和工作内存的交互。</p><ul><li><strong>lock（锁定）：</strong> 作用于主内存的变量，把一个变量标识为一条线程独占状态。  </li><li><strong>unlock（解锁）：</strong> 作用于主内存变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</li><li><strong>read（读取）：</strong> 作用于主内存变量，把一个变量值从主内存传输到线程的工作内存中，以便随后的 load 动作使用。  </li><li><strong>load（载入）：</strong> 作用于工作内存的变量，它把 read 操作从主内存中得到的变量值放入工作内存的变量副本中。</li><li><strong>use（使用）：</strong> 作用于工作内存的变量，把工作内存中的一个变量值传递给执行引擎。  </li><li><strong>assign（赋值）：</strong> 作用于工作内存的变量，它把一个从执行引擎接收到的值赋值给工作内存的变量。</li><li><strong>store（存储）：</strong> 作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以遍随后的 write 的操作。  </li><li><strong>write（写入）：</strong> 作用于主内存的变量，它把 store 操作从工作内存中的一个变量的值传送到主内存的变量中。</li></ul><h2 id="24-为什么要有-JMM，用来解决什么问题？"><a href="#24-为什么要有-JMM，用来解决什么问题？" class="headerlink" title="24. 为什么要有 JMM，用来解决什么问题？"></a>24. 为什么要有 JMM，用来解决什么问题？</h2><p>​    解决由于多线程通过共享内存进行通信时，存在的<strong>本地内存数据不一致</strong>、编译器会对代码<strong>指令重排序</strong>、处理器会对<strong>代码乱序</strong>执行等带来的问题。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java系列（八）| Java集合</title>
      <link href="/posts/19057.html"/>
      <url>/posts/19057.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="Java核心技术-集合类"><a href="#Java核心技术-集合类" class="headerlink" title="Java核心技术 集合类"></a>Java核心技术 集合类</h2><p><code>Java</code> 集合，也叫作容器，主要是由两大接口派生而来：一个是 <code>Collection</code> 接口，主要用于存放单一元素；另一个是 <code>Map</code> 接口，主要用于存放键值对。</p><h2 id="Collection-接口关系图"><a href="#Collection-接口关系图" class="headerlink" title="Collection 接口关系图"></a>Collection 接口关系图</h2><p>具体实现：<code>List</code>、<code>Queue</code>、<code>Set</code>，可以看下<code>Collection</code>关系图</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2025/01/20250107230336720.png" title="image-20250107162007452" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2025/01/20250107230336720.png" alt="image-20250107162007452"></a></p><h2 id="Map-键值对关系图"><a href="#Map-键值对关系图" class="headerlink" title="Map 键值对关系图"></a>Map 键值对关系图</h2><p>具体实现：<code>Hashtable</code>、<code>LinkedHashMap</code>、<code>TreeMap</code>，可以看下<code>Map</code> 关系图</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2025/01/20250107230342470.png" title="image-20250107162107726" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2025/01/20250107230342470.png" alt="image-20250107162107726"></a> </p><h2 id="1-List、Set、Queue、Map-区别"><a href="#1-List、Set、Queue、Map-区别" class="headerlink" title="1.List、Set、Queue、Map 区别"></a>1.List、Set、Queue、Map 区别</h2><ul><li><code>List</code>：有序列表，可重复</li><li><code>Set</code>：无序列表，不可重复</li><li><code>Queue</code>：特性的排队顺序确定先后关系，存储元素是有序的，可重复</li><li><code>Map</code>：使用键值对（key-value）存储</li></ul><h2 id="2-List、Set、Map-常用集合有哪些？"><a href="#2-List、Set、Map-常用集合有哪些？" class="headerlink" title="2.List、Set、Map 常用集合有哪些？"></a>2.List、Set、Map 常用集合有哪些？</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a><strong>List</strong></h3><ul><li><strong>vector：</strong> 底层是数组，方法加了 <code>synchronized</code> 来保证线程安全，所以效率较慢，使用 <code>ArrayList</code> 替代。  </li><li><strong>ArrayList：</strong> 线程不安全，底层是数组，因为数组都是连续的地址，所以查询比较快。增删比较慢，增会生成一个新数组，把新增的元素和原有元素放到新数组中，删除会导致元素移动，所以增删速度较慢。  </li><li><strong>LinkedList：</strong> 线程不安全，底层是链表，因为地址不是连续的，都是一个节点和一个节点相连，每次查询都得重头开始查询，所以查询慢，增删只是断裂某个节点对整体影响不大，所以增删速度较快。</li></ul><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><ul><li><strong>HashSet：</strong> 底层是哈希表 (数组 + 链表或数组 + 红黑树)，在链表长度大于 8 时转为红黑树，在红黑树节点小于 6 时转为链表。其实就是实现了 <code>HashMap</code>，值存入 <code>key，value</code> 是一个 <code>final</code> 修饰的对象。  </li><li><strong>TreeSet：</strong> 底层是红黑树结构，就是 <strong>TreeMap</strong> 实现，可以实现有序的集合。<strong>String</strong> 和 <strong>Integer</strong> 可以根据值进行排序。如果是对象需要实现 Comparator 接口，重写 compareTo() 方法制定比较规则。  </li><li><strong>LinkedHashSet：</strong> 实现了 <strong>HashSet</strong>，多一条链表来记录位置，所以是有序的。</li></ul><h3 id="Map-lt-key-value-gt-双例结构"><a href="#Map-lt-key-value-gt-双例结构" class="headerlink" title="Map&lt;key,value&gt; 双例结构"></a><strong>Map&lt;key,value&gt; 双例结构</strong></h3><ul><li><strong>TreeMap：</strong> 底层是红黑树，key 可以按顺序排列。  </li><li><strong>HashMap：</strong> 底层是哈希表，可以很快的储存和检索，无序，大量迭代情况不佳。  </li><li><strong>LinkedHashMap：</strong> 底层是哈希表 + 链表，有序，大量迭代情况佳。</li></ul><h2 id="3-ArrayList-的初始容量是多少？扩容机制是什么？扩容过程是怎样？"><a href="#3-ArrayList-的初始容量是多少？扩容机制是什么？扩容过程是怎样？" class="headerlink" title="3.ArrayList 的初始容量是多少？扩容机制是什么？扩容过程是怎样？"></a>3.ArrayList 的初始容量是多少？扩容机制是什么？扩容过程是怎样？</h2><ul><li><p><strong>初始容量：</strong> 默认 10，也可以通过构造方法传入大小。</p></li><li><p><strong>扩容机制：</strong> 原数组长度 + 原数组长度 / 2 (源码中是原数组右移一位，也就相当于除以 2)<br>注意：扩容后的 <strong>ArrayList</strong> 底层数组<strong>不是原来的数组</strong>。</p></li><li><p><strong>扩容过程：</strong> 因为 <strong>ArrayList</strong> 底层是数组，所以它的扩容机制和数组一样，首先新建一个新数组，长度是原数组的 <strong>1.5</strong> 倍，然后调用 <strong>Arrays.copyof()</strong> 复制原数组的值，然后赋值给新数组。</p></li></ul><h2 id="4-什么是哈希表"><a href="#4-什么是哈希表" class="headerlink" title="4. 什么是哈希表"></a>4. 什么是哈希表</h2><p>​    根据关键码值 (<strong>Key value</strong>) 而直接进行访问的数据结构，在一个表中，通过 **H(key)<strong>计算出 <strong>key</strong> 在表中的位置，</strong>H(key)**就是哈希函数，表就是哈希表。</p><h2 id="5-什么是哈希冲突"><a href="#5-什么是哈希冲突" class="headerlink" title="5. 什么是哈希冲突"></a>5. 什么是哈希冲突</h2><p>​    不同的 <strong>key</strong> 通过哈希函数计算出<strong>相同的储存地址</strong>，这就是哈希冲突。</p><h2 id="6-解决哈希冲突"><a href="#6-解决哈希冲突" class="headerlink" title="6. 解决哈希冲突"></a>6. 解决哈希冲突</h2><ul><li>开放地址法：如果发生哈希冲突，就会以当前地址为基准，再去寻找计算另一个位置，直到不发生哈希冲突。 寻找的方法有：</li></ul><ol><li> 线性探测 1，2，3，m  </li><li> 二次探测 1 的平方，-1 的平方，2 的平方，-2 的平方，k 的平方，-k 的平方，k&lt;=m/2  </li><li> 随机探测 生成一个随机数，然后从随机地址 + 随机数 ++。</li></ol><ul><li><p><strong>链地址法</strong> ：冲突的哈希值，连到到同一个链表上。</p></li><li><p><strong>再哈希法 (再散列方法)</strong>  ：多个哈希函数，发生冲突，就在用另一个算计，直到没有冲突。</p></li><li><p><strong>建立公共溢出区</strong> ：哈希表分成基本表和溢出表，与基本表发生冲突的都填入溢出表。</p></li></ul><h2 id="7-HashMap-的-hash-算法，为什么不是-h-key-hashcode-而是-key-hashcode-h-gt-gt-gt-16"><a href="#7-HashMap-的-hash-算法，为什么不是-h-key-hashcode-而是-key-hashcode-h-gt-gt-gt-16" class="headerlink" title="7.HashMap 的 hash() 算法，为什么不是 h=key.hashcode(), 而是 key.hashcode()^ (h&gt;&gt;&gt;16)"></a>7.HashMap 的 hash() 算法，为什么不是 h=key.hashcode(), 而是 key.hashcode()^ (h&gt;&gt;&gt;16)</h2><p>​    得到哈希值然后右移 16 位，然后进行异或运算，这样使哈希值的低 16 位也具有了一部分高 16 位的特性，增加更多的变化性，减少了哈希冲突。</p><h2 id="8-为什么-HashMap-的初始容量和扩容都是-2-的次幂"><a href="#8-为什么-HashMap-的初始容量和扩容都是-2-的次幂" class="headerlink" title="8. 为什么 HashMap 的初始容量和扩容都是 2 的次幂"></a>8. 为什么 HashMap 的初始容量和扩容都是 2 的次幂</h2><p>​    因为计算元素存储的下标是 (n-1)&amp; 哈希值，数组初始容量 -1，得到的二进制都是 1，这样可以减少哈希冲突，可以更好的均匀插入。</p><h2 id="9-HashMap-如果指定了不是-2-的次幂的容量会发生什么？"><a href="#9-HashMap-如果指定了不是-2-的次幂的容量会发生什么？" class="headerlink" title="9.HashMap 如果指定了不是 2 的次幂的容量会发生什么？"></a>9.HashMap 如果指定了不是 2 的次幂的容量会发生什么？</h2><p>​    会获得一个大于指定的初始值的最接近 2 的次幂的值作为初始容量。</p><h2 id="10-HashMap-为什么线程不安全"><a href="#10-HashMap-为什么线程不安全" class="headerlink" title="10.HashMap 为什么线程不安全"></a>10.HashMap 为什么线程不安全</h2><ul><li> <strong>jdk1.7</strong> 中因为使用<strong>头插法</strong>，再扩容的时候，可能会造成<strong>闭环和数据丢失</strong>。 </li><li><strong>jdk1.8</strong> 中使用<strong>尾插法</strong>，不会出现闭环和数据丢失，但是在多线程下，会<strong>发生数据覆盖</strong>。<ul><li><strong>put</strong> 操作中，在 <strong>putVal</strong> 函数里，<strong>值的覆盖还有长度的覆盖</strong>。</li></ul></li></ul><h2 id="11-解决-Hashmap-的线程安全问题"><a href="#11-解决-Hashmap-的线程安全问题" class="headerlink" title="11. 解决 Hashmap 的线程安全问题"></a>11. 解决 Hashmap 的线程安全问题</h2><p>​    (1) 使用 <code>Hashtable</code> 解决，在方法加同步关键字，所以<strong>效率低下</strong>，已经被弃用。<br>​    (2) 使用 <code>Collections.synchronizedMap(new HashMap&lt;&gt;()),</code> 不常用。<br>​    (3)<code>ConcurrentHashMap</code>(常用)</p><h2 id="12-ConcurrentHashMap-的原理"><a href="#12-ConcurrentHashMap-的原理" class="headerlink" title="12.ConcurrentHashMap 的原理"></a>12.ConcurrentHashMap 的原理</h2><ul><li><strong>jdk1.7：</strong> 采用<strong>分段锁</strong>，是由 <code>Segment</code>(继承 <code>ReentrantLock</code>：可重入锁，默认是 16，并发度是 16) 和 <code>HashEntry</code> 内部类组成，每一个 <code>Segment</code>(锁) 对应 1 个 <code>HashEntry(key，value)</code> 数组，数组之间互不影响，实现了并发访问。  </li><li><strong>jdk1.8：</strong> 抛弃分段锁，采用 <strong>CAS(乐观锁)+synchronized</strong> 实现更加<strong>细粒度的锁</strong>，【<strong>Node 数组 + 链表 + 红黑树</strong>】结构。只要锁住链表的<strong>头节点</strong> (树的根节点)，就不会影响其他数组的读写，提高了并发度。</li></ul><h2 id="13-为什么用-synchronized-代替-ReentrantLock"><a href="#13-为什么用-synchronized-代替-ReentrantLock" class="headerlink" title="13. 为什么用 synchronized 代替 ReentrantLock"></a>13. 为什么用 synchronized 代替 ReentrantLock</h2><p>​    ①节省内存开销。<code>ReentrantLock</code> 基于 <code>AQS</code> 来获得同步支持，但不是每个节点都需要同步支持，只有<strong>链表头节点</strong>或<strong>树的根节点</strong>需要同步，所以使用 <code>ReentrantLock</code> 会带来很大的<strong>内存开销</strong>。<br>​    ②获得 <code>jvm</code> 支持，可重入锁只是 <code>api</code> 级别，而 <code>synchronized</code> 是 <code>jvm</code> 直接支持的，能够在 <code>jvm</code> 运行时做出相应的优化。<br>​    ③在 <code>jdk1.6</code> 之后，对 <code>synchronized</code> 做了大量的优化，而且有<strong>多种锁状态</strong>，会从 【<strong>无锁 -&gt; 偏向锁 -&gt; 轻量级锁 -&gt; 重量级锁</strong>】一步步转换。</p><p>​    <strong>AQS (Abstract Queued Synchronizer)：</strong> 一个<strong>抽象的队列同步器</strong>，通过维护一个共享资源状态（ <strong>Volatile Int State</strong> ）和一个先进先出（ <strong>FIFO</strong> ）的线程等待队列来实现一个多线程访问共享资源的<strong>同步框架</strong>。</p><h2 id="14-HashMap-为什么使用链表"><a href="#14-HashMap-为什么使用链表" class="headerlink" title="14.HashMap 为什么使用链表"></a>14.HashMap 为什么使用链表</h2><p>​    减少和解决哈希冲突，把冲突的值放在同一链表下。</p><h2 id="15-HashMap-为什么使用红黑树"><a href="#15-HashMap-为什么使用红黑树" class="headerlink" title="15.HashMap 为什么使用红黑树"></a>15.HashMap 为什么使用红黑树</h2><p>​    当数据过多，链表遍历较慢，所以引入红黑树。</p><h2 id="16-HashMap-为什么不一上来就使用红黑树"><a href="#16-HashMap-为什么不一上来就使用红黑树" class="headerlink" title="16.HashMap 为什么不一上来就使用红黑树"></a>16.HashMap 为什么不一上来就使用红黑树</h2><p>​    维护成本较大，红黑树在插入新的数据后，可能会进行【<strong>变色、左旋、右旋</strong>】来保持平衡，所以当数据少时，就不需要红黑树。</p><h2 id="17-说说你对红黑树的理解-❕❕需要扩展"><a href="#17-说说你对红黑树的理解-❕❕需要扩展" class="headerlink" title="17. 说说你对红黑树的理解(❕❕需要扩展)"></a>17. 说说你对红黑树的理解(❕❕需要扩展)</h2><p>​    ①根节点是黑色。</p><p>​    ②节点是黑色或红色。</p><p>​    ③叶子节点是黑色。</p><p>​    ④红色节点的子节点都是黑色。 </p><p>​    ⑤从任意节点到其子节点的所有路径都包含相同数目的黑色节点。 </p><p><strong>红黑树从根到叶子节点的最长路径不会超过最短路径的 2 倍。保证了红黑树的高效。</strong></p><h2 id="18-为什么链表长度大于-8，并且表的长度大于-64-的时候，链表会转换成红黑树？"><a href="#18-为什么链表长度大于-8，并且表的长度大于-64-的时候，链表会转换成红黑树？" class="headerlink" title="18. 为什么链表长度大于 8，并且表的长度大于 64 的时候，链表会转换成红黑树？"></a>18. 为什么链表长度大于 8，并且表的长度大于 64 的时候，链表会转换成红黑树？</h2><p>​    因为链表长度越长，哈希冲突概率就越小，当链表等于 8 时，哈希冲突就非常低了，是千万分之一，我们的 <code>map</code> 也不会存那么多数据，如果真要存那么多数据，那就转为红黑树，提高<strong>查询和插入</strong>的效率。</p><h2 id="19-为什么转成红黑树是-8-呢？而重新转为链表阈值是-6-呢？"><a href="#19-为什么转成红黑树是-8-呢？而重新转为链表阈值是-6-呢？" class="headerlink" title="19. 为什么转成红黑树是 8 呢？而重新转为链表阈值是 6 呢？"></a>19. 为什么转成红黑树是 8 呢？而重新转为链表阈值是 6 呢？</h2><p>​    因为如果都是 8 的话，那么会<strong>频繁转换，会浪费资源</strong>。</p><h2 id="20-为什么负载因子是-0-75？-冲突和利用率"><a href="#20-为什么负载因子是-0-75？-冲突和利用率" class="headerlink" title="20. 为什么负载因子是 0.75？(冲突和利用率)"></a>20. 为什么负载因子是 0.75？(冲突和利用率)</h2><p>​    加载因子越大，<strong>填满的元素越多</strong>，<strong>空间利用率越高</strong>，但发生冲突的机会变大了； </p><p>​    加载因子越小，填满的元素越少，<strong>冲突发生的机会减小</strong>，但<strong>空间浪费</strong>了更多了，而且还会提高扩容 <strong>rehash</strong> 操作的次数。  </p><p>​    “冲突的机会”与 “空间利用率” 之间，寻找一种平衡与折中。 </p><p>​    又因为根据<strong>泊松分布</strong>，当负载因子是 0.75 时，平均值是 0.5，带入可得，当链表为 8 时，哈希冲突发生概率就很低了。</p><h2 id="21-什么时候会扩容？"><a href="#21-什么时候会扩容？" class="headerlink" title="21. 什么时候会扩容？"></a>21. 什么时候会扩容？</h2><p>​    元素个数 &gt; 数组长度 * 负载因子 例如 16 * 0.75 = 12, 当元素超过 12 个时就会扩容。<br>​    链表长度大于 8 并且表长小于 64，也会扩容</p><h2 id="22-为什么不是满了扩容？"><a href="#22-为什么不是满了扩容？" class="headerlink" title="22. 为什么不是满了扩容？"></a>22. 为什么不是满了扩容？</h2><p>​    因为元素越多，空间利用率是高了，但是发生哈希<strong>冲突</strong>的几率也<strong>增加</strong>了。</p><h2 id="23-扩容过程"><a href="#23-扩容过程" class="headerlink" title="23. 扩容过程"></a>23. 扩容过程</h2><ul><li><strong>jdk1.7：</strong> 会生成一个新 <code>table</code>，重新计算每个节点放进新 <code>table</code>，因为是<strong>头插法</strong>，在线程不安全的时候，可能会<strong>出现闭环和数据丢失</strong>。  </li><li><strong>jdk1.8：</strong> 会生成一个新 <code>table</code>，新位置只需要看 <code>(e.hash &amp; oldCap)</code> 结果是 0 还是 1；0 就放在旧下标，1 就是旧下标 + 旧数组长度。避免了对每个节点进行 hash 计算，大大提高了效率。<strong>e.hash</strong> 是数组的 <strong>hash</strong> 值，，<strong>oldCap</strong> 是旧数组的长度。</li></ul><h2 id="24-HashMap-和-Hashtable-的区别"><a href="#24-HashMap-和-Hashtable-的区别" class="headerlink" title="24.HashMap 和 Hashtable 的区别"></a>24.HashMap 和 Hashtable 的区别</h2><table><thead><tr><th>HashTable</th><th>HashMap</th></tr></thead><tbody><tr><td>Key Value 不能 null</td><td>Key Value 可为 null</td></tr><tr><td>线程安全</td><td>线程不安全</td></tr></tbody></table><h2 id="25-集合为什么要用迭代器-Iterator"><a href="#25-集合为什么要用迭代器-Iterator" class="headerlink" title="25. 集合为什么要用迭代器 (Iterator)"></a>25. 集合为什么要用迭代器 (Iterator)</h2><p>​    更加安全，因为它可以确保，在当前遍历的集合元素被更改的时候，就会抛出 <code>ConcurrentModificationException</code> 异常。<br>如果不用迭代器，只能 for 循环，还必须知道集合的数据结构，复用性不强。</p><h2 id="参考自："><a href="#参考自：" class="headerlink" title="参考自："></a>参考自：</h2><p><strong><a href="https://blog.csdn.net/twotwo22222/article/details/128424569?spm=1001.2014.3001.5502">java 集合框架详解</a></strong></p><p><strong><a href="https://blog.csdn.net/twotwo22222/article/details/128426417?spm=1001.2014.3001.5502">HashMap 底层原理详解</a></strong></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Java 核心技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络系列（一）| TCP 快速入门</title>
      <link href="/posts/14054.html"/>
      <url>/posts/14054.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>互联网有一整套协议构成，TCP是其中的一层</p><p><a href="https://s2.loli.net/2024/12/20/XqyWG5sZdevSAVf.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/XqyWG5sZdevSAVf.png"></a> </p><h3 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h3><ul><li>作用：电子信号如何组成数据包（packet），解决了<code>子网内部点对点通信</code></li><li>缺点：<code>无法连接多个局域网</code>，IP协议解决</li></ul><h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><ul><li>作用：定义一套自己的地址规则，通过<code>路由</code>的形式将各个局域网相连。路由器基于IP协议</li><li>路由器内部有一张路由表，规定 IP 出口，实现数据包转发</li><li>缺点：<code>是地址协议，不能保证数据完整</code>，TCP 协议解决</li></ul><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><ul><li>作用： 保证数据通信的完整性和可靠性，防止丢包</li></ul><h2 id="TCP-数据包"><a href="#TCP-数据包" class="headerlink" title="TCP 数据包"></a>TCP 数据包</h2><p>以太网的数据包 大小固定，最初1518 增加到 1522 字节 。其中头信息（head）22 字节，负载（<code>payload</code>）：1500字节</p><p><a href="https://s2.loli.net/2024/12/20/6LlB7hW5z2ecNQa.png" title="数据包" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/6LlB7hW5z2ecNQa.png" alt="数据包"></a></p><p>以太网数据包：1522 字节</p><ul><li>头信息：22</li><li>负载：1500<ul><li>IP数据包<ul><li>头信息：20（最少）</li><li>负载：1480<ul><li>TCP 数据包<ul><li>头信息：20 （最少）</li><li>负载：1400</li></ul></li></ul></li></ul></li></ul></li></ul><p><a href="https://s2.loli.net/2024/12/20/ADXmMy1SJqC4wbe.png" title="数据包" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/ADXmMy1SJqC4wbe.png" alt="数据包"></a></p><h2 id="TCP-数据包编号（SEQ）"><a href="#TCP-数据包编号（SEQ）" class="headerlink" title="TCP 数据包编号（SEQ）"></a>TCP 数据包编号（SEQ）</h2><p><code>TCP</code> 为每个数据包编号<code>（sequence number）</code>，目的是为了接收方按照顺序还原。另外，万一丢包也可知道丢失哪一个包。</p><p>每个数据包都有两个编号</p><ul><li>自身编号：<code>sequence number</code></li><li>下一个包编号：<code>next sequence number</code></li></ul><p>如下图表示：当前包的负载大小为 <code>46183-45943 = 240</code> 字节</p><p><a href="https://s2.loli.net/2024/12/20/F7QTwmoiWqH3ZRP.png" title="编号 SEQ" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/F7QTwmoiWqH3ZRP.png" alt="编号 SEQ"></a></p><h2 id="TCP-数据包组装"><a href="#TCP-数据包组装" class="headerlink" title="TCP 数据包组装"></a>TCP 数据包组装</h2><p><code>操作系统</code>持续接收 <code>TCP</code> 数据包，按照顺序<code>组装</code>好。一旦组装完成后，根据数据包中的<code>端口（port）参数</code>，交给监听该端口的应用程序处理。应用程序收到组装好的原始数据，会根据 <code>HTTP</code> 协议中的 <code>Content-Length</code> 字段开始一段段读取数据。其中应用程序需要的数据放在 <code>TCP</code> 数据包中， <code>TCP</code> 原始文件的大小由应用层的协议来规定。</p><p><a href="https://s2.loli.net/2024/12/20/1TAQdlP7HCrZzYk.png" title="监听端口" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/1TAQdlP7HCrZzYk.png" alt="监听端口"></a></p><h2 id="慢启动和ACK"><a href="#慢启动和ACK" class="headerlink" title="慢启动和ACK"></a>慢启动和ACK</h2><blockquote><p>原因：服务器可能由于带宽小、路由器过热、缓存溢出等情况，导致丢包，因此服务器发包的速度不是越快越好。</p><p>作用：服务器为了达到线路的最高速率，获知对方线路的理想速率，使用慢启动。</p></blockquote><p><code>Linux</code> 内核设计一个 <code>TCP_INIT_CWND</code> 刚开始通信的时候，会一次性发送10个数据包，然后停下来，等待接收方确认，再继续发送。</p><p>接收方每收到两个数据包，就要发送一个确认消息（<code>acknowledgement</code>，<code>ACK</code>）</p><p><code>ACK</code>两个信息：</p><ul><li><code>ACK NUM</code>：<code>期待要收到下一个数据包的编号</code></li><li><code>WINDOW</code>：<code>接收方的接收窗口的剩余容量</code></li></ul><p>发送方有了这两个信息，再加上自己已经发出的<code>数据包的最新编号</code>，就会推测出接收方<code>大概的接收速度</code>，从而降低或增加发送速率。 这被称为”发送窗口”，这个窗口的大小是可变的。</p><p><a href="https://s2.loli.net/2024/12/20/zhiG9MOQaL2461o.png" title="ACK" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/zhiG9MOQaL2461o.png" alt="ACK"></a></p><h2 id="数据包丢失处理"><a href="#数据包丢失处理" class="headerlink" title="数据包丢失处理"></a>数据包丢失处理</h2><p>​    每个数据包都是带有下一个数据包的编号，如果下一个数据包没有收到，那么 <code>ACK 的编号就不会改变</code>。</p><p>​    如果发送方收到三个连续的重复ACK 或者 超时了还没有收到任何<code>ACK</code>，就会确认丢包，通过这个机制，保证了包不丢失。</p><p>​    举例来说，现在收到了4号包，但是没有收到5号包。<code>ACK</code> 就会记录，期待收到5号包。过了一段时间，5号包收到了，那么下一轮 <code>ACK</code> 会更新编号。如果5号包还是没收到，但是收到了6号包或7号包，那么 <code>ACK</code> 里面的编号不会变化，总是显示5号包。这会导致大 量重复内容的 <code>ACK</code>。</p><p><a href="https://s2.loli.net/2024/12/20/w6k24BK9bj1QzHX.png" title="三次重复ACK的重发机制" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/w6k24BK9bj1QzHX.png" alt="三次重复ACK的重发机制"></a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.ruanyifeng.com/blog/2017/06/tcp-protocol.html">TCP 协议简介 - 阮一峰的网络日志 (ruanyifeng.com)</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒商城（三）| 前端基础</title>
      <link href="/posts/31297.html"/>
      <url>/posts/31297.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="前端基础"><a href="#前端基础" class="headerlink" title="前端基础"></a>前端基础</h1><h2 id="前后端对比"><a href="#前后端对比" class="headerlink" title="前后端对比"></a>前后端对比</h2><p><a href="https://s2.loli.net/2024/12/20/jEKNqZz3WMwuG4y.png" title="在这里插入图片描述" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/jEKNqZz3WMwuG4y.png" alt="在这里插入图片描述"></a> </p><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><blockquote><p>ECMAScript 6.0（以下简称 ES6，ECMAScript是一种由<code>Ecma</code>国际通过ECMA-262标准化的脚本）， 是JavaScript语言的下一代标准，2015年6月正式发布，从ES6开始的版本号采用年号，如ES2015，就是ES6。ES2016就是ES7。 ECMAScript是规范，JS的规范的具体实现。</p></blockquote><h3 id="let-amp-const"><a href="#let-amp-const" class="headerlink" title="let &amp; const"></a>let &amp; const</h3><ul><li>作用域：var在{}之外也起作用 let在{}之外不起作用 </li><li>声明次数：var 多次声明同一变量不会报错，let多次声明会报错，只能声明一次。</li><li>变量提升：var 会变量提升（打印和定义可以顺序反）；let 不存在变量提升（顺序不能反） </li><li>const 声明之后不允许改变</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">       <span class="token comment">// var 声明的变量往往会越域</span>       <span class="token comment">// let 声明的变量有严格局部作用域</span><span class="token comment">//         &#123;</span><span class="token comment">//             var a = 1;</span><span class="token comment">//             let b = 2;</span><span class="token comment">//         &#125;</span><span class="token comment">//         console.log(a);  // 1</span><span class="token comment">//         console.log(b);  // ReferenceError: b is not defined</span>    <span class="token comment">// var 可以声明多次</span>            <span class="token comment">// let 只能声明一次</span><span class="token comment">//         var m = 1</span><span class="token comment">//         var m = 2</span><span class="token comment">//         let n = 3</span><span class="token comment">//       let n = 4</span><span class="token comment">//         console.log(m)  // 2</span><span class="token comment">//         console.log(n)  // Identifier 'n' has already been declared</span>        <span class="token comment">// var 会变量提升</span>        <span class="token comment">// let 不存在变量提升</span><span class="token comment">//         console.log(x);  // undefined</span><span class="token comment">//         var x = 10;</span><span class="token comment">//         console.log(y);   //ReferenceError: y is not defined</span><span class="token comment">//         let y = 20;</span>        <span class="token comment">// const</span>        <span class="token comment">// 1. const声明之后不允许改变</span>        <span class="token comment">// 2. 一但声明必须初始化，否则会报错</span>        <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//Uncaught TypeError: Assignment to constant variable.</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解构表达式"><a href="#解构表达式" class="headerlink" title="解构表达式"></a>解构表达式</h3><ul><li>数组解构：支持 <code>let arr = [1,2,3]; let [a,b,c] = arr</code></li><li>冒号改名：<code>const &#123; name: abc, age, language &#125; = person</code></li><li>字符串函数：支持一个字符串为多行 占位符功能 ${}</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">//数组解构</span>        <span class="token comment">// let arr = [1,2,3];</span>        <span class="token comment">// // let a = arr[0];</span>        <span class="token comment">// // let b = arr[1];</span>        <span class="token comment">// // let c = arr[2];</span>        <span class="token comment">// let [a,b,c] = arr;</span>        <span class="token comment">// console.log(a,b,c)</span>        <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"jack"</span><span class="token punctuation">,</span>            <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>            <span class="token literal-property property">language</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'js'</span><span class="token punctuation">,</span> <span class="token string">'css'</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//         const name = person.name;</span>        <span class="token comment">//         const age = person.age;</span>        <span class="token comment">//         const language = person.language;</span>        <span class="token comment">//对象解构</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> abc<span class="token punctuation">,</span> age<span class="token punctuation">,</span> language <span class="token punctuation">&#125;</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>abc<span class="token punctuation">,</span> age<span class="token punctuation">,</span> language<span class="token punctuation">)</span>        <span class="token comment">// 字符串扩展</span>        <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"hello.vue"</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".vue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        <span class="token comment">//字符串模板</span>        <span class="token keyword">let</span> ss <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>                    &lt;span>hello world&lt;span>                &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 字符串插入变量和表达式。变量名写在 $&#123;&#125; 中，$&#123;&#125; 中可以放入 JavaScript 表达式。</span>        <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"这是一个函数"</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>abc<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">，今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age <span class="token operator">+</span> <span class="token number">10</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">了, 我想说： </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数优化"><a href="#函数优化" class="headerlink" title="函数优化"></a>函数优化</h3><ul><li>函数默认值： <code>b = b || 1;</code> 现在可以直接写了<code>function add2(a, b = 1)</code> </li><li>不定参数：<code>function fun(...values) &#123;</code></li><li>支持箭头函数（<code>lambda</code>表达式），还支持使用{}结构传入对象的成员</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">//在ES6以前，我们无法给一个函数参数设置默认值，只能采用变通写法：</span>        <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 判断b是否为空，为空就给默认值1</span>            b <span class="token operator">=</span> b <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 传一个参数</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//现在可以这么写：直接给参数写上默认值，没传就会自动使用默认值</span>        <span class="token keyword">function</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//不定参数</span>        <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>values</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>      <span class="token comment">//2</span>        <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment">//4</span>        <span class="token comment">//箭头函数</span>        <span class="token comment">//以前声明一个方法</span>        <span class="token comment">// var print = function (obj) &#123;</span>        <span class="token comment">//     console.log(obj);</span>        <span class="token comment">// &#125;</span>        <span class="token keyword">var</span> <span class="token function-variable function">print</span> <span class="token operator">=</span> <span class="token parameter">obj</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> c<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> <span class="token function-variable function">sum2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum2</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> <span class="token function-variable function">sum3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> c<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum3</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"jack"</span><span class="token punctuation">,</span>            <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>            <span class="token literal-property property">language</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'js'</span><span class="token punctuation">,</span> <span class="token string">'css'</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token parameter">person</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello,"</span> <span class="token operator">+</span> person<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//箭头函数+解构</span>        <span class="token keyword">var</span> <span class="token function-variable function">hello2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello,"</span> <span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">hello2</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对象优化"><a href="#对象优化" class="headerlink" title="对象优化"></a>对象优化</h3><ul><li><code>map</code>：获取<code>map</code>的键值对等<code>Object.keys()、values、entries</code></li><li>对象合并：<code>Object.assign(target,source1,source2)</code></li><li>声明简写：<code>const person2 = &#123; age, name &#125;</code></li><li>对象拷贝：<code>let someone = &#123; …p1 &#125;</code></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"jack"</span><span class="token punctuation">,</span>            <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>            <span class="token literal-property property">language</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'js'</span><span class="token punctuation">,</span> <span class="token string">'css'</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//["name", "age", "language"]</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//["jack", 21, Array(3)]</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[Array(2), Array(2), Array(2)]</span>        <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> source1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> source2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//&#123;a:1,b:2,c:3&#125;</span>        Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source1<span class="token punctuation">,</span> source2<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//["name", "age", "language"]</span>        <span class="token comment">// 声明对象简写</span>        <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">23</span>        <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"张三"</span>        <span class="token keyword">const</span> person1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">age</span><span class="token operator">:</span> age<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> name <span class="token punctuation">&#125;</span>        <span class="token keyword">const</span> person2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> age<span class="token punctuation">,</span> name <span class="token punctuation">&#125;</span><span class="token comment">//声明对象简写</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 对象的函数属性简写</span>        <span class="token keyword">let</span> person3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"jack"</span><span class="token punctuation">,</span>            <span class="token comment">// 以前：</span>            <span class="token function-variable function">eat</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">food</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"在吃"</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">//箭头函数this不能使用，对象.属性</span>            <span class="token function-variable function">eat2</span><span class="token operator">:</span> <span class="token parameter">food</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person3<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"在吃"</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">eat3</span><span class="token punctuation">(</span><span class="token parameter">food</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"在吃"</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        person3<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"香蕉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person3<span class="token punctuation">.</span><span class="token function">eat2</span><span class="token punctuation">(</span><span class="token string">"苹果"</span><span class="token punctuation">)</span>        person3<span class="token punctuation">.</span><span class="token function">eat3</span><span class="token punctuation">(</span><span class="token string">"橘子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 对象拓展运算符</span>        <span class="token comment">//  拷贝对象（深拷贝）</span>        <span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Amy"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> someone <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>p1 <span class="token punctuation">&#125;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someone<span class="token punctuation">)</span>  <span class="token comment">//&#123;name: "Amy", age: 15&#125;</span>        <span class="token comment">//  合并对象</span>        <span class="token keyword">let</span> age1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> name1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Amy"</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">&#125;</span>        p2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>age1<span class="token punctuation">,</span> <span class="token operator">...</span>name1 <span class="token punctuation">&#125;</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="map和reduce"><a href="#map和reduce" class="headerlink" title="map和reduce"></a>map和reduce</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">//数组中新增了map和reduce方法。</span>        <span class="token comment">//map()：接收一个函数，将原数组中的所有元素用这个函数处理后放入新数组返回。</span>         <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'20'</span><span class="token punctuation">,</span> <span class="token string">'-5'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                 <span class="token comment">//  arr = arr.map((item)=>&#123;</span>        <span class="token comment">//     return item*2</span>        <span class="token comment">//  &#125;);</span>         arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span> item<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//reduce() 为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素，</span>        <span class="token comment">//[2, 40, -10, 6]</span>        <span class="token comment">//arr.reduce(callback,[initialValue])</span>        <span class="token comment">/**     1、previousValue （上一次调用回调返回的值，或者是提供的初始值（initialValue））    2、currentValue （数组中当前被处理的元素）    3、index （当前元素在数组中的索引）    4、array （调用 reduce 的数组）*/</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"上一次处理后："</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"当前正在处理："</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><ul><li>封装：赋值给 <code>let p</code> 在<code>Ajax</code>中成功使用 <code>resolve(data)</code>，交给then处理， 失败使用<code>reject(err)</code>，交给<code>catch</code>处理<code>p.then().catch()</code></li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">//corse_score_10.json 得分</span><span class="token punctuation">&#123;</span>    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    <span class="token property">"score"</span><span class="token operator">:</span> <span class="token number">90</span><span class="token punctuation">&#125;</span><span class="token comment">//user.json 用户</span><span class="token punctuation">&#123;</span>    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span>    <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"123456"</span><span class="token punctuation">&#125;</span><span class="token comment">//user_corse_1.json 课程</span><span class="token punctuation">&#123;</span>    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"chinese"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">//1、查出当前用户信息</span>        <span class="token comment">//2、按照当前用户的id查出他的课程</span>        <span class="token comment">//3、按照当前课程id查出分数</span>        <span class="token comment">// $.ajax(&#123;</span>        <span class="token comment">//     url: "mock/user.json",</span>        <span class="token comment">//     success(data) &#123;</span>        <span class="token comment">//         console.log("查询用户：", data);</span>        <span class="token comment">//         $.ajax(&#123;</span>        <span class="token comment">//             url: `mock/user_corse_$&#123;data.id&#125;.json`,</span>        <span class="token comment">//             success(data) &#123;</span>        <span class="token comment">//                 console.log("查询到课程：", data);</span>        <span class="token comment">//                 $.ajax(&#123;</span>        <span class="token comment">//                     url: `mock/corse_score_$&#123;data.id&#125;.json`,</span>        <span class="token comment">//                     success(data) &#123;</span>        <span class="token comment">//                         console.log("查询到分数：", data);</span>        <span class="token comment">//                     &#125;,</span>        <span class="token comment">//                     error(error) &#123;</span>        <span class="token comment">//                         console.log("出现异常了：" + error);</span>        <span class="token comment">//                     &#125;</span>        <span class="token comment">//                 &#125;);</span>        <span class="token comment">//             &#125;,</span>        <span class="token comment">//             error(error) &#123;</span>        <span class="token comment">//                 console.log("出现异常了：" + error);</span>        <span class="token comment">//             &#125;</span>        <span class="token comment">//         &#125;);</span>        <span class="token comment">//     &#125;,</span>        <span class="token comment">//     error(error) &#123;</span>        <span class="token comment">//         console.log("出现异常了：" + error);</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">// &#125;);</span>        <span class="token comment">//1、Promise可以封装异步操作</span>        <span class="token comment">// let p = new Promise((resolve, reject) => &#123; //传入成功解析，失败拒绝</span>        <span class="token comment">//     //1、异步操作</span>        <span class="token comment">//     $.ajax(&#123;</span>        <span class="token comment">//         url: "mock/user.json",</span>        <span class="token comment">//         success: function (data) &#123;</span>        <span class="token comment">//             console.log("查询用户成功:", data)</span>        <span class="token comment">//             resolve(data);</span>        <span class="token comment">//         &#125;,</span>        <span class="token comment">//         error: function (err) &#123;</span>        <span class="token comment">//             reject(err);</span>        <span class="token comment">//         &#125;</span>        <span class="token comment">//     &#125;);</span>        <span class="token comment">// &#125;);</span>        <span class="token comment">// p.then((obj) => &#123; //成功以后做什么</span>        <span class="token comment">//     return new Promise((resolve, reject) => &#123;</span>        <span class="token comment">//         $.ajax(&#123;</span>        <span class="token comment">//             url: `mock/user_corse_$&#123;obj.id&#125;.json`,</span>        <span class="token comment">//             success: function (data) &#123;</span>        <span class="token comment">//                 console.log("查询用户课程成功:", data)</span>        <span class="token comment">//                 resolve(data);</span>        <span class="token comment">//             &#125;,</span>        <span class="token comment">//             error: function (err) &#123;</span>        <span class="token comment">//                 reject(err)</span>        <span class="token comment">//             &#125;</span>        <span class="token comment">//         &#125;);</span>        <span class="token comment">//     &#125;)</span>        <span class="token comment">// &#125;).then((data) => &#123; //成功以后干什么</span>        <span class="token comment">//     console.log("上一步的结果", data)</span>        <span class="token comment">//     $.ajax(&#123;</span>        <span class="token comment">//         url: `mock/corse_score_$&#123;data.id&#125;.json`,</span>        <span class="token comment">//         success: function (data) &#123;</span>        <span class="token comment">//             console.log("查询课程得分成功:", data)</span>        <span class="token comment">//         &#125;,</span>        <span class="token comment">//         error: function (err) &#123;</span>        <span class="token comment">//         &#125;</span>        <span class="token comment">//     &#125;);</span>        <span class="token comment">// &#125;)</span>        <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//自己定义一个方法整合一下</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                    <span class="token literal-property property">url</span><span class="token operator">:</span> url<span class="token punctuation">,</span>                    <span class="token literal-property property">data</span><span class="token operator">:</span> data<span class="token punctuation">,</span>                    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"mock/user.json"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"用户查询成功~~~:"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">mock/user_corse_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>data<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.json</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"课程查询成功~~~:"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">mock/corse_score_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>data<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.json</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"课程成绩查询成功~~~:"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span> <span class="token comment">//失败的话catch</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"出现异常"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><ul><li>代码拆分：类似<code>Java</code>导包，导模块。 </li><li>命令：<code>export 和 import</code> <ul><li><code>export</code> 用于规定模块的对外接口 </li><li><code>import</code> 用于导入其他模块提供的功能</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">user<span class="token punctuation">.</span>js<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">21</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>add<span class="token punctuation">&#125;</span>hello<span class="token punctuation">.</span>js<span class="token comment">// export const util = &#123;</span><span class="token comment">//     sum(a, b) &#123;</span><span class="token comment">//         return a + b;</span><span class="token comment">//     &#125;</span><span class="token comment">// &#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// export &#123;util&#125;</span><span class="token comment">//`export`不仅可以导出对象，一切JS变量都可以导出。比如：基本类型变量、函数、数组、对象。</span>main<span class="token punctuation">.</span>js<span class="token keyword">import</span> abc <span class="token keyword">from</span> <span class="token string">"./hello.js"</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span>add<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./user.js"</span>abc<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><h3 id="MVVM思想"><a href="#MVVM思想" class="headerlink" title="MVVM思想"></a>MVVM思想</h3><ul><li><p><code>M：model</code> 包括数据和一些基本操作 </p></li><li><p><code>V：view</code> 视图，页面渲染结果 </p></li><li><p><code>VM：View-model</code>，模型与视图间的双向操作（无需开发人员干涉） 视图和数据通过VM绑定起来，<code>model</code>里有变化会自动地通过<code>Directives</code>填写到视<code>view</code>中， 视图表单中添加了内容也会自动地通过<code>DOM Listeners</code>保存到模型中。</p></li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm init -y&#x2F;&#x2F;教学的版本是Vue2，目前版本是Vue3npm i vue@2 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html">在VSCode中安装vue 2 snippets语法提示插件，在谷歌浏览器中安装vue.js devtools<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        v-model实现双向绑定        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num++<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点赞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        v-on:click绑定事件，实现自增        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cancel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>取消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        回到自定义的方法                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span> &#123;&#123;name&#125;&#125; ,非常帅，有&#123;&#123;num&#125;&#125;个人为他点赞&#123;&#123;hello()&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 导入依赖 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./node_modules/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">//1、vue声明式渲染</span>        <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token comment">//生成vue对象</span>            <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span><span class="token comment">//绑定元素 div id="app"</span>            <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//封装数据</span>                <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>  <span class="token comment">// 也可以使用&#123;&#125; //表单中可以取出</span>                <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">1</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token comment">//封装方法</span>                <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">--</span> <span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token string">"1"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        还可以在html控制台 vm<span class="token punctuation">.</span>name <span class="token punctuation">,</span>vm 表示 Vue对象的实例        <span class="token comment">//2、双向绑定,模型变化，视图变化。反之亦然。</span>        <span class="token comment">//3、事件处理</span>        <span class="token comment">//v-xx：指令</span>        <span class="token comment">//1、创建vue实例，关联页面的模板，将自己的数据（data）渲染到关联的模板，响应式的</span>        <span class="token comment">//2、指令来简化对dom的一些操作。</span>        <span class="token comment">//3、声明方法来做更复杂的操作。methods里面可以封装方法。</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><blockquote><p>在大型应用开发的时候，页面可以划分成很多部分。往往不同的页面，也会有相同的部分。 例如可能会有相同的头部导航。 但是如果每个页面都自开发，这无疑增加了我们开发的成本。</p><p>把页面拆成不同的组件，然后共享组件，避免重复开发。 在vue里，所有的vue实例都是组件，组件其实也是一个vue实例，因此它在定义时也会接收：data、methods、生命周期函等 不同的是组件不会与页面的元素綁定，否则就无法复用了，因此没有el属性。 </p><p>但是组件渲染需要html模板，所以增加了template属性，值就是HTML模板 全局组件定义完毕，任何vue实例都可以直接在HTML中通过组件名称来使用组了 data必须是一个函数，不再是一个对象。</p></blockquote><h3 id="Vue脚手架"><a href="#Vue脚手架" class="headerlink" title="Vue脚手架"></a>Vue脚手架</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 全局安装 Webpacknpm i webpack -g# 全局安装脚手架npm i vue-cli -g# 查看版本 2.9.6vue -V# 使用 webpack 模板项目 初始化一个 appname 项目vue init webpack appname:vue # 启动项目，项目中的package.json 中 scripts，代表运行命令npm start &#x3D; npm run dev # 项目打包npm run build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ &#96;vue init webpack app&#96;? Target directory exists. Continue? (Y&#x2F;n) y? Target directory exists. Continue? Yes? Project name app? Project description (A Vue.js project)? Project description A Vue.js project? Author (lingzhexi &lt;lingzhexi@gmail.com&gt;)? Author lingzhexi &lt;lingzhexi@gmail.com&gt;? Vue build (Use arrow keys)? Vue build standalone? Install vue-router? (Y&#x2F;n) &#96;y&#96;? Install vue-router? Yes? Use ESLint to lint your code? (Y&#x2F;n) &#96;n&#96;? Use ESLint to lint your code? No? Set up unit tests (Y&#x2F;n) &#96;n&#96;? Set up unit tests No? Setup e2e tests with Nightwatch? (Y&#x2F;n) &#96;y&#96;? Setup e2e tests with Nightwatch? Yes? Should we run &#96;npm install&#96; for you after the project has been created? (recom? Should we run &#96;npm install&#96; for you after the project has been created? (recommended) yarn   vue-cli · Generated &quot;app&quot;.# Installing project dependencies ...# &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#39;yarn&#39; is not recognized as an internal or external command,operable program or batch file.# Project initialization finished!# &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;To get started:  cd app  npm run devDocumentation can be found at https:&#x2F;&#x2F;vuejs-templates.github.io&#x2F;webpack<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用element-UI"><a href="#使用element-UI" class="headerlink" title="使用element-UI"></a>使用element-UI</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 安装npm i elemenet-ui -S<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"># 在 main<span class="token punctuation">.</span>js 中写入以下内容：<span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 补充依赖npm i webpack-dev-server --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 谷粒商城 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谷粒商城 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒商城（二）| 整合微服务</title>
      <link href="/posts/57306.html"/>
      <url>/posts/57306.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="整合微服务"><a href="#整合微服务" class="headerlink" title="整合微服务"></a>整合微服务</h1><p> <a href="https://s2.loli.net/2024/12/20/5dY8KzaGhRHTxJi.png" title="image-20220411213056325" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/5dY8KzaGhRHTxJi.png" alt="image-20220411213056325"></a></p><h2 id="搭配方案"><a href="#搭配方案" class="headerlink" title="搭配方案"></a>搭配方案</h2><ul><li><code>SpringCloud Alibaba - Nacos</code> : 注册中心 （服务发现/注册）</li><li><code>SpringCloud Alibaba - Nacos</code> : 配置中心 （动态配置管理）</li><li><code>SpringCloud - Ribbon</code> :  负载均衡</li><li><code>SpringCloud - Feign</code> : 声明式 HTTP 客户端 （调用远程服务）</li><li><code>SpringCloud Alibaba - Sentinel</code> : 服务容错 （限流、降级、熔断）</li><li><code>SpringCloud - Gateway</code> : API 网关 （<code>webflux</code> 编程模式）</li><li><code>SpringCloud - Sleuth</code> : 调用链监控</li><li><code>SpringCloud Alibaba - Seata</code> : 原 <code>Fescar</code> 即分布式事务解决方案     </li></ul><p>阿里巴巴中文文档：<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/README-zh.md"><code>SpringCloud Alibab 中文文档</code></a></p><h2 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h2><h3 id="SpringCloud与SpringBoot"><a href="#SpringCloud与SpringBoot" class="headerlink" title="SpringCloud与SpringBoot"></a>SpringCloud与SpringBoot</h3><p><a href="https://s2.loli.net/2024/12/20/4tlKwGon8NMrmXc.png" title="image-20220411215026972" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/4tlKwGon8NMrmXc.png" alt="image-20220411215026972"></a>  </p><p><code>SpringCloud - SpringBoo</code>t 版本对比（<a href="https://spring.io/projects/spring-cloud">SpringCloud 官网</a>）</p><p><a href="https://s2.loli.net/2024/12/20/2r1UOopabiySQT7.png" title="image-20220411215056217" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/2r1UOopabiySQT7.png" alt="image-20220411215056217"></a> </p><h3 id="SpringAlibaba与SpringBoot"><a href="#SpringAlibaba与SpringBoot" class="headerlink" title="SpringAlibaba与SpringBoot"></a>SpringAlibaba与SpringBoot</h3><p><code>SpringCloud Alibaba - SpringBoot</code> 版本对比 （ <a href="https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/README-zh.md">SpringCloud Alibaba Github</a>）</p><p><a href="https://s2.loli.net/2024/12/20/IF39t1RPLksHofE.png" title="image-20220411220224816" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/IF39t1RPLksHofE.png" alt="image-20220411220224816"></a> </p><p>将 <code>SpringCloud Alibaba</code> 依赖 加入 <code>gulimall-common</code> 中  </p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h2><p><a href="https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/spring-cloud-alibaba-docs/src/main/asciidoc-zh/nacos-discovery.adoc">nacos 注册中心</a></p><h3 id="服务注册-发现-Nacos-Discovery"><a href="#服务注册-发现-Nacos-Discovery" class="headerlink" title="服务注册/发现 Nacos Discovery"></a>服务注册/发现 Nacos Discovery</h3><ol><li><p>引入依赖，加入<code>gulimall-common</code></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>优惠卷模块引入 nacos discovery 依赖</p><p> <a href="https://s2.loli.net/2024/12/20/1ZQkPU5OgAKzoR3.png" title="image-20220411222218474" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/1ZQkPU5OgAKzoR3.png" alt="image-20220411222218474"></a> </p></li><li><p>配置<code>Nacos Server</code> 地址</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span><span class="token key atrule">nacos</span><span class="token punctuation">:</span>  <span class="token key atrule">discovery</span><span class="token punctuation">:</span>    <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用 <code>@EnableDiscoveryClient</code> 注解开启服务注册和发现<br><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112228697.png" title="image-20220411222803578" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112228697.png" alt="image-20220411222803578"></a> </p></li><li><p>查看注册的服务</p><blockquote><p> 登录后台 127.0.0.1:8848/nacos </p><p> 用户信息：nacos/nacos</p></blockquote><p><a href="https://s2.loli.net/2024/12/20/47RDns6HXGTPlMC.png" title="image-20220411223200216" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/47RDns6HXGTPlMC.png" alt="image-20220411223200216"></a> </p></li></ol><h2 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h2><ol><li><p>引入 <code>open-feign</code></p></li><li><p>编写一个接口，告诉<code>SpringCloud</code> 需要调用远程接口</p><ul><li><p>新建一个<code>feign</code> 包</p></li><li><p>写一个接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">"gulimall-coupon"</span><span class="token punctuation">)</span> <span class="token comment">//表示 nacos 注册中心中的找到服务名为 gulimall-coupon 的服务</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CouponFeignService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/coupon/coupon/member/coupon"</span><span class="token punctuation">)</span> <span class="token comment">// 找到优惠券服务中的该接口</span>    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">memberCoupons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>开启远程调用功能 </p><p>在主启动中添加 <code>@EnableFeignClients(basePackages=&quot;xx&quot;)</code> <code>xx</code>表示指定<code>feign</code>的接口包</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.atguigu.gulimall.member.feign"</span><span class="token punctuation">)</span> <span class="token comment">//此时的basePackages 可以省略</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.atguigu.gulimall.member.dao"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GulimallMemberApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">GulimallMemberApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>示例</p><ul><li><p>添加远程接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"coupon/coupon"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CouponController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CouponService</span> couponService<span class="token punctuation">;</span>    <span class="token comment">/**     * 会员优惠券     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/member/coupon"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">memberCoupons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CouponEntity</span> couponEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CouponEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        couponEntity<span class="token punctuation">.</span><span class="token function">setCouponName</span><span class="token punctuation">(</span><span class="token string">"满100减10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"coupons"</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>couponEntity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加调用接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"member/member"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemberController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MemberService</span> memberService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">CouponFeignService</span> couponFeignService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/coupons"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MemberEntity</span> memberEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemberEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        memberEntity<span class="token punctuation">.</span><span class="token function">setNickname</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">R</span> r <span class="token operator">=</span> couponFeignService<span class="token punctuation">.</span><span class="token function">memberCoupons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"member"</span><span class="token punctuation">,</span> memberEntity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"coupons"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"coupons"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>请求接口 <code>localhost:8000/member/member/coupons</code></p></li></ul></li></ol><h2 id="配置中心：动态管理配置"><a href="#配置中心：动态管理配置" class="headerlink" title="配置中心：动态管理配置"></a>配置中心：动态管理配置</h2><p><a href="https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/spring-cloud-alibaba-examples/nacos-example/nacos-config-example/readme-zh.md">nacos 配置中心文档</a></p><ol><li><p>引入 <code>Nacos Config  Starter</code></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建 <code>bootstrap.yml</code>，配置 <code>Nacos</code> 元数据</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">application</span><span class="token punctuation">:</span><span class="token key atrule">name</span><span class="token punctuation">:</span> gulimall<span class="token punctuation">-</span>coupon<span class="token key atrule">cloud</span><span class="token punctuation">:</span><span class="token key atrule">nacos</span><span class="token punctuation">:</span><span class="token key atrule">config</span><span class="token punctuation">:</span><span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置中心 添加 数据集<code>（Data Id） gulimall-coupon.properties</code> ，默认规则，应用名.<code>properties</code><br><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122135151.png" title="image-20220412213509978" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122135151.png" alt="image-20220412213509978"></a> </p><p><a href="https://s2.loli.net/2024/12/20/xuvoJZNPcyQghM1.png" title="image-20220412214528762" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/xuvoJZNPcyQghM1.png" alt="image-20220412214528762"></a> </p></li><li><p>动态获取配置<br><code>@RefreshScope</code> ：动态获取并刷新配置</p><p><code>@Value(&quot;$&#123;配置项的名&#125;&quot;)</code> ：获取到配置</p><p>如果配置中心和当前应用都配置相同的项，优先使用配置中心的配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RefreshScope</span> <span class="token comment">//动态刷新</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"coupon/coupon"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CouponController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CouponService</span> couponService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;coupon.user.name&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;coupon.user.age&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>核心概念</p><p><a href="https://s2.loli.net/2024/12/20/Ggy1T8tbxdC2Y4K.png" title="image-20220412220641506" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/Ggy1T8tbxdC2Y4K.png" alt="image-20220412220641506"></a></p><ul><li><p>命名空间：配置隔离 </p><p>默认 <code>public</code> ：默认新增的所有都在该空间下</p><ol><li><p>开发、测试、生产 ：利用命名空间来做环境隔离</p><p>注意：在<code>bootstrap.yml</code> 配置中，需要使用那个命名空间下的配置</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">spring.cloud.nacos.config.namespace</span><span class="token punctuation">=</span><span class="token value attr-value">cc749289-b027-486f-bb6a-3febcabecbdb</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://s2.loli.net/2024/12/20/8nlSj5ma7KZQEcg.png" title="image-20220412220837375" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/8nlSj5ma7KZQEcg.png" alt="image-20220412220837375"></a> </p></li><li><p>每个服务应用之间相互隔离，管理微服务自己的配置<br><a href="https://s2.loli.net/2024/12/20/yaIEOv29ZWSQB3R.png" title="image-20220412223231969" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/yaIEOv29ZWSQB3R.png" alt="image-20220412223231969"></a></p></li></ol></li><li><p>配置集：所有配置的集合</p></li><li><p>配置集ID：类似文件名 （<code>Data ID：</code> 文件名）</p></li><li><p>配置分组：默认所有的配置集都属于：<code>DEFAULT_GROUP</code>；</p><ul><li><p>组名：<code>1111 、618 、1212</code></p></li><li><p><a href="https://s2.loli.net/2024/12/20/sbvGAordepQkS7N.png" title="image-20220412224056530" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/sbvGAordepQkS7N.png" alt="image-20220412224056530"></a> </p></li><li><p>添加分组配置</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">spring.cloud.nacos.config.group</span><span class="token punctuation">=</span><span class="token value attr-value">1111</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>每个微服务创建自己的命名空间，使用配置分组区分环境，<code>dev、test、prod</code> 环境</p><p><a href="https://s2.loli.net/2024/12/20/fnXI5ZrPdv2jCY3.png" title=" " class="gallery-item"><img src="https://s2.loli.net/2024/12/20/fnXI5ZrPdv2jCY3.png" alt=" "></a>     </p></li></ul></li><li><p>同时加载多个配置集</p><ul><li><p>微服务任何配置信息，任何配置文件都可以放在配置中心中<br><a href="https://s2.loli.net/2024/12/20/RvCm6I5d9pjtSKu.png" title="image-20220412233717240" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/RvCm6I5d9pjtSKu.png" alt="image-20220412233717240"></a></p></li><li><p>只需要在 <code>bootstrap.yml</code> 说明 加载配置中心中的那些配置文件即可</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">appliation</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> gulimall<span class="token punctuation">-</span>coupon  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> d6545d08<span class="token punctuation">-</span>333c<span class="token punctuation">-</span>4806<span class="token punctuation">-</span>bf43<span class="token punctuation">-</span>6acc99acecc6        <span class="token comment"># 数据库配置</span>        ext<span class="token punctuation">-</span>config<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.data<span class="token punctuation">-</span><span class="token key atrule">id</span><span class="token punctuation">:</span> datasource.yml        ext<span class="token punctuation">-</span>config<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.group<span class="token punctuation">:</span> dev        ext<span class="token punctuation">-</span>config<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.refresh<span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token comment"># mybatis 配置</span>        ext<span class="token punctuation">-</span>config<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>.data<span class="token punctuation">-</span><span class="token key atrule">id</span><span class="token punctuation">:</span> mybatis.yml        ext<span class="token punctuation">-</span>config<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>.group<span class="token punctuation">:</span> dev        ext<span class="token punctuation">-</span>config<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>.refresh<span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token comment"># 其他配置</span>        ext<span class="token punctuation">-</span>config<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>.data<span class="token punctuation">-</span><span class="token key atrule">id</span><span class="token punctuation">:</span> other.yml        ext<span class="token punctuation">-</span>config<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>.group<span class="token punctuation">:</span> dev        ext<span class="token punctuation">-</span>config<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>.refresh<span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://s2.loli.net/2024/12/20/MNUXrtH9vuDmEgZ.png" title="image-20220412233550198" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/MNUXrtH9vuDmEgZ.png" alt="image-20220412233550198"></a></p></li><li><p><code>@Value</code>，<code>@ConfigurationProperties</code>  以前<code>SpringBoot</code> 任何方法从配置文件中获取值，都能使用</p></li><li><p>配置中心有优先使用配置</p></li></ul></li></ol><h2 id="网关-GateWay"><a href="#网关-GateWay" class="headerlink" title="网关 GateWay"></a>网关 GateWay</h2><p> <a href="https://spring.io/projects/spring-cloud-gateway">SpringGateway 官方文档</a>    </p><p>​    网关作为流量的入口，常用功能包括 <strong>路由转发、权限校验、限流控制</strong>等，而<code>SpringCloud Gateway</code><br>作为<code>SpringCloud</code>官方推出的第二代网关框架，取代了<code>Zuul</code>网关。</p><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><p><code>Spring Cloud Gateway</code> 的特点：</p><ul><li>基于<code>Spring Framework 5</code>、<code>Project Reactor</code>和<code>Spring Boot 2.0</code>构建</li><li>能够匹配任何请求属性上的路由。</li><li>谓词和筛选器特定于路由。</li><li>断路器集成。</li><li>春云发现客户端集成</li><li>易于编写谓词和筛选器</li><li>请求速率限制</li><li>路径重写</li></ul><p><a href="https://s2.loli.net/2024/12/20/zZOUHXPC5EI7yAT.png" title="image-20220415142458247" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/zZOUHXPC5EI7yAT.png" alt="image-20220415142458247"></a> </p><p><a href="https://s2.loli.net/2024/12/20/bigeJUwmpxR5NK7.png" title="image-20220415142513181" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/bigeJUwmpxR5NK7.png" alt="image-20220415142513181"></a> </p><p><a href="https://s2.loli.net/2024/12/20/eUG3JvshIdFityg.png" title="image-20220415143618115" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/eUG3JvshIdFityg.png" alt="image-20220415143618115"></a> </p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li><p><code>Route</code>（路由）：网关的基本构建基块。它由 <strong>ID、目标 URI</strong>、<strong>断言集合</strong>和<strong>过滤器集合</strong>定义。如果<strong>断言集合为 true</strong>，则匹配路由</p></li><li><p><code>Predicate</code>（断言）：这是一个 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html">Java 8 函数断言</a>。输入类型是<a href="https://docs.spring.io/spring/docs/5.0.x/javadoc-api/org/springframework/web/server/ServerWebExchange.html">Spring Framework <code>ServerWebExchange</code></a>。这使您可以匹配 HTTP 请求中的任何内容，例如标头或参数。</p></li><li><p><code>Filter</code>（过滤器）：这些是使用特定工厂构建的<a href="https://github.com/spring-cloud/spring-cloud-gateway/tree/2.2.x/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/GatewayFilter.java"><code>网关过滤器</code></a>实例。在这里，您可以修改发送下游请求之前或之后的请求和响应</p></li></ul><h3 id="工作原理："><a href="#工作原理：" class="headerlink" title="工作原理："></a>工作原理：</h3><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204151448583.png" title="Spring Cloud Gateway Diagram" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204151448583.png" alt="Spring Cloud Gateway Diagram"></a> </p><p>总结：当请求到达网关，网关利用断言，判断此次请求是不是符合某个路由规则，如果符合了就按照路由规则，路由到指定的地方。当要去指定的地方就要经过一系列的<code>filter</code>进行过滤</p><h3 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h3><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#gateway-request-predicates-factories">路由断言工厂</a></p><h4 id="After-Route-Predicate-Factory：后路由断言工厂"><a href="#After-Route-Predicate-Factory：后路由断言工厂" class="headerlink" title="After Route Predicate Factory：后路由断言工厂"></a>After Route Predicate Factory：后路由断言工厂</h4><p>路由断言工厂采用一个参数 a（这是一个 java）。此断言匹配在指定日期时间之后发生的请求。以下示例配置路由之后断言：</p><p>application.yml</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> after_route        <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//example.org        <span class="token comment"># 断言（条件）：判断请求是在指定的时间后（After)发生的</span>        <span class="token key atrule">predicates</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> After=2017<span class="token punctuation">-</span>01<span class="token punctuation">-</span>20T17<span class="token punctuation">:</span>42<span class="token punctuation">:</span>47.789<span class="token punctuation">-</span>07<span class="token punctuation">:</span>00<span class="token punctuation">[</span>America/Denver<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#gatewayfilter-factories">网关过滤器工厂</a></p><h4 id="AddRequestHeader-GatewayFilter-Factory：添加请求头网关过滤器工厂"><a href="#AddRequestHeader-GatewayFilter-Factory：添加请求头网关过滤器工厂" class="headerlink" title="AddRequestHeader GatewayFilter Factory：添加请求头网关过滤器工厂"></a><code>AddRequestHeader GatewayFilter Factory</code>：添加请求头网关过滤器工厂</h4><p>添加 <code>application.yml</code>配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> add_request_header_route      <span class="token comment"># 请求没有断言，任何请求直接跳转到这个链接</span>        <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//example.org        <span class="token key atrule">filters</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> AddRequestHeader=X<span class="token punctuation">-</span>Request<span class="token punctuation">-</span>red<span class="token punctuation">,</span> blue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此列表将标头添加到所有匹配请求的下游请求头中<code>X-Request-red:blue</code></p><p><strong>AddRequestHeader</strong> 了解用于匹配路径或主机的 <code>URI</code> 变量。<code>URI</code> 变量可以在值中使用，并在运行时展开。下面的示例配置使用变量的 一个：<code>AddRequestHeaderGatewayFilter</code></p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#global-filters">全局过滤器工厂</a></p><h3 id="创建网关"><a href="#创建网关" class="headerlink" title="创建网关"></a>创建网关</h3><ol><li><p>创建新 <code>module gulimall-gateway</code></p></li><li><p>添加 <code>gateway</code> 依赖，<del>添加 gulimall-common 依赖</del>，添加<code>nacos</code> 配置中心和服务中心依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-boot.version</span><span class="token punctuation">></span></span>2.1.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-boot.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.alibaba.version</span><span class="token punctuation">></span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.alibaba.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">></span></span>Greenwich.SR3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--nacos 服务注册/发现--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring-cloud.alibaba.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--naocs 配置中心--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring-cloud.alibaba.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>统一 <code>Spring boot、Spring Cloud</code> 版本</p><ul><li><code>boot：2.1.8.RELEASE</code></li><li><code>cloud：Greenwich.SR3</code> </li></ul></li><li><p>项目新建 <code>bootstrap.yml</code> 填写 <code>nacos</code> 配置中心 </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">application</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> gulimall<span class="token punctuation">-</span>gateway    <span class="token key atrule">cloud</span><span class="token punctuation">:</span>        <span class="token key atrule">nacos</span><span class="token punctuation">:</span>            <span class="token key atrule">config</span><span class="token punctuation">:</span>                <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>                <span class="token key atrule">namespace</span><span class="token punctuation">:</span> 4b9add0d<span class="token punctuation">-</span>df21<span class="token punctuation">-</span>4fc6<span class="token punctuation">-</span>ad9c<span class="token punctuation">-</span>35936b491b10s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置中心 新建网关配置命名空间</p><ul><li><p>新建命名空间 <code>gateway</code></p></li><li><p>新建配置文件 <code>gulimall-gateway.propertie</code> </p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">gulimall-gateway</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><a href="https://s2.loli.net/2024/12/20/Nc7w9mnxVKisTaZ.png" title="image-20220421225143278" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/Nc7w9mnxVKisTaZ.png" alt="image-20220421225143278"></a> </p></li></ul></li><li><p><code>application.properties</code> 配置服务中心</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">88</span><span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">gulimall-gateway</span><span class="token key attr-name">spring.cloud.nacos.discovery.server-addr</span><span class="token punctuation">=</span><span class="token value attr-value">127.0.0.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>启动成功<br><a href="https://s2.loli.net/2024/12/20/o2Bpxrjy1ZiQlFw.png" title="image-20220421230109723" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/o2Bpxrjy1ZiQlFw.png" alt="image-20220421230109723"></a></p></li><li><p>配置路由断言</p><p>新建一个application.yml</p><p><a href="https://s2.loli.net/2024/12/20/PAQhmYa7orKBps9.png" title="image-20220421230443693" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/PAQhmYa7orKBps9.png" alt="image-20220421230443693"></a></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">cloud</span><span class="token punctuation">:</span><span class="token key atrule">gateway</span><span class="token punctuation">:</span><span class="token key atrule">routes</span><span class="token punctuation">:</span>                <span class="token key atrule">-id</span><span class="token punctuation">:</span> bing_route                <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//www.bing.com                <span class="token key atrule">predicates</span><span class="token punctuation">:</span><span class="token comment"># query 表示请求参数 ，参数 url ，参数值正则 baidu</span>                <span class="token punctuation">-</span>Query=url<span class="token punctuation">,</span>bing                 <span class="token key atrule">-id</span><span class="token punctuation">:</span> bing_route                <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//www.bing.com                <span class="token key atrule">predicates</span><span class="token punctuation">:</span><span class="token comment"># query 表示请求参数 ，参数 url ，参数值正则 baidu</span>                <span class="token punctuation">-</span>Query=url<span class="token punctuation">,</span>bing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请求路径：</p><ul><li><p><del>百度地址：<a href="http://127.0.0.1:88/hello?url=baidu~~~~%EF%BC%8C%E6%97%A0%E6%B3%95%E8%B7%B3%E8%BD%AC%E5%88%B0%E7%99%BE%E5%BA%A6">http://127.0.0.1:88/hello?url=baidu~~~~，无法跳转到百度</a></del></p></li><li><p>必应地址：<a href="http://127.0.0.1:88/hello?url=bing">http://127.0.0.1:88/hello?url=bing</a></p></li><li><p>QQ地址：<a href="http://127.0.0.1:88/hello?url=qq">http://127.0.0.1:88/hello?url=qq</a></p></li></ul></li></ol></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 谷粒商城 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谷粒商城 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒商城（一）| 环境搭建</title>
      <link href="/posts/57306.html"/>
      <url>/posts/57306.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h1><h2 id="Docker-安装MySQL"><a href="#Docker-安装MySQL" class="headerlink" title="Docker 安装MySQL"></a>Docker 安装MySQL</h2><ol><li><p>下载镜像</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker pull mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建实例</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker run -p 3307:3306 --name mysql \-v &#x2F;mydata&#x2F;mysql&#x2F;log:&#x2F;var&#x2F;log&#x2F;mysql \-v &#x2F;mydata&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql \-v &#x2F;mydata&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql \-e MYSQL_ROOT_PASSWORD&#x3D;root \-d mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><ul><li>-p 3306:3306：-p 主机端口:容器端口，将容器的3306端口映射到主机的3306端口</li><li>-v /mydata/mysql/conf:/etc/mysql：将配置文件夹挂载到主机</li><li>-v /mydata/mysql/log:/var/log/mysql：将日志文件夹挂载到主机</li><li>-v /mydata/mysql/data:/var/lib/mysql：将配置文件夹挂载到主机</li><li>-e MYSQL_ROOT_PASSWORD=root：初始化root用户密码</li><li>-d mysql:5.7：表示后台运行(-d) 镜像mysql:5.7   –&gt;查看镜像docekr images</li></ul></li><li><p>进去docker 容器</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">root@af26dd647c9a:&#x2F;# docker exec -it mysql &#x2F;bin&#x2F;bashroot@af26dd647c9a:&#x2F;# whereis mysqlmysql: &#x2F;usr&#x2F;bin&#x2F;mysql &#x2F;usr&#x2F;lib&#x2F;mysql &#x2F;etc&#x2F;mysql &#x2F;usr&#x2F;share&#x2F;mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>mysql配置 my.cnf</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">[root@lingzx conf]# vi &#x2F;mydata&#x2F;mysql&#x2F;conf&#x2F;my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">[client]default-character-set&#x3D;utf8[mysql]default-character-set&#x3D;utf8[mysqld]init_connect&#x3D;&#39;SET collation_connection&#x3D;utf8_unicode_ci&#39;init_connect&#x3D;&#39;SET NAMES utf8&#39;character-set-server&#x3D;utf8collation-server&#x3D;utf8_unicode_ciskip-character-set-client-handshakeskip-name-resolvelower_case_table_names&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看docker中MySQL的配置</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cd &#x2F;etc&#x2F;mysqlcat my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>开机自启</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker update mysql --restart&#x3D;always<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="Docker-安装Redis"><a href="#Docker-安装Redis" class="headerlink" title="Docker 安装Redis"></a>Docker 安装Redis</h2><ol><li><p>下载redis 镜像</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker pull redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建实例并启动</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 由于 redis容器 &#x2F;etc&#x2F;redis目录下没有 redis.conf ，所以需要我们预先在主机上创建一个 redis.confmkdir -p &#x2F;mydata&#x2F;redis&#x2F;conftouch &#x2F;mydata&#x2F;redis&#x2F;conf&#x2F;redis.confdocker run -p 6379:6379 --name redis \-v &#x2F;mydata&#x2F;redis&#x2F;data:&#x2F;data \-v &#x2F;mydata&#x2F;redis&#x2F;conf&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf \-d redis redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf# 连接 docker中的 redis的控制台docker exec -it redis redis-cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置持久化</p><blockquote><p>当前版本的redis默认配置了【文件追加写持久化】aof</p></blockquote><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">vi &#x2F;mydata&#x2F;redis&#x2F;redis.confappendonly yesdocker restart redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开机自启</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker update redis --restart&#x3D;always<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h1 id="统一环境"><a href="#统一环境" class="headerlink" title="统一环境"></a>统一环境</h1><h2 id="Maven-3-6-1"><a href="#Maven-3-6-1" class="headerlink" title="Maven 3.6.1"></a>Maven 3.6.1</h2><blockquote><p>链接: <a href="https://pan.baidu.com/s/1Jd5EAXADSEFop2QT8sxzBA">https://pan.baidu.com/s/1Jd5EAXADSEFop2QT8sxzBA</a> 提取码: 38iw 复制这段内容后打开百度网盘手机App，操作更方便哦</p></blockquote><p>配置阿里云镜像</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus-aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Nexus aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置 JDK 1.8 编译环境</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>jdk-1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compile.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compile.source</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compile.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compile.target</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compile.compilerVersion</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compile.compilerVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置本地仓库</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">></span></span>D:\Program Files\Maven\LocalWareHouse<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="IDEA-安装插件"><a href="#IDEA-安装插件" class="headerlink" title="IDEA 安装插件"></a>IDEA 安装插件</h2><ul><li><code>lombok</code></li><li><code>MybatisX</code></li></ul><h2 id="Vscode-安装配置"><a href="#Vscode-安装配置" class="headerlink" title="Vscode 安装配置"></a>Vscode 安装配置</h2><ul><li><code>Auto Close Tag</code></li><li><code>Auto Rename Tag</code></li><li><code>Chinese (Simplified)</code></li><li><code>ESLint</code></li><li><code>HTML CSS Support</code></li><li><code>HTML Snippets</code></li><li><code>JavaScript（ES6）</code></li><li><code>Live Server</code></li><li><code>open in browser</code></li><li><code>Vetur</code></li></ul><h2 id="安装配置-Git"><a href="#安装配置-Git" class="headerlink" title="安装配置 Git"></a>安装配置 Git</h2><ol><li><p>下载 <code>git</code>：<a href="https://git-scm.com/">https://git-scm.com</a></p></li><li><p>配置 <code>git</code> ，进入<code>git bash</code></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 配置用户名git config --global user.name &#39;username&#39;# 配置邮箱git config --global user.email &#39;username@email.com&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置 <code>shh</code> 免密登录，进入<code>git bash</code></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">ssh-keygen -t rsa -C &#39;xx@xxx.com&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 三次回车，查找 <code>id_rsa</code> 和 <code>id_rsa.pub</code></p></li><li><p>登录 <code>gitee</code>，在设置里面找到 <code>SSH KEY</code> 将 <code>.pub</code> 文件的内容粘贴进去</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 查看是否成功ssh -T git@gitee.com <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><ol><li><p>商品服务、仓储服务、订单服务、优惠券服务、用户服务</p><p>共用：</p><ol><li><code>web 、openfeign</code></li><li>每个服务，包名 <strong>com.atguigu.gulimall</strong>.xxx(<code>product/order/ware/coupon/member</code>)</li><li>模块名：<code>gulimall-coupon</code></li></ol></li><li><p>添加<code>pom</code>文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.atguigu.gulimall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>gulimall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>gulimall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>聚合服务<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>gulimall-coupon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>gulimall-member<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>gulimall-order<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>gulimall-product<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>gulimall-ware<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置忽略提交内容 <code>.gitgnore</code></p><pre class="line-numbers language-.gitgnore" data-language=".gitgnore"><code class="language-.gitgnore">**&#x2F;mvnw**&#x2F;mvnw.cmd**&#x2F;.mvn**&#x2F;target&#x2F;.idea**&#x2F;.gitignore<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://s2.loli.net/2024/12/20/CqEJajDhoykvR7X.png" title="image-20220323234601504" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/CqEJajDhoykvR7X.png" alt="image-20220323234601504"></a> </p></li><li><p>提交并推送到仓库</p></li></ol><h2 id="数据库设计-PowerDesigner"><a href="#数据库设计-PowerDesigner" class="headerlink" title="数据库设计 PowerDesigner"></a>数据库设计 PowerDesigner</h2><ol><li><p><a href="https://s2.loli.net/2024/12/20/Xp6OcxDIhiGKJSq.png" title="image-20220324004223247" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/Xp6OcxDIhiGKJSq.png" alt="image-20220324004223247"></a> </p></li><li><p><a href="https://s2.loli.net/2024/12/20/tfe6YIMug8EbpwZ.png" title="image-20220324004234654" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/tfe6YIMug8EbpwZ.png" alt="image-20220324004234654"></a> </p></li><li><p>每个微服务创建自己的数据库</p></li></ol><h2 id="人人开源快速开发"><a href="#人人开源快速开发" class="headerlink" title="人人开源快速开发"></a>人人开源快速开发</h2><h3 id="后端管理-renren-fast"><a href="#后端管理-renren-fast" class="headerlink" title="后端管理 renren-fast"></a>后端管理 renren-fast</h3><ol><li><p>克隆项目</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git clone git@gitee.com:renrenio&#x2F;renren-fast.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将<code>renren-fast</code> 放在<code>gulimall</code>项目<code>pom</code>中 <code>module</code></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>renren-fast<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>新增数据库 <code>gulimall_admin</code></p></li><li><p>修改<code>pom</code></p><ol><li><p>关联<code>gulimall</code></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>解决<code>@NotBlank</code> 和 <code>@Email</code> 报错</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>修改数据库配置，连接到 <code>gulimall_admin</code> 的配置信息</p></li></ol><h3 id="前端管理-renren-fast-vue"><a href="#前端管理-renren-fast-vue" class="headerlink" title="前端管理 renren-fast-vue"></a>前端管理 renren-fast-vue</h3><ol><li><p>克隆项目</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git clone git@gitee.com:renrenio&#x2F;renren-fast-vue.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将项目拖到<code>VSCode</code>中</p></li><li><p>统一配置</p><ol><li><p><code>nodeJs</code>，</p><blockquote><p>node 版本 14 可以解决所有的报错</p><p>关注 node.js 的 npm 功能</p><p>NPM 是NodeJS的包管理工具，JS-NPM，Java-Maven</p></blockquote><ul><li><p>官网下载安装，<code>node -v</code> 检查版本</p></li><li><p>配置npm 淘宝镜像</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm config set registry http:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>下载依赖包</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>报错处理</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm install --save  -g core-js@^3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>node-sass</code>报错 是由于版本的问题，在<code>package.json</code>中可以解决</p></li></ul></li><li><p>Vue</p></li></ol></li></ol><h3 id="代码生成-renren-generator"><a href="#代码生成-renren-generator" class="headerlink" title="代码生成 renren-generator"></a>代码生成 renren-generator</h3><ol><li><p>克隆项目</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git clone git@gitee.com:renrenio&#x2F;renren-generator.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将项目拖到 <code>idea</code> 中</p></li><li><p>修改配置（以 <code>product</code> 模块为例子）</p><ul><li><p>修改 <code>generator.properties</code></p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#代码生成器，配置信息</span><span class="token key attr-name">mainPath</span><span class="token punctuation">=</span><span class="token value attr-value">com.atguigu</span><span class="token comment">#包名</span><span class="token key attr-name">package</span><span class="token punctuation">=</span><span class="token value attr-value">com.atguigu.gulimall</span><span class="token key attr-name">moduleName</span><span class="token punctuation">=</span><span class="token value attr-value">product</span><span class="token comment">#作者</span><span class="token key attr-name">author</span><span class="token punctuation">=</span><span class="token value attr-value">Mr.Ling</span><span class="token comment">#Email</span><span class="token key attr-name">email</span><span class="token punctuation">=</span><span class="token value attr-value">lingzhexi@163.com</span><span class="token comment">#表前缀(类名不会包含表前缀)</span><span class="token key attr-name">tablePrefix</span><span class="token punctuation">=</span><span class="token value attr-value">pms_</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改 <code>Controller.java.vm</code> 模板</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">注释 <span class="token annotation punctuation">@RequeiresPermissions</span> 注解<span class="token comment">//@RequiresPermissions("$&#123;moduleName&#125;:$&#123;pathName&#125;:list")</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改数据库配置( <code>pms</code> )</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token comment">#MySQL配置</span>    <span class="token key atrule">driverClassName</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>13306/gulimall_pms<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="4"><li>启动项目，生成代码</li></ol><ul><li><p>点击生成代码</p><p><a href="https://s2.loli.net/2024/12/20/d24fsNH6nGO8XmM.png" title="image-20220407215910844" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/d24fsNH6nGO8XmM.png" alt="image-20220407215910844"></a></p></li><li><p>将代码放到 <code>product</code> 模块中</p></li></ul></li></ol><h3 id="新增-gulimall-common"><a href="#新增-gulimall-common" class="headerlink" title="新增 gulimall-common"></a>新增 gulimall-common</h3><ul><li><p>通用的依赖模块 ，product 模块引用该模块</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-lang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.httpcomponents<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>httpcore<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.4.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="整合Mybatis-pus"><a href="#整合Mybatis-pus" class="headerlink" title="整合Mybatis-pus"></a>整合Mybatis-pus</h2><ol><li><p>导入依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置</p><ol><li><p>配置数据源</p><ol><li><p>导入<code>MySql</code> 驱动</p><p>推荐使用 <code>8</code> 版本的<code>Mysql connector</code></p><p><a href="https://s2.loli.net/2024/12/20/suOzDAlFX14evnx.png" title="image-20220410002401508" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/suOzDAlFX14evnx.png" alt="image-20220410002401508"></a></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.28<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>整合 <code>application.yml</code></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">application</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> gulimall<span class="token punctuation">-</span>product    <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">username</span><span class="token punctuation">:</span> root        <span class="token key atrule">password</span><span class="token punctuation">:</span> root        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>13306/gulimall_pms        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>配置 <code>mybaits-plus</code></p><ol><li><p>主启动配置 <code>@MapperScan(&quot;com.atguigu.gulimall.product.dao&quot;)</code></p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204100043736.png" title="image-20220410004352680" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204100043736.png" alt="image-20220410004352680"></a> </p></li><li><p>告诉 <code>MyBatis-Plus ， sql</code> 映射文件位置</p><p>默认位置类路径下的 <code>classpath*:/mapper/**/*.xml</code></p><p><a href="https://s2.loli.net/2024/12/20/GJwsycKh9eI4krq.png" title="image-20220410004908204" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/GJwsycKh9eI4krq.png" alt="image-20220410004908204"></a> </p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span><span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/mapper/<span class="token important">**/*.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>设置主键自增配置</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># 填写 id 自动联想出来</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>        <span class="token key atrule">db-config</span><span class="token punctuation">:</span>            <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><p>​    <strong>各模块最终需要依赖到 gulimall-common</strong> </p></li></ol></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 谷粒商城 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谷粒商城 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义注解场景使用</title>
      <link href="/posts/45688.html"/>
      <url>/posts/45688.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h1><blockquote><p>使用场景</p><ul><li><p>登录校验</p></li><li><p>AOP日志打印</p><p>项目示例：<a href="https://gitee.com/lingzhexi/customer-annotation-demo">https://gitee.com/lingzhexi/customer-annotation-demo</a></p></li></ul></blockquote><p><code>Java</code> 自定义注解一般使用场景为：【<strong>自定义注解 + 拦截器或者 AOP</strong>】</p><h2 id="一-什么是注解-Annotation"><a href="#一-什么是注解-Annotation" class="headerlink" title="一. 什么是注解 (Annotation)"></a>一. 什么是注解 (<code>Annotation</code>)</h2><p>Java 注解是什么，以下是引用自维基百科的内容</p><blockquote><p>Java 注解又称 <code>Java</code> 标注，是 <code>JDK5.0</code> 版本开始支持加入源代码的特殊语法元数据。</p><p>Java 语言中的类、方法、变量、参数和包等都可以被标注。和 <code>Javadoc</code> 不同，Java 标注可以通过反射获取标注内容。</p><p>在编译器生成类文件时，标注可以被嵌入到字节码中。<code>Java</code> 虚拟机可以保留标注内容，在运行时可以获取到标注内容。 当然它也支持自定义 Java 标注。</p></blockquote><h2 id="二-注解体系图"><a href="#二-注解体系图" class="headerlink" title="二. 注解体系图"></a>二. 注解体系图</h2><p>元注解：<code>java.lang.annotation</code>中提供了元注解，可以使用这些注解来定义自己的注解。主要使用的是 <code>Target</code> 和 Retention 注解</p><p><a href="https://s2.loli.net/2024/12/20/v4AxIa6kPe9VwXn.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/v4AxIa6kPe9VwXn.png"></a></p><p>注解处理类：既然上面定义了注解，那得有办法拿到我们定义的注解啊。</p><p><code>java.lang.reflect.AnnotationElement</code></p><p>接口则提供了该功能。注解的处理是通过 java 反射来处理的。如下，反射相关的类 <code>Class, Method, Field</code> 都实现了 <code>AnnotationElement</code> 接口。</p><p><a href="https://s2.loli.net/2024/12/20/wIVapLrX2s64hUk.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/wIVapLrX2s64hUk.png"></a> 反射处理</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041436928.png" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041436928.png"></a> AnnotationElement 接口方法</p><p>因此，只要我们通过反射拿到 <code>Class, Method, Field</code> 类，就能够通过 <code>getAnnotation</code>(Class<T>) 拿到我们想要的注解并取值。</p><h2 id="三-常用元注解"><a href="#三-常用元注解" class="headerlink" title="三. 常用元注解"></a>三. 常用元注解</h2><p><strong>Target</strong>：描述了注解修饰的对象范围，取值在<code>java.lang.annotation.ElementType</code>定义，常用的包括：</p><ul><li><code>METHOD</code>：用于描述方法</li><li><code>PACKAGE</code>：用于描述包</li><li><code>PARAMETER</code>：用于描述方法变量</li><li><code>TYPE</code>：用于描述类、接口或 <code>enum</code> 类型</li></ul><p><strong><code>Retention</code></strong>: 表示注解保留时间长短。取值在<code>java.lang.annotation.RetentionPolicy</code>中，取值为：</p><ul><li><code>SOURCE</code>：在源文件中有效，编译过程中会被忽略</li><li><code>CLASS</code>：随源文件一起编译在 class 文件中，运行时忽略</li><li><code>RUNTIME</code>：在运行时有效</li></ul><p>只有定义为<code>RetentionPolicy.RUNTIME</code>时，我们才能通过注解反射获取到注解。<br>所以，假设我们要自定义一个注解，它用在字段上，并且可以通过反射获取到，功能是用来描述字段的长度和作用。可以定义如下，<a href="https://gitee.com/lingzhexi/annotation">代码见</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">)</span>  <span class="token comment">//  注解用于字段上</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>  <span class="token comment">// 保留到运行时，可通过注解获取</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyField</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">description</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四-示例-反射获取注解"><a href="#四-示例-反射获取注解" class="headerlink" title="四. 示例 - 反射获取注解"></a>四. 示例 - 反射获取注解</h2><p>先定义一个注解：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyField</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">description</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过反射获取注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFieldTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//使用我们的自定义注解</span>    <span class="token annotation punctuation">@MyField</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"用户名"</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMyField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 获取类模板</span>        <span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token class-name">MyFieldTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token comment">// 获取所有字段</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Field</span> f <span class="token operator">:</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 判断这个字段是否有MyField注解</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">MyField</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">MyField</span> annotation <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">MyField</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字段:["</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"], 描述:["</span> <span class="token operator">+</span> annotation<span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"], 长度:["</span> <span class="token operator">+</span> annotation<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><p><a href="https://s2.loli.net/2024/12/20/ifB8PyVIlQnwEkJ.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/ifB8PyVIlQnwEkJ.png"></a></p><h2 id="应用场景一：自定义注解-拦截器-实现登录校验"><a href="#应用场景一：自定义注解-拦截器-实现登录校验" class="headerlink" title="应用场景一：自定义注解 + 拦截器 实现登录校验"></a>应用场景一：自定义注解 + 拦截器 实现登录校验</h2><p>接下来，我们使用 springboot 拦截器实现这样一个功能，如果方法上加了 @LoginRequired，则提示用户该接口需要登录才能访问，否则不需要登录。<br>首先定义一个 LoginRequired 注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">LoginRequired</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后写两个简单的接口，访问 sourceA，sourceB 资源</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sourceA"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sourceA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"你正在访问sourceA资源"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sourceB"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sourceB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"你正在访问sourceB资源"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没添加拦截器之前成功访问</p><p><a href="https://s2.loli.net/2024/12/20/1GzmKLSO2u9vP57.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/1GzmKLSO2u9vP57.png"></a> sourceB</p><p>实现 spring 的 HandlerInterceptor 类先实现拦截器，但不拦截，只是简单打印日志，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SourceAccessInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入拦截器了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现 <code>spring</code> 类 <code>WebMvcConfigurer</code>，创建配置类把拦截器添加到拦截器链中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterceptorTrainConfigurer</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SourceAccessInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拦截成功如下</p><p><a href="https://s2.loli.net/2024/12/20/tb1C4yhFBRLfnXg.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/tb1C4yhFBRLfnXg.png"></a> 拦截了</p><p>在 sourceB 方法上添加我们的登录注解 @LoginRequired</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sourceA"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sourceA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"你正在访问sourceA资源"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@LoginRequired</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sourceB"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sourceB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"你正在访问sourceB资源"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单实现登录拦截逻辑</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入拦截器了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 反射获取方法上的LoginRequred注解</span>        <span class="token class-name">HandlerMethod</span> handlerMethod <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HandlerMethod</span><span class="token punctuation">)</span>handler<span class="token punctuation">;</span>        <span class="token class-name">LoginRequired</span> loginRequired <span class="token operator">=</span> handlerMethod<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">LoginRequired</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>loginRequired <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 有LoginRequired注解说明需要登录，提示用户登录</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"你访问的资源需要登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行成功，访问 sourceB 时需要登录了，访问 sourceA 则不用登录</p><p><a href="https://s2.loli.net/2024/12/20/gY2ASF4Xbjc8iMN.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/gY2ASF4Xbjc8iMN.png"></a></p><p><a href="https://s2.loli.net/2024/12/20/D4V52oAO8xz9grt.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/D4V52oAO8xz9grt.png"></a></p><h2 id="应用场景二：自定义注解-AOP-实现日志打印"><a href="#应用场景二：自定义注解-AOP-实现日志打印" class="headerlink" title="应用场景二：自定义注解 + AOP 实现日志打印"></a>应用场景二：自定义注解 + AOP 实现日志打印</h2><p>先导入切面需要的依赖包</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>定义一个注解 @MyLog</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyLog</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义一个切面类，见如下代码注释理解：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span> <span class="token comment">// 1.表明这是一个切面类</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLogAspect</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 2. PointCut表示这是一个切点，@annotation表示这个切点切到一个注解上，后面带该注解的全类名</span>    <span class="token comment">// 切面最主要的就是切点，所有的故事都围绕切点发生</span>    <span class="token comment">// logPointCut()代表切点名称</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(me.zebin.demo.annotationdemo.aoplog.MyLog)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logPointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 3. 环绕通知</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"logPointCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logAround</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 获取方法名称</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取入参</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> param <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> param<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>o <span class="token operator">+</span> <span class="token string">"; "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入["</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">"]方法,参数为:"</span> <span class="token operator">+</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 继续执行方法</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>methodName <span class="token operator">+</span> <span class="token string">"方法执行结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在步骤二中的 IndexController 写一个 sourceC 进行测试，加上我们的自定义注解：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@MyLog</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sourceC/&#123;source_name&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sourceC</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"source_name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> sourceName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"你正在访问sourceC资源"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动 springboot web 项目，输入访问地址</p><p><a href="https://s2.loli.net/2024/12/20/MV3qmhBCnysbwKf.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/MV3qmhBCnysbwKf.png"></a></p><p>切面成功</p><p><a href="https://s2.loli.net/2024/12/20/I8EtHPARLXkBexl.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/I8EtHPARLXkBexl.png"></a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>城市地铁AFC系统</title>
      <link href="/posts/30078.html"/>
      <url>/posts/30078.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="城市地铁-AFC-系统简析"><a href="#城市地铁-AFC-系统简析" class="headerlink" title="城市地铁 AFC 系统简析"></a><strong>城市地铁 AFC 系统简析</strong></h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a><strong>一、概述</strong></h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a><strong>1.1 定义</strong></h3><p>AFC 系统的全称是 <code>Automatic Fare Collection System</code>（城市轨道交通自动售检票系统），是基于计算机、通信、网络、自动控制等技术，实现轨道交通售票、检票、计费、收费、统计、清分、管理等全过程的自动化系统。</p><h3 id="1-2-主要工作内容"><a href="#1-2-主要工作内容" class="headerlink" title="1.2 主要工作内容"></a><strong>1.2 主要工作内容</strong></h3><p>1、实现中央系统、车站系统和终端设备之间的数据传输和处理;</p><p>2、完成车 票制作、售票、检票、票务统计分析等工作;</p><p>3、及时、准确地进行客流、票务数据的收集、整理、汇总和分析;</p><p>4、实现轨道交通收益方得清分结算以及与关联系统等外部接口之间的清分结算，同时可通过银行或金融机构实现账务划拨。</p><h3 id="1-3-优点"><a href="#1-3-优点" class="headerlink" title="1.3 优点"></a><strong>1.3 优点</strong></h3><p>1）人性化</p><p>自动售检票系统为乘客设置符合人体工程学的售票机和检票机，方便乘客的购票和检票过程，同时提供符合地方特色的操作方式。</p><p>2）客流导向</p><p>自动售检票系统可方便地实现乘车路径和优惠票价管理，可以通过票价设定来为乘客提供导向性服务，实现柔性的乘客自主对出行路径或时段的选择，合理调整客流分布。</p><p>3）社会效益</p><p>一方面可通过自动售检票系统形成对区域交通客流状况的调整，对设备生活产生影响；另一方面可通过自动化的设施影响人们的行为模式，规范管理模式，客服票务工作中的舞弊行为。</p><p>4）提供信息支持</p><p>自动售检票系统能够提供客流量、票务收入等统计信息，为轨道交通的运营、规划和管理决策提供信息支持。</p><p>5）提高运行效率</p><p>轨道交通运营单位可根据自动售检票系统的客流信息及时调整运行组织，合理安排运能，提高运行效率。</p><p>6）强化安全管理</p><p>借助自动售检票系统付费区的封闭条件，可对乘客在车站内的行为进行管理。在紧急情况下，可通过闸机的禁止和方形措施疏导人群，实现安全管理。</p><p>7）提升形象</p><p>通过自动售检票系统，增加了轨道交通与乘客的操作交互性和乘客的主动性，良好的应用效果可以提升运营企业和所在地的形象。</p><h2 id="二、结构及功能"><a href="#二、结构及功能" class="headerlink" title="二、结构及功能"></a><strong>二、结构及功能</strong></h2><p>AFC 的结构按层次划分一般分为车票、车站终端设备（SLE）、车站计算机系统（SC）、线路中央计算机系统（LC/LCC）、清分系统（CC）五个层次。</p><p><a href="https://s2.loli.net/2024/12/20/uPUb5AzcRrkJVIK.jpg" title="清分、线路、车站、设备、票卡" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/uPUb5AzcRrkJVIK.jpg" alt="清分、线路、车站、设备、票卡"></a></p><p><a href="https://s2.loli.net/2024/12/20/uaciEpHKy71zCvo.jpg" title="整体结构图" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/uaciEpHKy71zCvo.jpg" alt="整体结构图"></a></p><h3 id="2-1-清分结算管理中心-ACC"><a href="#2-1-清分结算管理中心-ACC" class="headerlink" title="2.1 清分结算管理中心 (ACC)"></a><strong>2.1 清分结算管理中心 (ACC)</strong></h3><p>清分结算中心作为整个 AFC 系统的顶层，主要是负责对地铁线路之间、地铁与城市一卡通系统之间的清分结算，对不同运营实体 (或线路) 进行管理，制定业务规程和票务规则，制作发行票卡全面协调不同线路间的日常运营。</p><h3 id="2-2-线路中心-LC"><a href="#2-2-线路中心-LC" class="headerlink" title="2.2 线路中心 (LC)"></a><strong>2.2 线路中心 (LC)</strong></h3><p>线路中心管理线路内交易、客流、设备、票务等数据, 负责本线路系统的 AFC 收费数据、设备状态数据、客流量数据的采集，生成报表以及对账等。LC 将收集的本线路数据上传到清结算管理中心，接受清结算管理中心的命令与参数，并将其下发到各车站系统; 同时，LC 也管理和下发线路级的命令及系统参数，完成本线路的票务管理，具备票卡的库存管理和调配等功能。</p><p><a href="https://s2.loli.net/2024/12/20/eAZI2KjF8nPr9uX.jpg" title="LC 物理结构图" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/eAZI2KjF8nPr9uX.jpg" alt="LC 物理结构图"></a></p><h3 id="2-3-车站中心-SC"><a href="#2-3-车站中心-SC" class="headerlink" title="2.3 车站中心 (SC)"></a><strong>2.3 车站中心 (SC)</strong></h3><p>车站中心用来监控和配置车站本地设备，采集本地车站设备数据, 对车站的每一台设备实施监督、控制、参数化、数据采集和审计。SC 接收 LC 的指令和参数, 并下发到相应的设备。同时，SC 采集设备的交易、事件和审计数据，上传到 LC。</p><p><a href="https://s2.loli.net/2024/12/20/yGOxvIPpZaQroNf.jpg" title="车站中心" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/yGOxvIPpZaQroNf.jpg" alt="车站中心"></a></p><h3 id="2-4-AFC-车站终端设备-SLE"><a href="#2-4-AFC-车站终端设备-SLE" class="headerlink" title="2.4 AFC 车站终端设备 (SLE)"></a><strong>2.4 AFC 车站终端设备 (SLE)</strong></h3><p>AFC 设备层包括闸机、半自动售票机、自动售票机、自动充值机、银行圈存机、自助查询机、移动支付设备和其他设备等。</p><h3 id="2-4-1-自动检票机-AGM"><a href="#2-4-1-自动检票机-AGM" class="headerlink" title="2.4.1 自动检票机 (AGM)"></a><strong>2.4.1 自动检票机 (AGM)</strong></h3><p>自动检票机设置在付费区与非付费区的交界处，起着分割付费区与非付费区的作用，实现票卡有效性验证、检票、通行控制、车票回收等功能。</p><p><a href="https://s2.loli.net/2024/12/20/ZrGCOTpvwDV9Ys3.jpg" title="闸机AGM（也有称 GATE）" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/ZrGCOTpvwDV9Ys3.jpg" alt="闸机AGM（也有称 GATE）"></a></p><p>自动检票机主要由进站用乘客显示器、出站用乘客显示器、进站用读写器、出站用读写器、车票回收模块、站员操作部、通道显示部、闸门、主控单元、电源模块、人体检测部、外部接口等构成。</p><h3 id="2-4-2-半自动售票机-BOM"><a href="#2-4-2-半自动售票机-BOM" class="headerlink" title="2.4.2 半自动售票机 (BOM)"></a><strong>2.4.2 半自动售票机 (BOM)</strong></h3><p>设于车站服务中心，具有售票、补票和售补票功能，对于一卡通车票的处理可以按照一卡通系统的规则进行。</p><p>同时可发行各种类型的车票，兼有对车票进行查验和票据打印等功能，所能实现的功能可由系统参数灵活设置。</p><p><a href="https://s2.loli.net/2024/12/20/kxGnaP92EIjHbBN.jpg" title="半自动售票机 BOM" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/kxGnaP92EIjHbBN.jpg" alt="半自动售票机 BOM"></a></p><p>当与 SC 通信中断时，具有离线工作和数据保存能力。BOM 可以保存 30 天的运营数据。在通信恢复时，能将保存的交易数据及时上传给 SC。</p><p>我方提供半自动售票机上电启动后一分钟之内即可进入正常服务状态。</p><h3 id="2-4-3-自动查询机-TCM"><a href="#2-4-3-自动查询机-TCM" class="headerlink" title="2.4.3 自动查询机 (TCM)"></a><strong>2.4.3 自动查询机 (TCM)</strong></h3><p>自动查询机安装在地铁车站非付费区, 供在轨道交通内使用的地铁专用票及城市 “一卡通 “ 的自助查询验票及发布地铁通知信息等服务。自动查询机操作界面采用触摸屏操作方式，由 LC 下载乘客服务信息，可以回溯车票内记录的使用历史，包括票种、购票时间、进站时间、出站时间、进站地点、出站地点、扣费金额、剩余金额、有效期等。每笔交易信息应逐条显示。对有问题的交易记录应可以醒目的提示。自动查询机在进行车票查询时，能对车票的有效性进行检查，如有问题能显示原因，并提示乘客去半自动售票机处处理。</p><p><a href="https://s2.loli.net/2024/12/20/KT87wpZHt2QURFz.jpg" title="自动售票机 TCM (又称TVM)" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/KT87wpZHt2QURFz.jpg" alt="自动售票机 TCM (又称TVM)"></a></p><p>自动查询机具有如下功能:</p><ol><li>所有车票均可查询；可以自动播放预先录制的影音片断，可以向乘客介绍系统使. 用方法、显示公司通告及操作指南动画短片等信息；</li><li>可以回溯车票内记录的使用历史 (包括票种、购票时间、进站时间、出站时间、进站地点、出站地点、扣费金额、剩余金额、有效期等) ;</li><li>交易信息逐条显示;</li><li>问题的交易记录可以醒目的提示;</li><li>车票有效性进行检查，如有问题显示原因并提示。</li></ol><h3 id="2-5-票卡-Ticket）"><a href="#2-5-票卡-Ticket）" class="headerlink" title="2.5 票卡 (Ticket）"></a><strong>2.5 票卡 (Ticket）</strong></h3><p>五层架构体系的底层为票卡层，它是乘客所持的车费支付媒介，包括计次票、储值票、单程票、员工票和其他车票等。</p><h2 id="三、AFC-系统主要业务流程"><a href="#三、AFC-系统主要业务流程" class="headerlink" title="三、AFC 系统主要业务流程"></a><strong>三、AFC 系统主要业务流程</strong></h2><p>AFC 系统运营管理的业务流程是一体三面，面向信息流，物流和责任链，主要包括三大业务流程：</p><h3 id="（1）票务管理流程"><a href="#（1）票务管理流程" class="headerlink" title="（1）票务管理流程"></a>（1）票务管理流程</h3><p><a href="https://s2.loli.net/2024/12/20/L8ezRji1sp2ToYD.jpg" title="管理流程" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/L8ezRji1sp2ToYD.jpg" alt="管理流程"></a></p><h3 id="（2）收益管理流程"><a href="#（2）收益管理流程" class="headerlink" title="（2）收益管理流程"></a>（2）收益管理流程</h3><p><a href="https://s2.loli.net/2024/12/20/3ndgfcEh9bsSZHj.jpg" title="收益管理" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/3ndgfcEh9bsSZHj.jpg" alt="收益管理"></a></p><h3 id="（3）运营维护流程"><a href="#（3）运营维护流程" class="headerlink" title="（3）运营维护流程"></a>（3）运营维护流程</h3><p><a href="https://s2.loli.net/2024/12/20/5ea3zI61jmgrGfW.jpg" title="运营维护" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/5ea3zI61jmgrGfW.jpg" alt="运营维护"></a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 地铁系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 地铁系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试系列（八）| 消息队列</title>
      <link href="/posts/43028.html"/>
      <url>/posts/43028.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><blockquote><p>消息队列解决的核心场景：解构、异步、削峰</p></blockquote><h2 id="1-为什么使用MQ"><a href="#1-为什么使用MQ" class="headerlink" title="1.为什么使用MQ"></a>1.为什么使用MQ</h2><p>​    公司业务场景，核心：解耦、异步、削峰</p><h3 id="解耦："><a href="#解耦：" class="headerlink" title="解耦："></a>解耦：</h3><p>​    A系统发数据给到BCD系统，如果E系统需要接入？C系统不需要了？A系统的负责人就需要来回修改接口对接其他系统。</p><p><a href="https://s2.loli.net/2024/12/20/MJBsElgtxwnzc1i.png" title="解耦-1" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/MJBsElgtxwnzc1i.png" alt="解耦-1"></a></p><p>​    如果使用MQ，A系统产生一条数据，发送到MQ中，那个系统需要数据自己去MQ消费。如果新的系统需要数据，直接从MQ中消费；某个系统不需要数据的话，取消消费这个MQ即可。这样A系统不需要考虑谁发送数据给谁，不需要考虑是否调用成功、失败超时等问题。</p><p><a href="https://s2.loli.net/2024/12/20/xGc1uptaSZyEN3I.png" title="解耦-2" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/xGc1uptaSZyEN3I.png" alt="解耦-2"></a></p><p><strong>总结</strong>：通过一个MQ，Pub/Sub发布订阅消息模型，A系统就和其他系统彻底耦合了。</p><h4 id="项目应用："><a href="#项目应用：" class="headerlink" title="项目应用："></a>项目应用：</h4><p>​    车站系统通过控制命令下发给各个设备，其中车站的设备通常包含：闸机、半自动售票机、自动售票机、手持机等设备。如果按照常规的同步方式来对接不同的设备，这将使得系统冗余的代码很多，当车站增减一个设备就可能需要重新对接接口，造成系统耦合性很高，这样的效率不高且不优雅。所以当系统需要发送命令（生产一个数据），将数据放到MQ中，不需要知道那个设备收到成功或者失败，其中需要消费的设备自己去订阅并且获取相应的消息即可。这样就可以达到，系统下发设备控制命令，不同设备响应。</p><h3 id="异步："><a href="#异步：" class="headerlink" title="异步："></a>异步：</h3><p>​    A系统接收请求，需要本地入库，还需要BCD三个系统入库，本地入库（3ms），BCD（300ms+400ms+500ms），用户体验很差等待时间太长。业内请求需要做到 200ms 以内，对用户几乎无感。</p><p><a href="https://s2.loli.net/2024/12/20/MsQuDc6RBeNX9bA.png" title="异步-1" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/MsQuDc6RBeNX9bA.png" alt="异步-1"></a></p><p>​    使用MQ，A系统连续发送3条消息到消息队列，假如消耗5ms，请求花了 5 + 3 = 8ms ，对于用户来说就是点了一个按钮返回很快。</p><p><a href="https://s2.loli.net/2024/12/20/uXJyG6mpRbg1TPQ.png" title="异步-2" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/uXJyG6mpRbg1TPQ.png" alt="异步-2"></a></p><h3 id="削峰："><a href="#削峰：" class="headerlink" title="削峰："></a>削峰：</h3><p>​    每天一段时间，A系统风平浪静，每秒请求数量就50个。结果每次一到 12:00~13:00，每秒并发请求数量突然暴增到5k+条。但是系统是直接基于MySQL，大量请求涌入MySQL，每秒执行约5k条SQL，</p><p>​    一般情况下MySQL 每秒可抗 2k请求，5k的请求可能打死MySQL，导致无法使用。</p><p>​    一旦过了高峰，到了下午就到了低峰期，每秒请求数量 50 左右，对整个系统没有多少压力了。</p><p><a href="https://s2.loli.net/2024/12/20/g73yPmI2ANQtGTv.png" title="削峰-1" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/g73yPmI2ANQtGTv.png" alt="削峰-1"></a></p><p>如果使用MQ，每秒 5k 请求写入 MQ , A系统每秒最多处理 2k 个请求，因为 MySQL每秒最多请求 2k 个请求。A系统从MQ中慢慢拉取请求，每秒2k个请求，不超过自己每秒最大的请求数量即可。所以再高峰期，A系统不会挂掉。而MQ每秒进 5k ，出 2k，请求就会在高峰期积压可能多大十几万甚至百万的消息再 MQ中。</p><p><a href="https://s2.loli.net/2024/12/20/LR5tQUckPYBvDxO.png" title="削峰-2" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/LR5tQUckPYBvDxO.png" alt="削峰-2"></a></p><p>​    短暂的挤压后是可允许的，等到高峰期过后，每秒进入MQ的消息降低很多，但是系统依然按照 2k 的请求取消费，A系统很快的就会把挤压解决掉了。</p><h2 id="2-MQ的优缺点"><a href="#2-MQ的优缺点" class="headerlink" title="2.MQ的优缺点"></a>2.MQ的优缺点</h2><ul><li>降低系统可用性，引出如何保证消息高可用</li><li>系统复杂度提高，引出如何保证消息没有重复消费、处理消息丢失、保证消息传递顺序性</li><li>一致性问题：A系统处理完返回成功，BC处理完写库成功，D写库失败了，数据不能一致了。</li></ul><h2 id="3-不同MQ的区别（kafka、RabbitMQ、RocketMQ）"><a href="#3-不同MQ的区别（kafka、RabbitMQ、RocketMQ）" class="headerlink" title="3.不同MQ的区别（kafka、RabbitMQ、RocketMQ）"></a>3.不同MQ的区别（kafka、RabbitMQ、RocketMQ）</h2><table><thead><tr><th>特性</th><th>ActiveMQ</th><th>RabbitMQ</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td>单机吞吐量</td><td>万级，比 RocketMQ、Kafka 低一个数量级</td><td>万级别</td><td>10 万级，支撑高吞吐</td><td>10 万级，高吞吐，一般配合大数据类的系统来进行实时数据计算、日志采集等场景</td></tr><tr><td>topic 数量对吞吐量的影响</td><td></td><td></td><td><strong>topic 可以达到几百/几千的级别，吞吐量会有较小幅度的下降，这是 RocketMQ 的一大优势，在同等机器下，可以支撑大量的 topic</strong></td><td>topic 从几十到几百个时候，吞吐量会大幅度下降，在同等机器下，Kafka 尽量保证 topic 数量不要过多，如果要支撑大规模的 topic，需要增加更多的机器资源</td></tr><tr><td>时效性</td><td>ms 级</td><td><strong>微秒级，这是 RabbitMQ 的一大特点，延迟最低</strong></td><td>ms 级</td><td>延迟在 ms 级以内</td></tr><tr><td>可用性</td><td>高，基于主从架构实现高可用</td><td>基于主从架构实现高可用</td><td><strong>非常高，分布式架构</strong></td><td>非常高，分布式，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td></tr><tr><td>消息可靠性</td><td>有较低的概率丢失数据</td><td>基本不丢</td><td><strong>经过参数优化配置，可以做到 0 丢失</strong></td><td>同 RocketMQ</td></tr><tr><td>功能支持</td><td>MQ 领域的功能极其完备</td><td>基于 erlang 开发，并发能力很强，性能极好，延时很低</td><td>MQ 功能较为完善，还是分布式的，扩展性好</td><td>功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用</td></tr></tbody></table><ul><li>单机吞吐量：<strong>RocketMQ</strong> <strong>10万级</strong></li><li>时效性：<strong>RabbitMQ</strong> <strong>微秒级</strong></li><li>可用性：<strong>RocketMQ</strong> <strong>非常高，分布式架构</strong></li><li>消息可靠性：<strong>RocketMQ</strong> <strong>参数优化，可以做到0丢失</strong></li></ul><h2 id="4-保证MQ的高可用"><a href="#4-保证MQ的高可用" class="headerlink" title="4.保证MQ的高可用"></a>4.保证MQ的高可用</h2><h3 id="RabbitMQ高可性"><a href="#RabbitMQ高可性" class="headerlink" title="RabbitMQ高可性"></a>RabbitMQ高可性</h3><p>​    RabbitMQ是典型的基于主从（非分布式）做高可用。</p><p>​    三种模式：单机模式、普通集群模式、镜像集群模式</p><h4 id="单机模式："><a href="#单机模式：" class="headerlink" title="单机模式："></a>单机模式：</h4><p>​    Demo级别，没有生产使用这个</p><h4 id="普通集群模式：-lt-无高可用-gt"><a href="#普通集群模式：-lt-无高可用-gt" class="headerlink" title="普通集群模式：&lt;无高可用&gt;"></a>普通集群模式：&lt;无高可用&gt;</h4><p>​    多台机器启动多个RabbitMQ实例，每台机器启动一个。<strong>创建的queue，只会放在一个RabbitMQ实例上</strong>，  但每个实例同步 queue 元数据（queue的配置，可通过这个找到queue实例）。实际消费的时候连接到另一个实例，这个实例从queue所在的实例拉取数据。</p><p><a href="https://s2.loli.net/2024/12/20/WaQZHls739OMVhx.png" title="普通集群" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/WaQZHls739OMVhx.png" alt="普通集群"></a></p><p>​    <strong>没有做到分布式</strong>，只是普通的集群。导致消费者每次随机获取一个实例然后拉取数据，要么是固定连接 queue 的那个实例，前者有<strong>数据拉取的开销</strong>，后者有<strong>单实例性能开销</strong>。</p><p>​    这样只是<strong>提高了吞吐量</strong>，集群多个节点服务某个 queue 的读写操作。</p><h4 id="镜像集群模式：-lt-高可用-gt"><a href="#镜像集群模式：-lt-高可用-gt" class="headerlink" title="镜像集群模式：&lt;高可用&gt;"></a>镜像集群模式：&lt;高可用&gt;</h4><p>​    RabbitMQ 的高可用模式。和普通集群模型不一样，该模式下，创建的 queue，无论是元数据还是 queue 里的消息都会存在多个实例中，每个节点都有 queue 的<strong>完整镜像</strong>。每次写消息到 queue 时，都会自动<strong>消息同步</strong>到多个实例上 queue 。</p><p><a href="https://s2.loli.net/2024/12/20/ZjqFkB1QHfmIg8R.png" title="RabbitMQ-高可用-镜像集群" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/ZjqFkB1QHfmIg8R.png" alt="RabbitMQ-高可用-镜像集群"></a></p><h5 id="如何开启镜像集群模式？"><a href="#如何开启镜像集群模式？" class="headerlink" title="如何开启镜像集群模式？"></a><strong>如何开启镜像集群模式</strong>？</h5><p>​    在后台<strong>新增一个策略</strong>，这个策略就是镜像集群模式的策略。可以指定数据<strong>同步到所有</strong>节点，也可同步到<strong>指定数量</strong>的节点，再次创建queue 的时候，应用这个策略，就会自动同步到其他节点上去了。<strong>好处在于</strong>，你任何一个机器宕机了，没事，其他节点有完整的数据，别的消费者都可以到其他的节点消费。<strong>坏处是</strong>，第一，<strong>同步性能开销大</strong>，网络带宽压力和消耗很重。第二，不<strong>是分布式，没有扩展性</strong>，某个queue 负载很重，加机器，新增的机器包含这个 queue 的所有数据，并<strong>没有办法线性扩展</strong>。如果 queue 的数量很大，大到这个机器上的容量无法容纳该怎么办？</p><h3 id="Kafka-的高可用性"><a href="#Kafka-的高可用性" class="headerlink" title="Kafka 的高可用性"></a>Kafka 的高可用性</h3><p>​    Kafka 基本架构认识：由多个broker组成，每个broker是一个节点；你创建一个topic ，这个topic可以划分多个partition，每个 partition 可以存在不同的 broker 上，每个partition 就放一部分的数据。</p><p>​    天然的分布式消息队列，一个topic 的数据，<strong>分散到多个机器上，每个机器放一部分</strong>。</p><p>​    RabbitMQ 之类的并不是什么分布式消息队列，传统的消息队列，只不过提供了集群、HA的机制，无论如何操作，RabbitMQ 一个 queue 的数据都是放在一个节点里的，镜像集群模式下，也是每个节点都放 queue 的完整数据。</p><p>​    Kafka 0.8 之前没有 HA 机制，任何的 broker 挂了，那个 broker 上的 partition 就废了，就没有办法读写，无法保证高可用。</p><p>​    我们假如创建一个 topic ，指定了其 partition 数量是 3 个 ，分别在三台机器上。但是，如果第二台宕机了，会导致1/3的数据丢失，做不到高可用了。</p><p><a href="https://s2.loli.net/2024/12/20/UznQuRP8tSAhKCa.png" title="Kafka-高可用" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/UznQuRP8tSAhKCa.png" alt="Kafka-高可用"></a></p><p>Kafka 0.8 后提供了 HA 机制，就是 <strong>replica 副本机制</strong>。每个 partition 的数据都会同步到其他机器上，形成多个 replica 副本。所有 replica 中选举一个 leader 出来，那么生产者和消费者都跟这个 <strong>leader 打交道</strong>，其他的 replica 就是 follower (从属）。<br>写的时候，leader 负责将<strong>数据同步到其他的 follower</strong> 上，读的时候，直接读取 leader 上的数据。</p><h4 id="为什么只能读写leader"><a href="#为什么只能读写leader" class="headerlink" title="为什么只能读写leader?"></a>为什么只能读写leader?</h4><p>​    如果可以随意读取的每个 follower ，那么就要关系数据的一致性问题了，系统复杂度势必增加。Kafka 会将一个 partition 的所有 replica 分布在不同的机器中，可以提高容错性。</p><p><a href="https://s2.loli.net/2024/12/20/VhoSM2is9LQFeUE.png" title="broker" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/VhoSM2is9LQFeUE.png" alt="broker"></a></p><p>​    这就是所谓的<strong>高可用</strong>，因为如果某个 broker 宕机了，没事，那么 broker 上面的 partition 在其他机器上都有副本的。如果这个宕机的 broker 上面由某个 partition 的 leader ，那么此时会从 follower 中<strong>重新选举</strong>一个新的 leader 出来，继续读写这个 leader 即可。</p><p>​    <strong>写数据</strong>的时候，生产者就写 leader ,然后 leader 将数据落地到写本地磁盘，接着其他 follower 自己主动从 leader 来 pull 数据。一旦所有 follower 同步好数据，就会发送 ack 给 leader，leader 收到所有 follower 的 ack 之后，就会返回写成功消息给生产者（一种模式之一）。</p><p>​    <strong>消费的时候</strong>，只会从 leader 去读，但是只有当一个消费已经被所有 follower 都同步成功返回 ack 后，这个消息才会被消费者读到。 </p><h2 id="5-保证消息不被重复消费（消费队列保证幂等性）"><a href="#5-保证消息不被重复消费（消费队列保证幂等性）" class="headerlink" title="5.保证消息不被重复消费（消费队列保证幂等性）"></a>5.保证消息不被重复消费（消费队列保证幂等性）</h2><p><strong>大概说一说可能哪些重复消息的问题</strong></p><p>RabbitMQ、RocketMQ、Kafka 都可能出现消息重复消费的问题。</p><p>​    Kafka 实际上有个 <strong>offset</strong> 的概念，每个消息写进去，都有一个 offset ，代表<strong>消息的序号</strong>，然后 consumer 消费了数据之后，每隔一段时间（<strong>定时定期</strong>），会把自己消费过的消<strong>息的 offset 提交</strong>一下，表示 “我消费过来，下次我要重启，就让我继续从上次消费的 offset 来继续消费吧”。</p><p>​    如果生产重启系统，紧急情况直接 kill 进程，可能导致 consumer 由消息处理，但是没有来的及提交 offset 。重启之后少数消费会再次消费一次。</p><p>​    举个例子。</p><p>​    场景带入，数据 1/2/3 依次进入 Kafka，Kafka 会给这三条数据每条分配一个 offset ，代表这条数据的序号，我们就假设分配的 offset 依次是 152/ 153 /154 。消费从 Kafka 去消费的时候也是按照这个顺序。假如消费者消费了 offset= 153 这个数据，刚准备提交 offset 到 Zookeeper ，此时消费者进程被重启。此时消费过的数据 1/2 的offset 没有提交，Kafka 也就不知道你消费 offset = 153 这条数据。重启之后，消费者找 Kafka 说，哥们，你给我把上次我消费的的地方后面的数据继续传给我。由于没有提交 1/2 数据再次传过来，如果消费者没有去重的话，那么就会导致消费重复。</p><p>注意：新版本的 Kafka 已经将 <code>offset</code> 存储到 Zookeeper 转移到 <code>Kafka brokers</code>，并使用内部位移注意 <code>__consumer_offsets</code> 进行存储。</p><p><a href="https://s2.loli.net/2024/12/20/rqz6MyBsH1jE2UR.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/rqz6MyBsH1jE2UR.png"></a></p><p>结果就会导致数据 1/2 往数据插入2 次，那么数据就错了。重复消费不可怕，可怕没有考虑重复消费之后，<strong>怎么保证幂等性。</strong></p><p>​    举例说明。假如有个系统，消费一条消息就是往数据库插入一条数据，要是你消息重复两次，就插入了两条，数据就是错了。但是你消费到第二次的时候，<strong>判断是否消费过了</strong>，若是就直接丢了，这样就保证了一条数据了。</p><p>​    一条数据重复出现两次，数据库只有一条数据，这就保证了系统的幂等性。</p><p>​    幂等性：就是一个数据，或者一个请求，给你重复来多次，你的确保对应的数据是不会改变的，<strong>不能出错。</strong></p><h4 id="如何保证消息的幂等性？"><a href="#如何保证消息的幂等性？" class="headerlink" title="如何保证消息的幂等性？"></a>如何保证消息的幂等性？</h4><p>​    结合业务思考，思路：</p><ul><li><p>如果是写库，根据<strong>主键查一下</strong>，如果这个数据有了，就update </p></li><li><p><strong>写 Redis</strong>，每次都是 set ，天然幂等性 。当数据1 消费之后，存入Redis ，再次消费后将修改数据1的值</p></li><li><p>复杂一点，生产者发送每条消息数据的时候，里面假如一个<strong>全局的唯一id</strong>，类似订单id，然后消费之后，先根据这个 id 去比如 Redis 里去查，之前的消费过吗？如果没有消费过，你就处理，然后这个id写 Redis。如果消费，那就别处理，保重别重复处理相同的消息即可。</p></li><li><p>基于数据库的<strong>唯一键</strong>来保证重复数据不会重复插入多条。因为有唯一键约束，重复数据插入只会报错，不会导致数据库中出现脏数据。</p><p><a href="https://s2.loli.net/2024/12/20/y4BC9rMukdGE7cQ.png" title="幂等性" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/y4BC9rMukdGE7cQ.png" alt="幂等性"></a></p></li></ul><h2 id="6-保证消息的可靠性传输？保证消费不丢失"><a href="#6-保证消息的可靠性传输？保证消费不丢失" class="headerlink" title="6.保证消息的可靠性传输？保证消费不丢失"></a>6.保证消息的可靠性传输？保证消费不丢失</h2><p>​    MQ的基本原则，<strong>数据不能多一条，也不能少一条</strong>，不能多，就是上面说的 重复消费和幂等性的问题。不能少。就是数据别弄丢。</p><p>​    如果用MQ来传递非常核心的肖，如计费、扣费，就需要保证 MQ <strong>绝对不会把计费消息给弄丢</strong></p><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><p><a href="https://s2.loli.net/2024/12/20/b5TLjxft9I3dQs8.png" title="消息可靠性" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/b5TLjxft9I3dQs8.png" alt="消息可靠性"></a></p><h4 id="生产者弄丢了数据"><a href="#生产者弄丢了数据" class="headerlink" title="生产者弄丢了数据"></a>生产者弄丢了数据</h4><p>​    生产者将数据发送到 RabbitMQ ，可能在半路弄丢了，因为网络获取其他问题。</p><h5 id="事务机制–消耗性能："><a href="#事务机制–消耗性能：" class="headerlink" title="事务机制–消耗性能："></a>事务机制–消耗性能：</h5><p>​    选择 RabbitMQ 提供的<strong>事务功能</strong>，就是生产者<strong>发送数据之前</strong>开启 RabbitMQ事务 <code>channel.txSelect()</code> ，然后发送消息，如果消息没有成功被 RabbitMQ 接收，那么生产者会收到异常报错的消息，此时可以回滚事务 <code>channel.txRollback()</code>，然后重试发送消息；如果收到消息，那么就可以提交事务了 <code>channel.txCommit()</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 通过工厂创建连接</span>    connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取通道</span>    channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 开启事务</span>    channel<span class="token punctuation">.</span><span class="token function">txSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这里发送消息</span>    channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> routingKey<span class="token punctuation">,</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">.</span><span class="token constant">PERSISTENT_TEXT_PLAIN</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 模拟出现异常</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 提交事务</span>    channel<span class="token punctuation">.</span><span class="token function">txCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">TimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 捕捉异常，回滚事务</span>    channel<span class="token punctuation">.</span><span class="token function">txRollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问题是，RabbitMQ 事务机制，导致吞吐量下来，因为消耗性能。</p><h5 id="confirm-模式："><a href="#confirm-模式：" class="headerlink" title="confirm 模式："></a>confirm 模式：</h5><p>​    如果要保证 RabbitMQ 消息不丢，可以开启 <code>confirm</code> 模式，你每次些的<strong>消息都会分配一个唯一的id</strong>。<br>​    如果写入了 RabbitMQ 中，RabbitMQ 会给你回传一个 <code>ack</code> 消息，告诉你这个消息 ok 了。如果 RabbitMQ 没能处理这个消息，会回调你一个 <code>nack</code> 接口，告诉你这个消息接收失败了，你可以重试。而且你可以结合这个机制自己在<strong>内存里维护每个消息 id 状态</strong>，如果超过一定时间还没有接收这个消息的回调，那个可以重发。</p><p>​    事务机制和 <code>confirm</code> 机制最大不同在于，<strong>事务机制是同步的</strong>，你提交一个事务之后会<strong>阻塞</strong>，但是 <code>confirm</code> 机制是<strong>异步</strong>的，发送消息之后就可以发送下一个消息，然后那个消息 RabbitMQ 接收了之后会<strong>异步回调</strong>一个接口通知你这个消息接收到了。</p><p>​    所以生产者 <strong>避免丢失数据</strong>，都是用 <code>confirm</code> 机制的</p><blockquote><p>在 transaction 事务模式的channel 不能设置成 confirm 模式的，这两种不共存</p></blockquote><p>客户端实现生产者 <code>confirm</code> 三种方式：</p><ol><li><p><strong>普通 confirm 模式</strong>：每发送一条消息后，调用 <code>waitForConfirms()</code> 方法，等待服务器端 confirm，如果服务端返回 false 或者在一段时间内都没返回，客户端可以进行消息重发。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>exchangeName<span class="token punctuation">,</span> <span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>routingKey<span class="token punctuation">,</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">.</span><span class="token constant">PERSISTENT_TEXT_PLAIN</span><span class="token punctuation">,</span> <span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>msg_10B<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>channel<span class="token punctuation">.</span><span class="token function">waitForConfirms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 消息发送失败</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>批量 confirm 模式</strong>：每发送一批消息后，调用 <code>waitForConfirms()</code> 方法，等待服务端 confirm。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">confirmSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> batchCount<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>exchangeName<span class="token punctuation">,</span> <span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>routingKey<span class="token punctuation">,</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">.</span><span class="token constant">PERSISTENT_TEXT_PLAIN</span><span class="token punctuation">,</span> <span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>msg_10B<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>channel<span class="token punctuation">.</span><span class="token function">waitForConfirms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 消息发送失败</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>异步 confirm 模式</strong>：提供一个回调方法，服务端 confirm 了一条或者多条消息后客户端会回调这个方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SortedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> confirmSet <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedSortedSet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">confirmSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">addConfirmListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConfirmListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleAck</span><span class="token punctuation">(</span><span class="token keyword">long</span> deliveryTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> multiple<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>multiple<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            confirmSet<span class="token punctuation">.</span><span class="token function">headSet</span><span class="token punctuation">(</span>deliveryTag <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            confirmSet<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleNack</span><span class="token punctuation">(</span><span class="token keyword">long</span> deliveryTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> multiple<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Nack, SeqNo: "</span> <span class="token operator">+</span> deliveryTag <span class="token operator">+</span> <span class="token string">", multiple: "</span> <span class="token operator">+</span> multiple<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>multiple<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            confirmSet<span class="token punctuation">.</span><span class="token function">headSet</span><span class="token punctuation">(</span>deliveryTag <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            confirmSet<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> nextSeqNo <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">getNextPublishSeqNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>exchangeName<span class="token punctuation">,</span> <span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>routingKey<span class="token punctuation">,</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">.</span><span class="token constant">PERSISTENT_TEXT_PLAIN</span><span class="token punctuation">,</span> <span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>msg_10B<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    confirmSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nextSeqNo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="RabbitMQ-弄丢了数据"><a href="#RabbitMQ-弄丢了数据" class="headerlink" title="RabbitMQ 弄丢了数据"></a>RabbitMQ 弄丢了数据</h4><p><strong>开启 RabbitMQ的持久化</strong>，消息写入之后会持久化到磁盘，挂后恢复会<strong>自动读取之前存储的数据</strong>，一般数据不会丢。小概率情况，RabbitMQ还没有持久化，就挂了，<strong>可能导致少量数据丢失</strong>。</p><h5 id="设置持久化："><a href="#设置持久化：" class="headerlink" title="设置持久化："></a>设置持久化：</h5><ul><li><strong>创建 queue 时候设置为持久化</strong>。可以保证 RabbitMQ <strong>持久化 queue 的元数据</strong>，但是它是不会持久化 queue 里的数据的</li><li>第二个是发送消息的时候将消息的 <strong><code>deliveryMode</code> 设置为2</strong>。就是<strong>将消息设置为持久化的</strong>，此时RMQ 就会将消息持久化到磁盘上了。</li></ul><p>必须同时设置这个两个持久化才行，RMQ 哪怕挂了，再次重启，也会磁盘上重启恢复 queue，恢复这个 queue 里的数据。</p><p>注意，哪怕是开启持久化机制了，也有可能，在消息写到 RMQ中，还没有来的机持久化到磁盘上，结果不巧，此时的 RMQ 挂了，就会导致内存里的的一点点数据丢失。</p><p>所以，持久化可以跟生产者那边的 <code>confirm</code> 机制配合，只有消息被持久化到磁盘后，才会通知生产者 <code>ack</code> 了，哪怕 持久化到磁盘之前，RMQ 挂了，数据丢了，生产者收不到 <code>ack</code> ，自己也可以重发。</p><h4 id="消费者弄丢了数据：-lt-关闭自动-ack，声明队列，指定noAck-false-gt"><a href="#消费者弄丢了数据：-lt-关闭自动-ack，声明队列，指定noAck-false-gt" class="headerlink" title="消费者弄丢了数据：&lt;关闭自动 ack，声明队列，指定noAck = false&gt;"></a>消费者弄丢了数据：&lt;关闭自动 ack，声明队列，指定noAck = false&gt;</h4><p>RabbitMQ 如果丢失消息，主要是因为你消费的时候，刚消费，还没去处理，结果进程挂了。重启完后，RMQ认为你都消费了，这数据就丢了。</p><p>这时候的用RabbitMQ提供的 <code>ack</code> 机制。就是必须<strong>关闭RMQ自动 <code>ack</code><strong>，可以通过 api 来调用就行，然后每次再代码</strong>处理完后</strong>，再**主动的 <code>ack</code>**。这样没有处理的话，RMQ 就收不到 <code>ack</code>，RMQ 就会认为你没有处理完，这时候RMQ 会把消息分给别的消费者处理，消息就不会丢。 </p><blockquote><p>RMQ  为了保证消息可靠不丢失提供消息确认机制。消费者在声明队列时，可以指定noAck 参数，当noAck = false, RMQ 会等待消费者显示的发送 ack 信号后，才从内存（和磁盘，如果持久化）移除消息。否则消息一旦被消费者消费，RMQ 会立即删除它。</p></blockquote><p><a href="https://s2.loli.net/2024/12/20/FGJmvXY75HkIxyZ.png" title="RMQ-持久化" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/FGJmvXY75HkIxyZ.png" alt="RMQ-持久化"></a></p><h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><h4 id="消费端弄丢了数据"><a href="#消费端弄丢了数据" class="headerlink" title="消费端弄丢了数据"></a>消费端弄丢了数据</h4><p>唯一可能导致消费者弄丢数据的情况，就是说，你消费到了这个消息，然后消费者那边<strong>自动提交了 offset</strong>，让 Kafka 以为你已经消费好了这个消息，但其实你才刚准备处理这个消息，你还<strong>没处理，你自己就挂了</strong>，此时这条消息就丢咯。</p><p>这不是跟 RabbitMQ 差不多吗，大家都知道 Kafka 会自动提交 offset，那么只要<strong>关闭自动提交</strong> offset，在处理完之后自己手动提交 offset，就可以保证数据不会丢。但是此时确实还是<strong>可能会有重复消费</strong>，比如你刚处理完，还没提交 offset，结果自己挂了，此时肯定会重复消费一次，自己保证幂等性就好了。</p><p>生产环境碰到的一个问题，就是说我们的 Kafka 消费者消费到了数据之后是写到一个内存的 queue 里先缓冲一下，结果有的时候，你刚把消息写入内存 queue，然后消费者会自动提交 offset。然后此时我们重启了系统，就会导致内存 queue 里还没来得及处理的数据就丢失了。</p><h4 id="Kafka-弄丢了数据"><a href="#Kafka-弄丢了数据" class="headerlink" title="Kafka 弄丢了数据"></a>Kafka 弄丢了数据</h4><p>这块比较常见的一个场景，就是 Kafka <strong>某个 broker 宕机</strong>，然后重新选举 partition 的 leader。大家想想，要是此时其他的 <strong>follower 刚好还有些数据没有同步</strong>，结果此时 leader 挂了，然后选举某个 follower 成 leader 之后，不就少了一些数据？这就丢了一些数据啊。</p><p>生产环境也遇到过，我们也是，之前 Kafka 的 leader 机器宕机了，将 follower 切换为 leader 之后，就会发现说这个数据就丢了。</p><p>所以此时一般是要求起码设置如下 4 个参数：</p><ul><li>给 topic 设置 <code>replication.factor</code> 参数：这个值必须大于 1，要求每个 <strong>partition 必须有至少 2 个副本。</strong></li><li>在 Kafka 服务端设置 <code>min.insync.replicas</code> 参数：这个值必须大于 1，这个是要求一个 <strong>leader 至少感知到有至少一个 follower</strong> 还跟自己保持联系，没掉队，这样才能确保 leader 挂了还有一个 follower 吧。</li><li>在 producer 端设置 <code>acks=all</code> ：这个是要求每条数据，必须是<strong>写入所有 replica 之后，才能认为是写成功了</strong>。</li><li>在 producer 端设置 <code>retries=MAX</code> （很大很大很大的一个值，无限次重试的意思）：这个是<strong>要求一旦写入失败，就无限重试</strong>，卡在这里了。</li></ul><p>我们生产环境就是按照上述要求配置的，这样配置之后，至少在 Kafka broker 端就可以保证在 leader 所在 broker 发生故障，进行 leader 切换时，数据不会丢失。</p><h4 id="生产者会不会弄丢数据？"><a href="#生产者会不会弄丢数据？" class="headerlink" title="生产者会不会弄丢数据？"></a>生产者会不会弄丢数据？</h4><p>如果按照上述的思路设置了 <code>acks=all</code> ，一定不会丢，要求是，你的 leader 接收到消息，所有的 follower 都同步到了消息之后，才认为本次写成功了。如果没满足这个条件，生产者会自动不断的重试，重试无限次。</p><h2 id="7-保证消费顺序"><a href="#7-保证消费顺序" class="headerlink" title="7.保证消费顺序"></a>7.保证消费顺序</h2><p>我举个例子，我们以前做过一个 mysql <code>binlog</code> 同步的系统，压力还是非常大的，日同步数据要达到上亿，就是说数据从一个 mysql 库原封不动地同步到另一个 mysql 库里面去（mysql -&gt; mysql）。常见的一点在于说比如大数据 team，就需要同步一个 mysql 库过来，对公司的业务系统的数据做各种复杂的操作。</p><p>你在 mysql 里增删改一条数据，对应出来了增删改 3 条 <code>binlog</code> 日志，接着这三条 <code>binlog</code> 发送到 MQ 里面，再消费出来依次执行，起码得保证人家是按照顺序来的吧？不然本来是：增加、修改、删除；你愣是换了顺序给执行成删除、修改、增加，不全错了么。</p><p>本来这个数据同步过来，应该最后这个数据被删除了；结果你搞错了这个顺序，最后这个数据保留下来了，数据同步就出错了。</p><p>先看看顺序会错乱的俩场景：</p><ul><li><strong>RabbitMQ</strong>：一个 queue，多个 consumer。比如，生产者向 RabbitMQ 里发送了三条数据，顺序依次是 data1/data2/data3，压入的是 RabbitMQ 的一个内存队列。有三个消费者分别从 MQ 中消费这三条数据中的一条，结果消费者 2 先执行完操作，把 data2 存入数据库，然后是 data1/data3。这不明显乱了。</li></ul><p><a href="https://s2.loli.net/2024/12/20/iJCFHkzR7pA3XjQ.png" title="RMQ-消息顺序" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/iJCFHkzR7pA3XjQ.png" alt="RMQ-消息顺序"></a></p><ul><li><strong>Kafka</strong>：比如说我们建了一个 topic，有三个 partition。生产者在写的时候，其实可以指定一个 key，比如说我们指定了某个订单 id 作为 key，那么这个订单相关的数据，一定会被分发到同一个 partition 中去，而且这个 partition 中的数据一定是有顺序的。<br>消费者从 partition 中取出来数据的时候，也一定是有顺序的。到这里，顺序还是 ok 的，没有错乱。接着，我们在消费者里可能会搞<strong>多个线程来并发处理消息</strong>。因为如果消费者是单线程消费处理，而处理比较耗时的话，比如处理一条消息耗时几十 ms，那么 1 秒钟只能处理几十条消息，这吞吐量太低了。而多个线程并发跑的话，顺序可能就乱掉了。</li></ul><p><a href="https://s2.loli.net/2024/12/20/NWU3Eitf4jzJ8vr.png" title="Kafka-消息顺序" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/NWU3Eitf4jzJ8vr.png" alt="Kafka-消息顺序"></a></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="RabbitMQ-1"><a href="#RabbitMQ-1" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h4><p>拆分多个 queue，每个 queue 一个 consumer，就是多一些 queue 而已，确实是麻烦点；或者就一个 queue 但是对应一个 consumer，然后这个 consumer 内部用内存队列做排队，然后分发给底层不同的 worker 来处理。</p><p><a href="https://s2.loli.net/2024/12/20/jUswEhVe1XM2DoA.png" title="消息顺序" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/jUswEhVe1XM2DoA.png" alt="消息顺序"></a></p><h4 id="Kafka-1"><a href="#Kafka-1" class="headerlink" title="Kafka"></a>Kafka</h4><ul><li>一个 topic，一个 partition，一个 consumer，内部单线程消费，单线程吞吐量太低，一般不会用这个。</li><li>写 N 个内存 queue，具有相同 key 的数据都到同一个内存 queue；然后对于 N 个线程，每个线程分别消费一个内存 queue 即可，这样就能保证顺序性。</li></ul><p><a href="https://s2.loli.net/2024/12/20/xwb7rRE6Lm2ka1C.png" title="消息顺序" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/xwb7rRE6Lm2ka1C.png" alt="消息顺序"></a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试系列（七）| JVM常见命令</title>
      <link href="/posts/45688.html"/>
      <url>/posts/45688.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="JVM-常用命令介绍"><a href="#JVM-常用命令介绍" class="headerlink" title="JVM 常用命令介绍"></a>JVM 常用命令介绍</h2><pre class="line-numbers language-none"><code class="language-none">下面介绍一下<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>JVM</code> 中常用的调优、故障处理等工具。</p><ol><li><strong><em>jps</em></strong> ：虚拟机进程工具，全称是 **<em>JVM Process Status Tool</em>**，它的功能和 <code>Linux</code> 中的 <em><code>ps</code></em> 类似，可以列出正在运行的虚拟机进程，并显示虚拟机执行主类 <em><strong>Main Class</strong></em> 所在的本地虚拟机唯一<code>ID</code>，虽然功能比较单一，但是这个命令绝对是使用最高频的一个命令。</li><li>_<strong>jstat</strong>_：虚拟机统计信息工具，用于监视虚拟机各种运行状态的信息的命令行工具，它可以显示本地或者远程虚拟机进程中的类加载、内存、垃圾收集、即时编译等运行时数据。</li><li><strong><em>jinfo</em><strong>：</strong>Java</strong> 配置信息工具，全称是 _<strong>Configuration Info for Java</strong>_，它的作用是可以实时调整虚拟机各项参数。</li><li><strong>_jmap_：Java</strong> 内存映像工具，全称是 _<strong>Memory Map For Java</strong>_，它用于生成转储快照，用来排查内存占用情况</li><li><strong><em>jhat</em><strong>：虚拟机堆转储快照分析工具，全称是 _<strong>JVM Heap Analysis Tool</strong>_，这个指令通常和 <strong>jmap</strong> 一起搭配使用，</strong>jhat</strong> 内置了一个 <strong>HTTP/Web</strong> 服务器，生成转储快照后可以在浏览器中查看。不过，一般还是 <strong>jmap</strong> 命令使用的频率比较高。</li><li><strong>_jstack_：Java</strong> 堆栈跟踪工具，全称是 <strong><em>Stack Trace for Java</em></strong> ，顾名思义，这个命令用来追踪堆栈的使用情况，用于虚拟机当前时刻的线程快照，线程快照就是当前虚拟机内每一条正在执行的方法堆栈的集合。</li></ol><h2 id="常见的-JVM-调优参数有哪些？"><a href="#常见的-JVM-调优参数有哪些？" class="headerlink" title="常见的 JVM 调优参数有哪些？"></a>常见的 JVM 调优参数有哪些？</h2><table><thead><tr><th>命令参数</th><th>作用</th></tr></thead><tbody><tr><td>-Xms256m</td><td>初始化堆大小为 256m</td></tr><tr><td>-Xmx2g</td><td>最大内存为 2g</td></tr><tr><td>-Xmn50m</td><td>新生代的大小 50m</td></tr><tr><td>-XX:+PrintGCDetails</td><td>打印 gc 详细信息</td></tr><tr><td>-XX:+HeapDumpOnOutOfMemoryError</td><td>在发生<code>OutOfMemoryError</code> 错误时，来 <code>dump</code> 出堆快照</td></tr><tr><td>-XX:NewRatio=4</td><td>设置年轻的和老年代的内存比例为 1:4</td></tr><tr><td>-XX:SurvivorRatio=8</td><td>设置新生代<code>Eden</code> 和 <code>Survivor</code> 比例为 8:2</td></tr><tr><td>-XX:+UseSerialGC</td><td>新生代和老年代都用串行收集器<code>Serial + Serial Old</code></td></tr><tr><td>-XX:+UseParNewGC</td><td>指定使用<code>ParNew + Serial Old</code> 垃圾回收器组合</td></tr><tr><td>-XX:+UseParallelGC</td><td>新生代使用<code>Parallel Scavenge</code>，老年代使用 <code>Serial Old</code></td></tr><tr><td>-XX:+UseParallelOldGC</td><td>新生代<code>ParallelScavenge</code> + 老年代 <code>ParallelOld</code> 组合</td></tr><tr><td>-XX:+UseConcMarkSweepGC</td><td>新生代使用<code>ParNew</code>，老年代使用 <code>CMS</code></td></tr><tr><td>-XX:NewSize</td><td>新生代最小值</td></tr><tr><td>-XX:MaxNewSize</td><td>新生代最大值</td></tr><tr><td>-XX:MetaspaceSize</td><td>元空间初始化大小</td></tr><tr><td>-XX:MaxMetaspaceSize</td><td>元空间最大值</td></tr></tbody></table></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试系列（六）| 双亲委派模型</title>
      <link href="/posts/10871.html"/>
      <url>/posts/10871.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="什么是双亲委派模型？"><a href="#什么是双亲委派模型？" class="headerlink" title="什么是双亲委派模型？"></a>什么是双亲委派模型？</h2><p><strong>JVM</strong> 类加载默认使用的是<strong>双亲委派模型</strong>，那么什么是双亲委派模型呢？</p><p>这里我们需要先介绍一下三种类加载器：</p><ul><li><strong>启动类加载器</strong>：**<em>Bootstrap Class Loader</em><strong>，这个类加载器是 <strong>C++</strong> 实现的，它是 <strong>JVM</strong> 的一部分，这个类加载器负责加载存放在 <strong><em><JAVA_HOME>\lib</em></strong> 目录，启动类加载器无法被 <strong>Java</strong> 程序直接引用。这也就是说，</strong>JDK** 中的<strong>常用类的加载</strong>都是由启动类加载器来完成的。</li><li><strong>扩展类加载器</strong>：_<strong>Extension Class Loader</strong><em>，这个类加载器是 <strong>Java</strong> 实现的，它负责加载 **</em><JAVA_HOME>\lib\ext_** 目录。</li><li><strong>应用程序类加载器</strong>，_<strong>Application Class Loader</strong>_，这个类加载器是由 <strong><em>sum.misc.Launcher$AppClassLoader</em></strong> 来实现，它负责加载 <strong><em>ClassPath</em></strong> 上所有的<strong>类库</strong>，如果应用程序中没有定义自己的类加载器，默认使用就是这个类加载器。</li></ul><p>所以，我们的 <strong>Java</strong> 应用程序都是由这三种类加载器来相互配合完成的，当然，用户也可以自己定义类加载器，即 _<strong>User Class Loader</strong>_，这几个类加载器的模型如下</p><p><a href="https://s2.loli.net/2024/12/20/Gu1cUmBrb9sINDF.jpg" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/Gu1cUmBrb9sINDF.jpg"></a></p><p>上面这几类类加载器构成了不同的层次结构，当我们需要<strong>加载一个类</strong>时，子类加载器并不会马上去加载，而是依次去请求<strong>父类加载器</strong>加载，一直往上请求到最高类加载器：<strong>启动类加载器</strong>。当启动类加载器加载不了的时候，依次往下让<strong>子类加载器</strong>进行加载。这就是<strong>双亲委派模型</strong>。</p><h2 id="双亲委派模型的缺陷？"><a href="#双亲委派模型的缺陷？" class="headerlink" title="双亲委派模型的缺陷？"></a>双亲委派模型的缺陷？</h2><pre class="line-numbers language-none"><code class="language-none">在双亲委派模型中，子类加载器可以使用父类加载器已经加载的类，而父类加载器无法使用子类加载器已经加载的。这就导致了双亲委派模型并不能解决所有的类加载器问题。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Java</code> 提供了很多外部接口，这些接口统称为 _<strong>Service Provider Interface, SPI</strong>_，允许第三方实现这些接口，而这些接口却是 <strong>Java</strong> 核心类提供的，由 <strong>Bootstrap Class Loader</strong> 加载，而一般的扩展接口是由 <strong>Application Class Loader</strong> 加载的，<strong>Bootstrap Class Loader</strong> 是无法找到 <strong>SPI</strong> 的实现类的，因为它只加载 <strong>Java</strong> 的核心库。它也不能代理给 <strong>Application Class Loader</strong>，因为它是最顶层的类加载器。</p><h2 id="双亲委派机制的三次破坏"><a href="#双亲委派机制的三次破坏" class="headerlink" title="双亲委派机制的三次破坏"></a>双亲委派机制的三次破坏</h2><p>虽然双亲委派机制是 <code>Java</code> 强烈推荐给开发者们的类加载器的实现方式，但是并没有强制规定你必须就要这么实现，所以，它一样也存在被破坏的情况，实际上，历史上一共出现三次双亲委派机制被破坏的情况：</p><ul><li><p>双亲委派机制<strong>第一次被破坏</strong>发生在双亲委派机制出现之前，由于双亲委派机制 <strong>JDK 1.2</strong> 之后才引用的，但类加载的概念在 <strong>Java</strong> 刚出现的时候就有了，所以引用双亲委派机制之前，设计者们必须兼顾开发者们自定义的一些类加载器的代码，所以在 <strong>JDK 1.2</strong> 之后的 <strong>java.lang.ClassLoader</strong> 中添加了一个新的 <em><strong>findClass</strong>_ 方法，引导用户编写类加载器逻辑的时候<strong>重写</strong>这个 <strong>findClass</strong> 方法，而不是基于 _<strong>loadClass</strong></em> 编写。</p></li><li><p>双亲委派机制<strong>第二次被破坏</strong>是由于它自己模型导致的，由于它只能<strong>向上（基础）加载</strong>，越基础的类越由上层加载器加载。</p><ul><li><p>如果基础类型又想要调用用户的代码，该怎么办？</p><pre class="line-numbers language-none"><code class="language-none">这也就是我们上面那个问题所说的<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>SPI</code> 机制。那么 <strong>JDK</strong> 团队是如何做的呢？</p><pre><code>它们引用了一个 **线程上下文类加载器 (Thread Context ClassLoader)**，这个类加载器可以通过 **java.lang.Thread** 类的 **_setContextClassLoader_** 进行设置，如果创建时线程还未设置，它将会从父线程中继承，如果全局没有设置类加载器的话，这个 **ClassLoader** 就是默认的类加载器。这种行为虽然是一种犯规行为，但是 Java 代码中的 **JNDI、JDBC** 等都是使用这种方式来完成的。直到 **JDK 6** ，引用了 **_java.util.ServiceLoader_**，使用 **META-INF/services** + **责任链**的设计模式，才解决了 **SPI** 的这种加载机制。</code></pre></li></ul></li><li><p>双亲委派机制第<strong>三次被破坏</strong>是由于<strong>用户对程序的动态需求使热加载、热部署</strong>的引入所致。由于时代的变化，我们希望 Java 能像鼠标键盘一样实现热部署，<strong>即时加载（load class）</strong>，引入了 <code>OSGI</code>，<code>OSGI</code> 实现热部署的关键在于它自定义类加载器机制的实现，<code>OSGI</code> 中的每一个 _<strong>Bundle</strong>_ 也就是模块都有一个自己的类加载器。当需要更换 <strong>Bundle</strong> 时，就直接把 <strong>Bundle</strong> 连同类加载器一起替换掉就能够实现热加载。在 <code>OSGI</code> 环境下，类加载器不再遵从双亲委派机制，而是使用了一种更复杂的加载机制。</p></li></ul></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双亲委派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试系列（五）| JVM垃圾回收算法</title>
      <link href="/posts/10871.html"/>
      <url>/posts/10871.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="JVM-分代收集理论有哪些？"><a href="#JVM-分代收集理论有哪些？" class="headerlink" title="JVM 分代收集理论有哪些？"></a>JVM 分代收集理论有哪些？</h2><blockquote><p>强分代：新生代和老年代</p><p>弱分代：新生代和老年代</p><p>跨代引用：记忆集【有跨代（dirty）、无跨带（clean）】</p></blockquote><h3 id="分代收集"><a href="#分代收集" class="headerlink" title="分代收集"></a>分代收集</h3><ul><li><strong>强分代假说</strong>：强分代假说指的是 <code>JVM</code> 认为绝大多数对象的生存周期都是朝生夕灭的；</li><li><strong>弱分代假说</strong>：弱分代假说指的是只要熬过越多次垃圾收集过程的对象就越难以回收（看来对象也会长心眼）。</li></ul><pre class="line-numbers language-none"><code class="language-none">就是基于这两个假说理论，<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>JVM</code> 将<strong>堆区</strong>划分为不同的区域，再将需要回收的对象根据其<strong>熬过垃圾回收的次数</strong>分配到不同的区域中存储。</p><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>JVM</code> 根据这两条分代收集理论把<strong>堆区</strong>划分</p><ul><li><p>新生代 (<code>Young</code> <code>Generation</code>) ：每次垃圾收集时都发现有大批对象死去</p></li><li><p>老年代 (<code>Old</code> <code>Generation</code>)：剩下没有死去的对象会直接晋升到老年代中</p><h3 id="跨代引用"><a href="#跨代引用" class="headerlink" title="跨代引用"></a>跨代引用</h3></li></ul><pre class="line-numbers language-none"><code class="language-none">上面这两个假说<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>没有考虑对象的引用关系</strong>，而事实情况是，对象之间会存在引用关系，基于此又诞生了</p><ul><li><strong>跨代引用假说 (Intergeneration Reference Hypothesis)<strong>，跨代引用相比较同代引用来说仅占少数。正常来说存在相互引用的两个对象应该是</strong>同生共死</strong>的，不过也会存在特例。</li></ul><pre class="line-numbers language-none"><code class="language-none">如果一个新生代对象跨代引用了一个老年代的对象，那么垃圾回收的时候就不会回收这个新生代对象，更不会回收老年代对象，然后这个新生代对象熬过一次垃圾回收进入到老年代中，这时候跨代引用才会消除。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">根据跨代引用假说，我们不需要因为老年代中存在<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>少量跨代引用</strong>就去直接扫描<strong>整个老年代</strong>，也不用在老年代中维护一个列表记录有哪些跨代引用，实际上，可以直接在新生代中维护一个<strong>记忆集 (Remembered Set)<strong>，由这个记忆集把老年代划分称为</strong>若干小块</strong>，标识出老年代的哪一块会存在<strong>跨代引用</strong>。</p><p><a href="https://s2.loli.net/2024/12/20/dVqRNWhzC58eHQM.jpg" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/dVqRNWhzC58eHQM.jpg"></a></p><pre class="line-numbers language-none"><code class="language-none">从图中我们可以看到，记忆集中的每个元素分别对应内存中的一块<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>连续区域是否有跨代引用对象</strong>，如果有，该区域会被标记为 “脏的”（<code>dirty</code>），否则就是 “干净的”（<code>clean</code>）。这样在垃圾回收时，只需要扫描记忆集就可以简单地确定跨代引用的位置，是个典型的空间换时间的思路。</p><h2 id="JVM-中的垃圾回收算法？"><a href="#JVM-中的垃圾回收算法？" class="headerlink" title="JVM 中的垃圾回收算法？"></a>JVM 中的垃圾回收算法？</h2><blockquote><p>在聊具体的垃圾回收算法之前，需要明确一点，哪些对象需要被垃圾收集器进行回收？也就是说需要先判断哪些对象是 “垃圾”？<br>清除算法（内存碎片问题）、复制算法（空间浪费）、整理算法（整理出连续的可用内存）</p></blockquote><pre class="line-numbers language-none"><code class="language-none">判断的标准我在上面<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>如何判断对象已经死亡</strong>的问题中描述了，有两种方式，一种是<strong>引用计数法</strong>，这种判断标准就是给对象添加一个引用计数器，引用这个对象会使计数器的值 <strong>+ 1</strong>，引用失效后，计数器的值就会 <strong>-1</strong>。但是这种技术无法解决对象之间的<strong>循环引用问题</strong>。</p><p>还有一种方式是 <code>GC Roots</code>，<code>GC Roots</code> 这种方式是以 <code>Root</code> 根节点为核心，逐步向下搜索每个对象的引用，搜索走过的路径被称为引用链，如果搜索过后这个对象不存在引用链，那么这个对象就是无用对象，可以被回收。<code>GC Roots</code> 可以解决循环引用问题，所以一般 <code>JVM</code> 都采用的是这种方式。</p><p>解决循环引用代码描述：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> test<span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        b<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token class-name">B</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">A</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基于 <code>GC Roots</code> 的这种思想，发展出了很多垃圾回收算法，下面我们就来聊一聊这些算法。</p><h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记 - 清除算法"></a>标记 - 清除算法</h3><pre class="line-numbers language-none"><code class="language-none">标记 - 清除 (<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Mark-Sweep</code>) 这个算法可以说是最早最基础的算法了。</p><pre class="line-numbers language-none"><code class="language-none">标记 - 清除顾名思义分为两个阶段，即<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>标记</strong>和<strong>清除</strong>阶段：</p><ul><li>首先标记出所有需要回收的对象，在标记完成后，统一<strong>回收掉所有被标记</strong>的对象。</li><li>当然也可以标记存活的对象，回收未被标记的对象。这个标记的过程就是<strong>垃圾判定</strong>的过程。</li></ul><p>后续大部分垃圾回收算法都是基于标记 - 算法思想衍生的，只不过后续的算法弥补了标记 - 清除算法的缺点，那么它有什么<strong>缺点</strong>呢？主要有两个</p><ul><li><strong>执行效率不稳定</strong>：因为假如说堆中存在大量无用对象，而且大部分需要回收的情况下，这时必须进行大量的标记和清除，导致标记和清除这两个过程的执行效率随对象的数量增长而降低。</li><li><strong>内存碎片化</strong>：标记 - 清除算法会在堆区产生大量不连续的内存碎片。碎片太多会导致在分配大对象时没有足够的空间，不得不进行一次垃圾回收操作。</li></ul><p>标记算法的示意图如下</p><p><a href="https://s2.loli.net/2024/12/20/WcCTsNxHB2R5Lbo.jpg" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/WcCTsNxHB2R5Lbo.jpg"></a></p><h3 id="标记-复制算法"><a href="#标记-复制算法" class="headerlink" title="标记 - 复制算法"></a>标记 - 复制算法</h3><pre class="line-numbers language-none"><code class="language-none">由于标记 - 清除算法极易产生内存碎片，研究人员提出了标记 - 复制算法，标记 - 复制算法也可以简称为<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>复制算法</strong>，复制算法是一种<strong>半区复制</strong>，它会将内存大小划分为相等的两块，每次只使用其中的一块，用完一块再用另外一块，然后再把用过的一块进行清除。虽然解决了部分内存碎片的问题，但是复制算法也带来了新的问题，即<strong>复制开销</strong>，不过这种开销是可以降低的，如果内存中大多数对象是无用对象，那么就可以把少数的存活对象进行复制，再回收无用的对象。</p><pre class="line-numbers language-none"><code class="language-none">不过复制算法的缺陷也是显而易见的，那就是<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>内存空间缩小为原来的一半</strong>，<strong>空间浪费</strong>太明显。标记 - 复制算法示意图如下</p><p><a href="https://s2.loli.net/2024/12/20/XVRLqxNjO3JlwK8.jpg" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/XVRLqxNjO3JlwK8.jpg"></a></p><pre class="line-numbers language-none"><code class="language-none">现在<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Java</code> 虚拟机大多数都是用了这种算法来回收新生代，因为经过研究表明，新生代对象 <code>98%</code> 都熬不过第一轮收集，因此不需要按照 1 ：1 的比例来划分新生代的内存空间。</p><pre class="line-numbers language-none"><code class="language-none">基于此，研究人员提出了一种<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Appel</code> 式回收，<code>Appel</code> 式回收的具体做法是把新生代分为一块较大的 <em><code>Eden</code></em> 空间和两块 <em><code>Survivor</code></em> 空间，每次分配内存都只使用 <code>Eden</code> 和其中的一块 <code>Survivor</code> 空间，发生垃圾收集时，将 <code>Eden</code> 和 <code>Survivor</code> 中仍然存活的对象一次性复制到另外一块 <code>Survivor</code> 空间上，然后直接清理掉 <code>Eden</code> 和已使用过的 <code>Survivor</code> 空间。</p><pre class="line-numbers language-none"><code class="language-none">在主流的<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>HotSpot</code> 虚拟机中，默认的 <code>Eden</code> 和 <code>Survivor</code> 大小比例是 <code>8：1</code>，也就是每次新生代中可用内存空间为整个新生代容量的 <code>90%</code>，只有一个 <code>Survivor</code> 空间，所以会浪费掉 <code>10%</code> 的空间。这个 <code>8：1</code> 只是一个理论值，也就是说，不能保证每次都有不超过 <code>10%</code> 的对象存活，所以，当进行垃圾回收后如果 <code>Survivor</code> 容纳不了可存活的对象后，就需要其他内存空间来进行<strong>帮助</strong>，这种方式就叫做<strong>内存担保 (Handle Promotion)</strong> ，通常情况下，作为担保的是老年代。</p><h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记 - 整理算法"></a>标记 - 整理算法</h3><pre class="line-numbers language-none"><code class="language-none">标记 - 复制算法虽然解决了内存碎片问题，但是没有解决复制对象存在大量开销的问题。为了解决复制算法的缺陷，充分利用内存空间，提出了标记 - 整理算法。该算法标记阶段和标记 - 清除一样，但是在完成标记之后，它不是直接清理可回收对象，而是将存活对象都向一端移动，然后清理掉端边界以外的内存。具体过程如下图所示：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://s2.loli.net/2024/12/20/GILHZhe4BEJRvsr.jpg" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/GILHZhe4BEJRvsr.jpg"></a></p><h2 id="什么是记忆集，什么是卡表？记忆集和卡表有什么关系？"><a href="#什么是记忆集，什么是卡表？记忆集和卡表有什么关系？" class="headerlink" title="什么是记忆集，什么是卡表？记忆集和卡表有什么关系？"></a>什么是记忆集，什么是卡表？记忆集和卡表有什么关系？</h2><pre class="line-numbers language-none"><code class="language-none">为了解决跨代引用问题，提出了记忆集这个概念，记忆集是一个在新生代中使用的数据结构，它相当于是记录了一些<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>指针的集合</strong>，指向了老年代中哪些对象存在跨代引用。</p><pre class="line-numbers language-none"><code class="language-none">记忆集的实现有不同的粒度<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><strong>字长精度</strong>：每个记录精确到一个字长，机器字长就是处理器的寻址位数，比如常见的 32 位或者 64 位处理器，这个精度决定了机器访问物理内存地址的指针长度，字中包含跨代指针。</p></li><li><p><strong>对象精度</strong>：每个记录精确到一个对象，该对象里含有跨代指针。</p></li><li><p><strong>卡精度</strong>：每个记录精确到一块内存区域，区域内含有跨代指针。</p><p>其中卡精度是使用了卡表作为记忆集的实现，关于记忆集和卡表的关系，大家可以想象成是 HashMap 和 Map 的关系。</p></li></ul><h2 id="什么是卡页？"><a href="#什么是卡页？" class="headerlink" title="什么是卡页？"></a>什么是卡页？</h2><p>卡表其实就是一个字节数组</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token constant">CARD_TABLE</span><span class="token punctuation">[</span><span class="token keyword">this</span> address <span class="token operator">>></span> <span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">字节数组<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>CARD_TABLE</code> 的每一个元素都对应着内存区域中一块特定大小的内存块，这个内存块就是<strong>卡页</strong>，一般来说，卡页都是 2 的 N 次幂字节数，通过上面的代码我们可以知道，卡页一般是 2 的 9 次幂，这也是 <code>HotSpot</code> 中使用的卡页，即 512 字节。</p><pre class="line-numbers language-none"><code class="language-none">一个卡页的内存通常包含不止一个对象，只要卡页中有一个对象的字段存在跨代指针，那就将对应卡表的数组元素的值设置为 1，称之为这个元素变<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>脏</code>了，没有标示则为 0 。在垃圾收集时，只要筛选出卡表中变脏的元素，就能轻易得出哪些卡页内存块中包含跨代指针，然后把他们加入 <code>GC Roots</code> 进行扫描。</p><p>所以，卡页和卡表主要用来解决跨代引用问题的。</p><h2 id="什么是写屏障？写屏障带来的问题？"><a href="#什么是写屏障？写屏障带来的问题？" class="headerlink" title="什么是写屏障？写屏障带来的问题？"></a>什么是写屏障？写屏障带来的问题？</h2><h3 id="写屏障"><a href="#写屏障" class="headerlink" title="写屏障"></a>写屏障</h3><pre class="line-numbers language-none"><code class="language-none">如果有其他分代区域中对象引用了本区域的对象，那么其对应的卡表元素就会变脏，这个引用说的就是对象赋值，也就是说卡表元素会变脏发生在对象赋值的时候，那么如何在对象赋值的时候更新维护卡表呢？<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>HotSpot</code> 虚拟机中使用的是<strong>写屏障 (Write Barrier)</strong> 来维护卡表状态的，这个写屏障和我们内存屏障完全不同，希望读者不要搞混了。</p><pre class="line-numbers language-none"><code class="language-none">这个写屏障其实就是一个<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Aop</code> 切面，在引用对象进行赋值时会产生一个**环形通知 (Around)**，环形通知就是切面前后分别产生一个通知，因为这个又是写屏障，所以在赋值前的部分写屏障叫做写前屏障，在赋值后的则叫做写后屏障。</p><h3 id="写屏障会带来两个问题"><a href="#写屏障会带来两个问题" class="headerlink" title="写屏障会带来两个问题"></a>写屏障会带来两个问题</h3><h4 id="无条件写屏障带来的性能开销"><a href="#无条件写屏障带来的性能开销" class="headerlink" title="无条件写屏障带来的性能开销"></a><strong>无条件写屏障带来的性能开销</strong></h4><pre class="line-numbers language-none"><code class="language-none">每次对引用的更新，无论是否更新了老年代对新生代对象的引用，都会进行一次写屏障操作。显然，这会增加一些额外的开销。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">但是，扫描整个老年代相比较，这个开销就低得多了。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">不过，在高并发环境下，写屏障又带来了伪共享（<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>false sharing</code>）问题。</p><h4 id="高并发下伪共享带来的性能开销"><a href="#高并发下伪共享带来的性能开销" class="headerlink" title="高并发下伪共享带来的性能开销"></a><strong>高并发下伪共享带来的性能开销</strong></h4><pre class="line-numbers language-none"><code class="language-none">在高并发情况下，频繁的写屏障很容易发生伪共享（<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>false sharing</code>），从而带来性能开销。</p><pre class="line-numbers language-none"><code class="language-none">假设<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>CPU</code> 缓存行大小为 64 字节，由于一个卡表项占 1 个字节，这意味着，64 个卡表项将共享同一个缓存行。</p><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>HotSpot</code> 每个卡页为 512 字节，那么一个缓存行将对应 64 个卡页一共 <code>64*512 = 32KB</code>。</p><pre class="line-numbers language-none"><code class="language-none">如果不同线程对对象引用的更新操作，恰好位于同一个 32 KB 区域内，这将导致同时更新卡表的同一个缓存行，从而造成缓存行的写回、无效化或者同步操作，间接影响程序性能。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">一个简单的解决方案，就是不采用无条件的写屏障，而是先检查卡表标记，只有当该卡表项未被标记过才将其标记为脏的。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">这就是<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>JDK  7</code> 中引入的解决方法，引入了一个新的 JVM 参数 <code>-XX:+UseCondCardMark</code>，在执行写屏障之前，先简单的做一下判断。如果卡页已被标识过，则不再进行标识。</p><p>简单理解如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">CARD_TABLE</span> <span class="token punctuation">[</span><span class="token keyword">this</span> address <span class="token operator">>></span> <span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token constant">CARD_TABLE</span> <span class="token punctuation">[</span><span class="token keyword">this</span> address <span class="token operator">>></span> <span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">与原来的实现相比，只是简单的增加了一个判断操作。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">虽然开启<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-XX:+UseCondCardMark</code> 之后多了一些判断开销，但是却可以避免在高并发情况下可能发生的并发写卡表问题。</p><pre class="line-numbers language-none"><code class="language-none">通过减少并发写操作，进而避免出现伪共享问题（<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>false sharing</code>）。</p><h2 id="什么是三色标记法？三色标记法会造成哪些问题？"><a href="#什么是三色标记法？三色标记法会造成哪些问题？" class="headerlink" title="什么是三色标记法？三色标记法会造成哪些问题？"></a>什么是三色标记法？三色标记法会造成哪些问题？</h2><blockquote><p>白色：可回收、灰色：还未访问完毕、黑色：已访问</p></blockquote><h3 id="三色标记法"><a href="#三色标记法" class="headerlink" title="三色标记法"></a>三色标记法</h3><pre class="line-numbers language-none"><code class="language-none">根据可达性算法的分析可知，如果要找出存活对象，需要从<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>GC Roots</code> 开始遍历，然后搜索每个对象是否可达，如果对象可达则为存活对象，在 GC Roots 的搜索过程中，按照<strong>对象和其引用是否被访问过</strong>这个条件会分成下面三种颜色：</p><ul><li><strong>白色</strong>：白色表示 <code>GC Roots</code> 的遍历过程中没有被访问过的对象，出现白色显然在可达性分析刚刚开始的阶段，这个时候所有对象都是白色的，如果在分析结束的阶段，仍然是白色的对象，那么代表不可达，可以<strong>进行回收</strong>。</li><li><strong>灰色</strong>：灰色表示对象已经<strong>被访问过，</strong>但是这个对象的引用还<strong>没有访问完毕</strong>。</li><li><strong>黑色</strong>：黑色表示此对象已经被访问过了，而且这个对象的引用也已经被访问了。</li></ul><blockquote><p>注：如果标记结束后对象仍为白色，意味着已经 “找不到” 该对象在哪了，不可能会再被重新引用。</p></blockquote><pre class="line-numbers language-none"><code class="language-none">现代的垃圾回收器几乎都借鉴了三色标记的算法思想，尽管实现的方式不尽相同：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>白色 / 黑色集合一般都不会出现（但是有其他体现颜色的地方）</li><li>灰色集合可以通过<strong>栈 / 队列 / 缓存日志</strong>等方式进行实现、遍历方式可以是广度 / 深度遍历等等。</li></ul><h3 id="造成问题"><a href="#造成问题" class="headerlink" title="造成问题"></a>造成问题</h3><pre class="line-numbers language-none"><code class="language-none">三色标记法会造成<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>两种问题</strong>，这两种问题所出现的环境都是由于【<strong>用户环境】和【收集器并行工作】造成的</strong> 。</p><pre class="line-numbers language-none"><code class="language-none">当用户线程正在修改引用关系，此时收集器在回收引用关系，此时就会造成把原本已经消亡的对象标记为存活，如果出现这种状况的话，问题不大，下次再让收集器重新收集一波就完了，但是还有一种情况是把存活的对象标记为死亡，这种状况就会造成不可预知的后果。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">针对上面这两种对象消失问题，业界有两种<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>处理方式</strong>，</p><ul><li><strong>增量更新 (Incremental Update)</strong> ，</li><li>**原始快照 (Snapshot At The Beginning, SATB)**。</li></ul><h2 id="请你介绍一波垃圾收集器"><a href="#请你介绍一波垃圾收集器" class="headerlink" title="请你介绍一波垃圾收集器"></a>请你介绍一波垃圾收集器</h2><pre class="line-numbers language-none"><code class="language-none">垃圾收集器是面试的常考，也是必考点，只要涉及到<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>JVM</code> 的相关问题，都会围绕着垃圾收集器来做一波展开，所以，有必要了解一下这些垃圾收集器。</p><pre class="line-numbers language-none"><code class="language-none">垃圾收集器有很多，不同商家、不同版本的 JVM 所提供的垃圾收集器可能会有很大差别，我们主要介绍<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>HotSpot</code> 虚拟机中的垃圾收集器。</p><pre class="line-numbers language-none"><code class="language-none">垃圾收集器是垃圾回收算法的具体实现，我们上面提到过，垃圾回收算法有<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>标记 - 清除算法</strong>、<strong>标记 - 复制</strong>、<strong>标记 - 整理</strong>，所以对应的垃圾收集器也有不同的实现方式。</p><pre class="line-numbers language-none"><code class="language-none">我们知道，<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>HotSpot</code> 虚拟机中的垃圾收集都是分代回收的，所以根据不同的分代，可以把垃圾收集器分为</p><ul><li>新生代收集器：<code>Serial、ParNew、Parallel Scavenge</code></li><li>老年代收集器：<code>Serial Old、Parallel Old、CMS</code></li><li>整堆收集器：<code>G1</code></li></ul><h3 id="Serial-收集器（新生-复制算法-单线程）"><a href="#Serial-收集器（新生-复制算法-单线程）" class="headerlink" title="Serial 收集器（新生|复制算法|单线程）"></a>Serial 收集器（新生|复制算法|单线程）</h3><p><code>Serial</code> 收集器是一种<strong>新生代的垃圾收集器</strong>，它是一个<strong>单线程</strong>工作的收集器，使用<strong>复制算法</strong>来进行回收，单线程工作不是说这个垃圾收集器只有一个，而是说这个收集器在工作时，必须暂停其他所有工作线程，这种暴力的暂停方式就是 **<code>Stop The World</code>**，Serial 就好像是寡头垄断一样，只要它一发话，其他所有的小弟（线程）都得给它让路。<code>Serial</code> 收集器的示意图如下：</p><p><a href="https://s2.loli.net/2024/12/20/XMh2GiZEJH4sRau.jpg" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/XMh2GiZEJH4sRau.jpg"></a></p><pre class="line-numbers language-none"><code class="language-none">虽然<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Serial</code> 有 <code>STW</code> 这种显而易见的缺点，不过，从其他角度来看，<code>Serial</code> 还是很讨喜的，它还有着优于其他收集器的地方，那就是简单而高效，对于内存资源首先的环境，它是所有收集器中额外内存消耗最小的，对于单核处理器或者处理器核心较少的环境来说，<code>Serial</code> 收集器由于没有线程交互开销，所以 <code>Serial</code> 专心做垃圾回收效率比较高。</p><h3 id="SefePoint-全局安全点"><a href="#SefePoint-全局安全点" class="headerlink" title="SefePoint 全局安全点"></a>SefePoint 全局安全点</h3><pre class="line-numbers language-none"><code class="language-none">它就是代码中的一段特殊的位置，在所有用户线程到达<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>SafePoint</code> 之后，用户线程挂起，GC 线程会进行清理工作。</p><h3 id="ParNew-收集器（新生-复制算法-多线程）"><a href="#ParNew-收集器（新生-复制算法-多线程）" class="headerlink" title="ParNew 收集器（新生|复制算法|多线程）"></a>ParNew 收集器（新生|复制算法|多线程）</h3><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>ParNew</code> 是 <code>Serial</code> 的多线程版本，除了同时使用多条线程外，其他参数和机制（<strong>STW、回收策略、对象分配规则</strong>）都和 <code>Serial</code> 完全一致，<code>ParNew</code> 收集器的示意图如下：</p><p><a href="https://s2.loli.net/2024/12/20/XVIwbtksjyq9EKd.jpg" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/XVIwbtksjyq9EKd.jpg"></a></p><pre class="line-numbers language-none"><code class="language-none">虽然<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>ParNew</code> 使用了多条线程进行垃圾回收</p><ul><li>单线程环境下它绝对不会比 <code>Serial</code> 收集效率更高，因为多线程存在线程交互的开销</li><li>CPU<code> 核数的增加，</code>ParNew<code>的处理效率会比</code>Serial` 更高效。</li></ul><h3 id="Parallel-Scavenge-收集器（新生-复制算法-控制吞吐）"><a href="#Parallel-Scavenge-收集器（新生-复制算法-控制吞吐）" class="headerlink" title="Parallel Scavenge 收集器（新生|复制算法|控制吞吐）"></a>Parallel Scavenge 收集器（新生|复制算法|控制吞吐）</h3><p><code>Parallel Scavenge</code> 收集器也是一款新生代收集器，它同样是基于标记 - 复制算法实现的，而且它也能够<strong>并行收集</strong>，这么看来，表面上 <code>Parallel Scavenge</code> 与 <code>ParNew</code> 非常相似，那么它们之间有什么区别呢？</p><p><code>Parallel Scavenge</code> 的关注点主要在<strong>达到一个可控制的吞吐量上面</strong>。吞吐量就是处理器用于运行用户代码的时间与处理器总消耗时间的比。也就是</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545539.jpeg" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545539.jpeg"></a></p><p>这里给大家举一个吞吐量的例子，如果执行用户代码的时间 + 运行垃圾收集的时间总共耗费了 100 分钟，其中垃圾收集耗费掉了 1 分钟，那么吞吐量就是 99%。停顿时间越短就越适合需要与用户交互或需要保证服务响应质量，良好的响应速度可以提升用户体验，而高吞吐量可以最高效率利用处理器资源。</p><h3 id="Serial-Old-收集器（老年-复制算法-单线程）"><a href="#Serial-Old-收集器（老年-复制算法-单线程）" class="headerlink" title="Serial Old 收集器（老年|复制算法|单线程）"></a>Serial Old 收集器（老年|复制算法|单线程）</h3><pre class="line-numbers language-none"><code class="language-none">前面介绍了一下<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Serial</code>，我们知道它是一个新生代的垃圾收集，使用了标记 - 复制算法。而这个 <code>Serial Old</code> 收集器却是 Serial 的老年版本，它同样也是一个单线程收集器，使用的是<strong>标记 - 整理</strong>算法。</p><p>Serial Old 收集器有两种用途：</p><ul><li>一种是在 <code>JDK 5</code> 和之前的版本与 <code>Parallel Scavenge</code> 收集器搭配使用，</li><li>另外一种用法就是作为 <code>CMS</code> 收集器的备选，<code>CMS</code> 垃圾收集器我们下面说，<code>Serial Old</code> 的收集流程如下</li></ul><p><a href="https://s2.loli.net/2024/12/20/BlE1N9ztDf3TO7M.jpg" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/BlE1N9ztDf3TO7M.jpg"></a></p><h3 id="Parallel-Old-收集器（老年-复制算法-多线程）"><a href="#Parallel-Old-收集器（老年-复制算法-多线程）" class="headerlink" title="Parallel Old 收集器（老年|复制算法|多线程）"></a>Parallel Old 收集器（老年|复制算法|多线程）</h3><pre class="line-numbers language-none"><code class="language-none">前面我们介绍了<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Parallel Scavenge</code> 收集器，现在来介绍一下 <code>Parallel Old</code> 收集器，它是 <code>Parallel Scavenge</code> 的老年版本，支持多线程并发收集，基于标记 - 整理算法实现，<code>JDK 6</code> 之后出现，吞吐量优先可以考虑 <code>Parallel Scavenge + Parallel Old</code> 的搭配</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545344.jpeg" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545344.jpeg"></a></p><h3 id="CMS-收集器-清除算法-四个步骤-JDK9不再推荐默认"><a href="#CMS-收集器-清除算法-四个步骤-JDK9不再推荐默认" class="headerlink" title="CMS 收集器(清除算法|四个步骤|JDK9不再推荐默认)"></a>CMS 收集器(清除算法|四个步骤|JDK9不再推荐默认)</h3><blockquote><p>三次标记+1次清除</p><p>问题：资源敏感、浮动垃圾、空间碎片</p></blockquote><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>CMS</code>收集器的主要目标是获取<strong>最短的回收停顿时间</strong>，它的全称是【 _<strong>Concurrent Mark Sweep</strong>_】，从这个名字就可以知道，这个收集器是基于标记 - 清除算法实现的，而且支持并发收集，它的运行过程要比上面我们提到的收集器复杂一些，它的工作流程如下：</p><ul><li>初始标记（<code>CMS initial mark</code>）：**<em>Stop The World</em>**，初始标记只是标记一下和 <code>GC Roots</code> 直接关联到的对象，速度较快；</li><li>并发标记（<code>CMS concurrent mark</code>）: **<em>Stop The World</em>**，从 <code>GC Roots</code> 的直接关联对象开始遍历整个对象图的过程。这个过程时间比较长但是不需要停顿用户线程，也就是说与垃圾收集线程一起并发运行</li><li>重新标记（<code>CMS remark</code>）：并发标记的过程中，可能会有错标或者漏标的情况，此时就需要在重新标记一下</li><li>并发清除（<code>CMS concurrent sweep</code>）：清理掉标记阶段中判断已经死亡的对象</li></ul><pre class="line-numbers language-none"><code class="language-none">CMS 的收集过程如下<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545859.jpeg" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545859.jpeg"></a></p><p><code>CMS</code> 是一款非常优秀的垃圾收集器，但是没有任何收集器能够做到完美的程度，<code>CMS</code> 也是一样，<code>CMS</code> 至少有<strong>三个缺点</strong>：</p><ul><li><p><code>CMS</code> 对处理器资源非常敏感，在并发阶段，虽然不会造成用户线程停顿，但是却会因为<strong>占用一部分线程</strong>而导致<strong>应用程序变慢</strong>，降低总吞吐量。</p></li><li><p><code>CMS</code> 无法处理<strong>浮动垃圾</strong>，有可能出现 <strong><em>Concurrent Mode Failure</em></strong> 失败进而导致另一次完全 <strong><em>Stop The World</em></strong> 的 <strong><em>Full GC</em></strong> 产生。</p><blockquote><p>什么是浮动垃圾呢？</p><pre class="line-numbers language-none"><code class="language-none">由于<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>并发标记和并发清理</strong>阶段，用户线程仍在继续运行，所以程序自然而然就会伴随着新的垃圾不断出现，而且这一部分垃圾出现在<strong>标记结束</strong>之后，<code>CMS</code> 无法处理这些垃圾，所以只能等到<strong>下一次垃圾回收</strong>时在进行清理。这一部分垃圾就被称为浮动垃圾。</p></blockquote></li><li><p><code>CMS</code> 最后一个缺点是并发 - 清除的通病，也就是会有大量的<strong>空间碎片</strong>出现，这将会给分配大对象带来困难。</p></li></ul><h3 id="Garbage-First-收集器（回收集）"><a href="#Garbage-First-收集器（回收集）" class="headerlink" title="Garbage First 收集器（回收集）"></a>Garbage First 收集器（回收集）</h3><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Garbage First</code> 又被称为 <strong>G1</strong> 收集器，它的出现意味着垃圾收集器走过了一个里程碑，为什么说它是里程碑呢？</p><pre class="line-numbers language-none"><code class="language-none">因为<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>G1</code> 这个收集器是一种<strong>面向局部</strong>的垃圾收集器，<code>HotSpot</code> 团队开发这个垃圾收集器为了让它<strong>替换掉 CMS 收集器</strong>。</p><pre class="line-numbers language-none"><code class="language-none">所以到后来，<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>JDK 9</strong> 发布后，☑️<strong>G1</strong> 取代【 <strong>Parallel Scavenge + Parallel Old</strong> 】组合，成为<strong>服务端默认</strong>的垃圾收集器，而 <strong>CMS 则不再推荐使用</strong>。</p><pre class="line-numbers language-none"><code class="language-none">之前的垃圾收集器存在回收区域的局限性，因为之前这些垃圾收集器的目标范围要么是整个新生代、要么是整个老年代，要么是整个<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Java</code> 堆（<code>Full GC</code>），而 <code>G1</code> 跳出了这个框架，它可以面向堆内存的任何部分来组成**回收集 (Collection Set，CSet)**，衡量垃圾收集的不再是哪个分代，这就是 <code>G1</code> 的 <em><code>Mixed GC</code></em> 模式。</p><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>G1</code> 是基于 <code>Region</code> 来进行回收的，<code>Region</code> 就是<strong>堆内存中任意的布局</strong>，每一块 <code>Region</code> 都可以根据需要<strong>扮演</strong> 【<code>Eden</code> 空间、<code>Survivor</code> 空间或者老年代空间】，收集器能够对不同的 <code>Region</code> 角色采用<strong>不同的策略</strong>来进行处理。</p><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Region</code> 中还有一块<strong>特殊的区域</strong>，这块区域就是 <em><code>Humongous</code></em> 区域，它是专门用来存<strong>储大对象</strong>的。</p><ul><li>占<code>Region</code>容量一半对象：<code>G1</code> 认为只要大小超过了 <code>Region</code> <strong>容量一半</strong>的对象即可判定为<strong>大对象</strong>。</li><li>超<code>Region</code>容量对象：如果超过了 <code>Region</code> 容量的大对象，将会存储在连续的 <code>Humongous Region</code> 中，<code>G1</code> 大多数行为都会把 <code>Humongous</code> <code>Region</code> 作为<strong>老年代</strong>来看待。</li></ul><pre class="line-numbers language-none"><code class="language-none">G1 保留了<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>新生代</strong>（<code>Eden Suvivor</code>）和<strong>老年代</strong>的概念，但是新生代和老年代不再是固定的了。它们都是一系列区域的动态集合。</p><pre class="line-numbers language-none"><code class="language-none">G1 收集器的运作过程可以分为以下<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>四步</strong>：</p><ol><li>初始标记：这个步骤也仅仅是标记一下 <code>GC Roots</code> 能够<strong>直接关联到的对象</strong>；并修改 <code>TAMS</code> 指针的值（每一个 <code>Region</code> 都有两个 <code>RAMS</code> 指针），使得下一阶段用户并发运行时，能够在可用的 <code>Region</code> 中分配对象，这个阶段需要<strong>暂停用户线程</strong>，但是时间很短。这个停顿是借用 <code>Minor</code> <code>GC</code> 的时候完成的，所以可以忽略不计。</li><li>并发标记：从 <code>GC Root</code> 开始对堆中对象进行<strong>可达性分析</strong>，递归扫描整个堆中的对象图，找出要回收的对象。当对象图扫描完成后，重新处理 <code>SATB</code> 记录下的在并发时有引用的对象；</li><li>最终标记：对用户线程做一个<strong>短暂的暂停</strong>，用于处理并发阶段结束后遗留下来的少量 <code>_SATB_</code> 记录（一种<strong>原始快照</strong>，用来记录并发标记中某些对象）</li><li>筛选回收：负责更新 <code>Region</code> 的<strong>统计数据</strong>，对各个 <code>Region</code> 的<strong>回收价值</strong>和<strong>成本</strong>进行排序，根据用户所期望的停顿时间来<strong>制定回收计划</strong>，可以自由选择多个 <code>Region</code> 构成回收集，然后把决定要回收的那一部分 <code>Region</code> 存活对象复制到空的 <code>Region</code> 中，再清理掉整个旧 <code>Region</code> 的全部空间。这里的操作设计对象的移动，所以必须要<strong>暂停用户线程</strong>，由多条收集器线程<strong>并行收集</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">从上面这几个步骤可以看出，除了并发标记外，其余三个阶段都需要暂停用户线程，所以，这个 G1 收集器并非追求<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>低延迟</strong>，官方给出的设计目标是<strong>在延迟可控的情况下尽可能的提高吞吐量</strong>，担任全功能收集器的重任。</p><p>下面是 G1 回收的示意图</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545455.jpeg" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545455.jpeg"></a></p><p><code>G1</code> 收集器同样也有缺点和问题：</p><ul><li>第一个问题就是 <code>Region</code> 中存在<strong>跨代</strong>引用的问题，我们之前知道可以用记忆集来解决跨代引用问题，不过 <code>Region</code> 中的跨代引用要复杂很多；</li><li>第二个问题就是如何保证<strong>收集线程与用户线程互不干扰</strong>的运行？<code>CMS</code> 使用的是增量更新算法，<code>G1</code> 使用的是原始快照（<code>SATB</code>），<code>G1</code> 为 <code>Region</code> 分配了两块 <code>TAMS</code> 指针，把 <code>Region</code> 中的一部分空间划分出来用于并发回收过程中的新对象分配，并发回收时新分配的对象地址都必须在这两个指针位置以上。如果内存回收速度赶不上内存分配速度，<code>G1</code> 收集器也要冻结用户线程执行，导致 <code>Full</code> <code>GC</code> 而产生长时间的 <code>STW</code>。</li><li>第三个问题是<strong>无法建立可预测的停顿模型。</strong></li></ul></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试系列（四）| 虚拟机JVM</title>
      <link href="/posts/10871.html"/>
      <url>/posts/10871.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="JVM-的主要作用是什么？"><a href="#JVM-的主要作用是什么？" class="headerlink" title="JVM 的主要作用是什么？"></a>JVM 的主要作用是什么？</h2><p><code>JVM</code> 就是 <code>Java Virtual Machine</code>（<code>Java</code> 虚拟机）的缩写，<code>JVM</code> 屏蔽了与具体操作系统平台相关的信息，使 <code>Java</code> 程序只需生成在 <code>Java</code> 虚拟机上运行的目标代码 （字节码），就可以在不同的平台上运行。</p><h4 id="据验证"><a href="#据验证" class="headerlink" title="据验证"></a><strong>据验证</strong></h4><h2 id="Java-的内存区域？"><a href="#Java-的内存区域？" class="headerlink" title="Java 的内存区域？"></a>Java 的内存区域？</h2><p><code>JVM</code> 在执行 <code>Java</code> 程序的过程中会把它管理的内存分为若干个不同的区域，这些组成部分有些是线程私有的，有些则是线程共享的，Java 内存区域也叫做运行时数据区，它的具体划分如下：</p><p><a href="https://s2.loli.net/2024/12/20/2pIKtBacCoWeHQg.jpg" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/2pIKtBacCoWeHQg.jpg"></a></p><ul><li><code>虚拟机栈</code> : <code>Java</code> 虚拟机栈是线程私有的数据区，Java 虚拟机栈的生命周期与线程相同，虚拟机栈也是局部变量的存储位置。方法在执行过程中，会在虚拟机栈中创建一个 <code>栈帧(stack frame)</code>。每个方法执行的过程就对应了一个入栈和出栈的过程。</li></ul><p><a href="https://s2.loli.net/2024/12/20/ZRl8heHLdWGc4Cu.jpg" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/ZRl8heHLdWGc4Cu.jpg"></a></p><ul><li><p><code>本地方法栈</code>: 本地方法栈也是线程私有的数据区，本地方法栈存储的区域主要是 Java 中使用 <code>native</code> 关键字修饰的方法所存储的区域。</p></li><li><p><code>程序计数器</code>：程序计数器也是线程私有的数据区，这部分区域用于存储线程的指令地址，用于判断线程的分支、循环、跳转、异常、线程切换和恢复等功能，这些都通过程序计数器来完成。</p></li><li><p><code>方法区</code>：方法区是各个线程共享的内存区域，它用于存储虚拟机加载的 类信息、常量、静态变量、即时编译器编译后的代码等数据。</p></li><li><p><code>堆</code>：堆是线程共享的数据区，堆是 <code>JVM</code> 中最大的一块存储区域，所有的对象实例都会分配在堆上。<code>JDK 1.7</code> 后，字符串常量池从永久代中剥离出来，存放在堆中。</p><p>堆空间的内存分配（默认情况下）：</p><p>命令行上执行如下命令，会查看默认的 <code>JVM</code> 参数。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">java -XX:+PrintFlagsFinal -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出的内容非常多，但是只有两行能够反映出上面的内存分配结果</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031032217.jpeg" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031032217.jpeg"></a><a href="https://s2.loli.net/2024/12/20/t8xhcwPgvC2RBzH.jpg" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/t8xhcwPgvC2RBzH.jpg"></a><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021542355.jpeg" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021542355.jpeg"></a></p></li><li><p><code>eden</code> 区：<strong>8/10</strong> 的年轻代空间</p></li><li><p><code>survivor</code> <strong>0 : 1/10</strong> 的年轻代空间</p></li><li><p><code>survivor</code> <strong>1 : 1/10</strong> 的年轻代空间</p></li><li><p>老年代 ：<strong>三分之二</strong>的堆空间</p></li><li><p>年轻代 ：<strong>三分之一</strong>的堆空间</p></li><li><p><code>运行时常量池</code>：运行时常量池又被称为 <code>Runtime Constant Pool</code>，这块区域是方法区的一部分，它的名字非常有意思，通常被称为 <code>非堆</code>。它并不要求常量一定只有在编译期才能产生，也就是并非编译期间将常量放在常量池中，运行期间也可以将新的常量放入常量池中，String 的 intern 方法就是一个典型的例子。</p></li></ul><h2 id="Java-中的类加载机制？"><a href="#Java-中的类加载机制？" class="headerlink" title="Java 中的类加载机制？"></a>Java 中的类加载机制？</h2><p><code>Java</code> 虚拟机负责把描述类的数据从 <code>Class</code> 文件加载到系统内存中，并对类的数据进行<strong>校验、转换解析和初始化</strong>，最终形成可以被虚拟机直接使用的 <code>Java</code> 类型，这个过程被称之为 Java 的<code>类加载机制</code>。</p><p>一个类从被加载到虚拟机内存开始，到卸载出内存为止，一共会经历下面这些过程。</p><p><a href="https://s2.loli.net/2024/12/20/9eKTE7mgdb1ZSVw.jpg" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/9eKTE7mgdb1ZSVw.jpg"></a></p><p>类加载机制一共有五个步骤，分别是：</p><p><strong>加载、链接、初始化、使用和卸载</strong>阶段，这五个阶段的顺序是确定的。</p><p>其中链接阶段会细分成三个阶段，分别是验证、准备、解析阶段，这三个阶段的顺序是不确定的，这三个阶段通常交互进行。解析阶段通常会在初始化之后再开始，这是为了支持 Java 语言的运行时绑定特性（也被称为<code>动态绑定</code>）。</p><p>下面我们就来聊一下这几个过程。</p><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>关于什么时候开始加载这个过程，《Java 虚拟机规范》并没有强制约束，所以这一点我们可以自由实现。加载是整个类加载过程的第一个阶段，在这个阶段，Java 虚拟机需要完成三件事情：</p><ul><li>通过一个类的全限定名来获取定义此类的二进制字节流。</li><li>将这个字节流表示的一种存储结构转换为运行时数据区中方法区的数据结构。</li><li>在内存中生成一个 <code>Class</code> 对象，这个对象就代表了这个数据结构的访问入口。</li></ul><p>《Java 虚拟机规范》并未规定全限定名是如何获取的，所以现在业界有很多获取全限定名的方式：</p><ul><li><p>从 <code>ZIP</code> 包中读取，最终会改变为 <code>JAR、EAR、WAR</code> 格式。</p></li><li><p>从网络中获取，最常见的应用就是 <code>Web Applet</code>。</p></li><li><p>运行时动态生成，使用最多的就是动态代理技术。</p></li><li><p>由其他文件生成，比如 <code>JSP</code> 应用场景，由 <code>JSP</code> 文件生成对应的 <code>Class</code> 文件。</p></li><li><p>从数据库中读取，这种场景就比较小了。</p></li><li><p>可以从加密文件中获取，这是典型的防止 Class 文件被反编译的保护措施。</p><p>加载阶段既可以使用虚拟机内置的引导类加载器来完成，也可以使用用户自定义的类加载器来完成。程序员可以通过自己定义类加载器来控制字节流的访问方式。</p><p>数组的加载不需要通过类加载器来创建，它是直接在内存中分配，但是数组的元素类型（数组去掉所有维度的类型）最终还是要靠类加载器来完成加载。</p></li></ul><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>加载过后的下一个阶段就是验证，因为我们上一步讲到在内存中生成了一个</p><p><code>Class</code> 对象，这个对象是访问其代表数据结构的入口，所以这一步验证的工作就是确保 <code>Class</code> 文件的字节流中的内容符合《<code>Java</code> 虚拟机规范》中的要求，保证这些信息被当作代码运行后，它不会威胁到虚拟机的安全。</p><p>验证阶段主要分为四个阶段的检验：</p><ul><li>文件格式验证。</li><li>元数据验证。</li><li>字节码验证。</li><li>符号引用验证。</li></ul><h4 id="文件格式验证"><a href="#文件格式验证" class="headerlink" title="文件格式验证"></a><strong>文件格式验证</strong></h4><p>这一阶段可能会包含下面这些验证点：</p><ul><li>魔数是否以 <code>0xCAFEBABE</code> 开头。</li><li>主、次版本号是否在当前 Java 虚拟机接受范围之内。</li><li>常量池的常量中是否有不支持的常量类型。</li><li>指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量。</li><li><code>CONSTANT_Utf8_info</code> 型的常量中是否有不符合 <code>UTF8</code> 编码的数据。</li><li><code>Class</code> 文件中各个部分及文件本身是否有被删除的或附加的其他信息。</li></ul><p>实际上验证点远远不止有这些，上面这些只是从 <code>HotSpot</code> 源码中摘抄的一小段内容。</p><h4 id="元数据验证"><a href="#元数据验证" class="headerlink" title="元数据验证"></a><strong>元数据验证</strong></h4><p>这一阶段主要是对字节码描述的信息进行语义分析，以确保描述的信息符合《<code>Java</code> 语言规范》，验证点包括</p><ul><li><p>验证的类是否有父类（除了 <code>Object</code> 类之外，所有的类都应该有父类）。</p></li><li><p>要验证类的父类是否继承了不允许继承的类。</p></li><li><p>如果这个类不是抽象类，那么这个类是否实现了父类或者接口中要求的所有方法。</p></li><li><p>是否覆盖了 final 字段，是否出现了不符合规定的重载等。</p><p>需要记住这一阶段只是对《<code>Java</code> 语言规范》的验证。</p></li></ul><h4 id="字节码验证"><a href="#字节码验证" class="headerlink" title="字节码验证"></a><strong>字节码验证</strong></h4><p>字节码验证阶段是最复杂的一个阶段，这个阶段主要是确定程序语意是否合法、是否是符合逻辑的。这个阶段主要是对类的方法体（<code>Class</code> 文件中的 <code>Code</code> 属性）进行校验分析。这部分验证包括</p><ul><li><p>确保操作数栈的数据类型和实际执行时的数据类型是否一致。</p></li><li><p>保证任何跳转指令不会跳出到方法体外的字节码指令上。</p></li><li><p>保证方法体中的类型转换是有效的，例如可以把一个子类对象赋值给父类数据类型，但是不能把父类数据类型赋值给子类等诸如此不安全的类型转换。</p></li><li><p>其他验证。</p><p>如果没有通过字节码验证，就说明验证出问题。但是不一定通过了字节码验证，就能保证程序是安全的。</p></li></ul><h4 id="符号引用验证"><a href="#符号引用验证" class="headerlink" title="符号引用验证"></a><strong>符号引用验证</strong></h4><p>最后一个阶段的校验行为发生在虚拟机将符号引用转换为直接引用的时候，这个转化将在连接的第三个阶段，即解析阶段中发生。符号引用验证可以看作是对类自身以外的各类信息进行匹配性校验，这个验证主要包括</p><ul><li><p>符号引用中的字符串全限定名是否能找到对应的类。</p></li><li><p>指定类中是否存在符合方法的字段描述符以及简单名称所描述的方法和字段。</p></li><li><p>符号引用的类、字段方法的可访问性是否可被当前类所访问。</p></li><li><p>其他验证。</p><p>这一阶段主要是确保解析行为能否正常执行，如果无法通过符号引用验证，就会出现类似 <code>IllegalAccessError</code>、<code>NoSuchFieldError</code>、<code>NoSuchMethodError</code> 等错误。</p></li></ul><p>验证阶段对于虚拟机来说非常重要，如果能通过验证，就说明你的程序在运行时不会产生任何影响。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>准备阶段是为类中的变量分配内存并设置其初始值的阶段，这些变量所使用的内存都应当在方法区中进行分配，在</p><p><code>JDK</code> 7 之前，<code>HotSpot</code> 使用<strong>永久代</strong>来实现方法区，是符合这种逻辑概念的。而在 <code>JDK</code> 8 之后，变量则会随着 <code>Class</code> 对象一起存放在 <code>Java</code> 堆中。</p><p>下面通常情况下的基本类型和引用类型的初始值</p><p><a href="https://s2.loli.net/2024/12/20/P7jki9K8geEmOrM.jpg" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/P7jki9K8geEmOrM.jpg"></a></p><p>除了 “通常情况” 下，还有一些 “例外情况”，如果类字段属性中存在</p><p><code>ConstantValue</code> 属性，那就这个变量值在初始阶段就会初始化为 ConstantValue 属性所指定的初始值，比如</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token string">"666"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编译时就会把 value 的值设置为 666。</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>解析阶段是 Java 虚拟机将常量池内的符号引用替换为直接引用的过程。</p><ul><li><p><code>符号引用</code>：符号引用以一组符号来描述所引用的目标。符号引用可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可，符号引用和虚拟机的布局无关。</p></li><li><p><code>直接引用</code>：直接引用可以直接指向目标的指针、相对便宜量或者一个能间接定位到目标的句柄。直接引用和虚拟机的布局是相关的，不同的虚拟机对于相同的符号引用所翻译出来的直接引用一般是不同的。如果有了直接引用，那么直接引用的目标一定被加载到了内存中。</p><p>这样说你可能还有点不明白，我再换一种说法：</p></li></ul><blockquote><p>在编译的时候一个每个 Java 类都会被编译成一个 class 文件，但在编译的时候虚拟机并不知道所引用类的地址，所以就用符号引用来代替，而在这个解析阶段就是为了把这个符号引用转化成为真正的地址的阶段。</p></blockquote><p>《Java 虚拟机规范》并未规定解析阶段发生的时间，只要求了在</p><p><code>anewarray</code>、<code>checkcast</code>、<code>getfield</code>、<code>getstatic</code>、<code>instanceof</code>、<code>invokedynamic</code>、<code>invokeinterface</code>、<code>invokespecial</code>、<code>invokestatic</code>、<code>invokevirtual</code>、<code>ldc</code>、<code>ldc_w</code>、<code>ldc2_w</code>、<code>multianewarray</code>、<code>new</code>、<code>putfield</code> 和 <code>putstatic</code> 这 17 个用于操作符号引用的字节码指令之前，先对所使用的符号引用进行解析。</p><p>解析也分为四个步骤</p><ul><li>类或接口的解析</li><li>字段解析</li><li>方法解析</li><li>接口方法解析</li></ul><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>初始化是类加载过程的最后一个步骤，在之前的阶段中，都是由 Java 虚拟机占主导作用，但是到了这一步，却把主动权移交给应用程序。</p><p>对于初始化阶段，《<code>Java</code> 虚拟机规范》严格规定了只有下面这六种情况下才会触发类的初始化。</p><ul><li><p>在遇到 <code>new、getstatic、putstatic</code> 或者 <code>invokestatic</code> 这四条字节码指令时，如果没有进行过初始化，那么首先触发初始化。通过这四个字节码的名称可以判断，这四条字节码其实就两个场景，调用 <code>new</code> 关键字的时候进行初始化、读取或者设置一个静态字段的时候、调用静态方法的时候。</p></li><li><p>在初始化类的时候，如果父类还没有初始化，那么就需要先对父类进行初始化。</p></li><li><p>在使用 <code>java.lang.reflect</code> 包的方法进行反射调用的时候。</p></li><li><p>当虚拟机启动时，用户需要指定执行主类的时候，说白了就是虚拟机会先初始化 main 方法这个类。</p></li><li><p>在使用 <code>JDK</code> 7 新加入的动态语言支持时，如果一个 <code>jafva.lang.invoke.MethodHandle</code> 实例最后的解析结果为 <code>REF_getstatic、REF_putstatic、REF_invokeStatic、REF_newInvokeSpecial</code> 四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，需要先对其进行初始化。</p></li><li><p>当一个接口中定义了 <code>JDK</code> 8 新加入的默认方法（被 default 关键字修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化。</p><p>其实上面只有前四个大家需要知道就好了，后面两个比较冷门。</p></li></ul><blockquote><p>如果说要回答类加载的话，其实聊到这里已经可以了，但是为了完整性，我们索性把后面两个过程也来聊一聊。</p></blockquote><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>这个阶段没什么可说的，就是初始化之后的代码由 JVM 来动态调用执行。</p><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>当代表一个类的</p><p><code>Class</code> 对象不再被引用，那么 Class 对象的生命周期就结束了，对应的在方法区中的数据也会被卸载。</p><blockquote><p>⚠️但是需要注意一点：JVM 自带的类加载器装载的类，是不会卸载的，由用户自定义的类加载器加载的类是可以卸载的。</p></blockquote><h2 id="在-JVM-中，对象是如何创建的？"><a href="#在-JVM-中，对象是如何创建的？" class="headerlink" title="在 JVM 中，对象是如何创建的？"></a>在 JVM 中，对象是如何创建的？</h2><blockquote><p>如果要回答对象是怎么创建的，我们一般想到的回答是直接 <code>new</code> 出来就行了，这个回答不仅局限于编程中，也融入在我们生活中的方方面面。</p><p>但是遇到面试的时候你只回答一个 <code>new</code> 出来就行了” 显然是不行的，因为面试更趋向于让你解释当程序执行到 <code>new</code> 这条指令时，它的背后发生了什么。</p><p>所以你需要从 <code>JVM</code> 的角度来解释这件事情。</p></blockquote><p>当虚拟机遇到一个</p><p><code>new</code> 指令时（其实就是字节码），首先会去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用所代表的类是否已经被加载、解析和初始化。因为此时很可能不知道具体的类是什么，所以这里使用的是符号引用。如果发现这个类没有经过上面类加载的过程，那么就执行相应的类加载过程。类检查完成后，接下来虚拟机将会为新生对象<strong>分配内存</strong>，对象所需的大小在类加载完成后便可确定（我会在下面的面试题中介绍）。</p><p>分配内存相当于是把一块固定的内存块从堆中划分出来。划分出来之后，虚拟机会将分配到的内存空间都初始化为零值，如果使用了<code>TLAB</code>（本地线程分配缓冲），这一项初始化工作可以提前在 <code>TLAB</code> 分配时进行。这一步操作保证了对象实例字段在 <code>Java</code> 代码中可以不赋值就能直接使用。接下来，<code>Java</code> 虚拟机还会对对象进行必要的设置，比如确定对象是哪个类的实例、对象的 <code>hashcode</code>、对象的 <code>gc</code> 分代年龄信息。这些信息存放在对象的对象头（<code>Object Header</code>）中。</p><p>如果上面的工作都做完后，从虚拟机的角度来说，一个新的对象就创建完毕了；但是对于程序员来说，对象创建才刚刚开始，因为构造函数，即 <code>Class</code> 文件中的 <code>&lt;init&gt;()</code> 方法还没有执行，所有字段都为默认的零值。<code>new</code> 指令之后才会执行 <code>&lt;init&gt;()</code> 方法，然后按照程序员的意愿对对象进行初始化，这样一个对象才可能被完整的构造出来。</p><h2 id="内存分配方式有哪些呢？"><a href="#内存分配方式有哪些呢？" class="headerlink" title="内存分配方式有哪些呢？"></a>内存分配方式有哪些呢？</h2><p>在类加载完成后，虚拟机需要为新生对象分配内存，为<strong>对象分配内存</strong>相当于是<strong>把一块确定的区域从【堆】中划分</strong>出来。这就涉及到一个问题，</p><p><strong>要划分的堆区是否规整</strong>。</p><ul><li><p><strong>假设规整</strong>：所有使用过的内存放在一边，未使用的内存放在一边，中间放着一个指针，这个指针为分界指示器。那么为新对象分配内存空间就相当于是把指针向空闲的空间挪动对象大小相等的距离，这种内存分配方式叫做【**指针碰撞(Bump The Pointer)**】。</p></li><li><p><strong>假设不规整</strong>：已经被使用的内存和未被使用的内存<strong>相互交错</strong>在一起，这种情况下就没有办法使用指针碰撞，这里就要使用另外一种记录内存使用的方式：【<strong>空闲列表(Free List</strong>)】。空闲列表维护了一个列表，这个列表记录了<strong>哪些内存块是可用</strong>的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录。</p><p>所以，上述两种分配方式选择哪个，取决于 <code>Java</code> <strong>堆是否规整</strong>来决定。</p></li><li><p><strong>指针碰撞</strong>：<code>Serial</code>、<code>ParNew</code> 等<strong>带压缩整理</strong>过程的收集器，</p></li><li><p><strong>空闲列表</strong>： <code>CMS</code> 这种基于<strong>清除算法</strong>的收集器时，</p></li></ul><h2 id="对象的内存布局？"><a href="#对象的内存布局？" class="headerlink" title="对象的内存布局？"></a>对象的内存布局？</h2><p>在<code>hotspot</code> 虚拟机中，对象在内存中的布局分为三块区域：</p><ul><li><code>对象头(Header)</code></li><li><code>实例数据(Instance Data)</code></li><li><code>对齐填充(Padding)</code></li></ul><p>这三块区域的内存分布如下图所示</p><p><a href="https://s2.loli.net/2024/12/20/ipeYynBAKwrJ6UF.jpg" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/ipeYynBAKwrJ6UF.jpg"></a></p><p>我们来详细介绍一下上面对象中的内容。</p><h3 id="对象头-Header"><a href="#对象头-Header" class="headerlink" title="对象头 Header"></a>对象头 Header</h3><p>对象头 <code>Header</code> 主要包含 <code>MarkWord</code> 和对象指针 <code>Klass Pointer</code>，如果是数组的话，还要包含数组的长度。</p><p><a href="https://s2.loli.net/2024/12/20/aTL8273HxYWq1og.jpg" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/aTL8273HxYWq1og.jpg"></a></p><ul><li>32 位虚拟机： <code>MarkWord</code> ，<code>Klass Pointer</code> 和数组长度分别占用 32 位，也就是 4 字节。</li><li>64 位虚拟机：<code>MarkWord</code> ，<code>Klass Pointer</code> 和数组长度分别占用 64 位，也就是 8 字节。</li></ul><p>在 32 位虚拟机和 64 位虚拟机的<code>MarkWord</code> 所占用的字节大小不一样，32 位虚拟机的 <code>MarkWord</code> 和 <code>Klass Pointer</code> 分别占用 32 bits 的字节，而 64 位虚拟机的 <code>Mark Word</code> 和 <code>Klass Pointer</code> 占用了 64 <code>bits</code> 的字节，下面我们以 32 位虚拟机为例，来看一下其 <code>Mark Word</code> 的字节具体是如何分配的。</p><p><a href="https://s2.loli.net/2024/12/20/P1rXkYKMC8fDdhF.jpg" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/P1rXkYKMC8fDdhF.jpg"></a></p><p>用中文翻译过来就是</p><p><a href="https://s2.loli.net/2024/12/20/2B6n3YTMagd4HLI.jpg" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/2B6n3YTMagd4HLI.jpg"></a></p><ul><li>无状态也就是<code>无锁</code>的时候，对象头开辟 25 <code>bit</code> 的空间用来存储对象的 <code>hashcode</code> ，4 <code>bit</code> 用于存放分代年龄，1 <code>bit</code> 用来存放是否偏向锁的标识位，2 <code>bit</code> 用来存放锁标识位为 01。</li><li><code>偏向锁</code> 中划分更细，还是开辟 25 <code>bit</code> 的空间，其中 23 <code>bit</code> 用来存放线程 ID，<code>2bit</code> 用来存放 <code>epoch</code>，<code>4bit</code> 存放分代年龄，1 <code>bit</code> 存放是否偏向锁标识， 0 表示无锁，1 表示偏向锁，锁的标识位还是 01。</li><li><code>轻量级锁</code>中直接开辟 30 <code>bit</code> 的空间存放指向栈中锁记录的指针，<code>2bit</code> 存放锁的标志位，其标志位为 00。</li><li><code>重量级锁</code>中和轻量级锁一样，30 <code>bit</code> 的空间用来存放指向重量级锁的指针，2 <code>bit</code> 存放锁的标识位，为 11</li><li><code>GC标记</code>开辟 30 <code>bit</code> 的内存空间却没有占用，2 <code>bit</code> 空间存放锁标志位为 11。</li></ul><p>其中无锁和偏向锁的锁标志位都是 01，只是在前面的 1 <code>bit</code> 区分了这是无锁状态还是偏向锁状态。</p><p>关于为什么这么分配的内存，我们可以从 <code>OpenJDK</code> 中的 <code>markOop.hpp</code> 类中的枚举窥出端倪</p><p><a href="https://s2.loli.net/2024/12/20/pTGKBxd1A6IEO2X.jpg" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/pTGKBxd1A6IEO2X.jpg"></a></p><p>来解释一下</p><ul><li><code>age_bits</code> 就是我们说的分代回收的标识，占用 4 字节</li><li><code>lock_bits</code> 是锁的标志位，占用 2 个字节</li><li><code>biased_lock_bits</code> 是是否偏向锁的标识，占用 1 个字节。</li><li><code>max_hash_bits</code> 是针对无锁计算的 <code>hashcode</code> 占用字节数量，如果是 32 位虚拟机，就是 32 - 4 - 2 -1 = 25 <code>byte</code>，如果是 64 位虚拟机，64 - 4 - 2 - 1 = 57 <code>byte</code>，但是会有 25 字节未使用，所以 64 位的 <code>hashcode</code> 占用 31 <code>byte</code>。</li><li><code>hash_bits</code> 是针对 64 位虚拟机来说，如果最大字节数大于 31，则取 31，否则取真实的字节数</li><li><code>cms_bits</code> 我觉得应该是不是 64 位虚拟机就占用 0 <code>byte</code>，是 64 位就占用 1byte</li><li><code>epoch_bits</code> 就是 epoch 所占用的字节大小，2 字节。</li></ul><p>在上面的虚拟机对象头分配表中，我们可以看到有几种锁的状态：<strong>无锁（无状态）</strong>，<strong>偏向锁</strong>，<strong>轻量级锁</strong>，<strong>重量级锁</strong>，其中轻量级锁和偏向锁是<code>JDK1.6</code> 中对 <code>synchronized</code> 锁进行优化后新增加的，其目的就是为了<strong>大大优化锁的性能</strong>，所以在 <code>JDK</code> 1.6 中，使用 <code>synchronized</code> 的开销也没那么大了。其实从锁有无锁定来讲，还是只有<strong>无锁和重量级锁</strong>，偏向锁和轻量级锁的出现就是增加了锁的<strong>获取性能</strong>而已，并没有出现新的锁。</p><p>所以我们的重点放在对<code>synchronized</code> 重量级锁的研究上，当 <code>monitor</code> 被某个线程持有后，它就会处于<strong>锁定状态</strong>。在 <code>HotSpot</code> 虚拟机中，<code>monitor</code> 的底层代码是由 <code>ObjectMonitor</code> 实现的，其主要数据结构如下（位于 <code>HotSpot</code> 虚拟机源码 <code>ObjectMonitor.hpp</code> 文件，<code>C++</code> 实现的）</p><p><a href="https://s2.loli.net/2024/12/20/x6GIoZ4aWFPfQqO.jpg" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/x6GIoZ4aWFPfQqO.jpg"></a></p><p>这段 C++ 中需要注意几个属性：</p><p><code>_WaitSet</code> 、 <code>_EntryList</code> 和 <code>_Owner</code>，每个等待获取锁的线程都会被封装称为 <code>ObjectWaiter</code> 对象。</p><p><a href="https://s2.loli.net/2024/12/20/yqtvzOug5KJ3nbc.jpg" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/yqtvzOug5KJ3nbc.jpg"></a></p><p><code>    _Owner</code> 是指向了 <code>ObjectMonitor</code> 对象的线程，而 <code>_WaitSet</code> 和 <code>_EntryList</code> 就是用来保存每个线程的列表。</p><blockquote><p>那么这两个列表有什么区别呢？这个问题我和你聊一下锁的获取流程你就清楚了。</p></blockquote><h3 id="锁的两个列表"><a href="#锁的两个列表" class="headerlink" title="锁的两个列表"></a><strong>锁的两个列表</strong></h3><p>当多个线程同时访问某段同步代码时，首先会进入</p><p><code>_EntryList</code> 集合，当线程获取到对象的 <code>monitor</code> 之后，就会进入 <code>_Owner</code> 区域，并把 <code>ObjectMonitor</code> 对象的 <code>_Owner</code> 指向为当前线程，并使 <code>_count + 1</code>，如果调用了释放锁（比如 <code>wait</code>）的操作，就会释放当前持有的 <code>monitor</code> ，<code>owner = null</code>， _count - 1，同时这个线程会进入到 <code>_WaitSet</code> 列表中等待被唤醒。如果当前线程执行完毕后也会释放 <code>monitor</code> 锁，只不过此时不会进入 <code>_WaitSet</code> 列表了，而是直接复位 <code>_count</code> 的值。</p><p><a href="https://s2.loli.net/2024/12/20/cpIQeDXZlzk3ovY.jpg" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/cpIQeDXZlzk3ovY.jpg"></a></p><p><code>Klass Pointer</code> 表示的是类型指针，也就是对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p><blockquote><p>你可能不是很理解指针是个什么概念，你可以简单理解为指针就是指向某个数据的地址。</p></blockquote><p><a href="https://s2.loli.net/2024/12/20/qCTZx5cvsEUw2dP.jpg" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/qCTZx5cvsEUw2dP.jpg"></a></p><h3 id="实例数据-Instance-Data"><a href="#实例数据-Instance-Data" class="headerlink" title="实例数据 Instance Data"></a>实例数据 <code>Instance Data</code></h3><p>实例数据部分是对象真正存储的有效信息，也是代码中定义的各个字段的字节大小，比如一个</p><p><code>byte</code> 占 1 个字节，一个 <code>int</code> 占用 4 个字节。</p><h3 id="对齐-Padding"><a href="#对齐-Padding" class="headerlink" title="对齐 Padding"></a>对齐 <code>Padding</code></h3><p>对齐不是必须存在的，它只起到了占位符 (<code>%d, %c</code> 等) 的作用。这就是 JVM 的要求了，因为 <code>HotSpot</code> <code>JVM</code> 要求对象的起始地址必须是 8 字节的整数倍，也就是说对象的字节大小是 8 的整数倍，不够的需要使用 <code>Padding</code> 补全。</p><h2 id="对象访问定位的方式有哪些？"><a href="#对象访问定位的方式有哪些？" class="headerlink" title="对象访问定位的方式有哪些？"></a>对象访问定位的方式有哪些？</h2><p>我们创建一个对象的目的当然就是为了使用它，但是，一个对象被创建出来之后，在<code>JVM</code> 中是如何访问这个对象的呢？一般有两种方式：<strong>通过句柄访问</strong>和 <strong>通过直接指针访问</strong>。</p><ul><li><p>如果使用句柄访问方式的话，<code>Java</code> 堆中可能会划分出一块内存作为句柄池，引用（<code>reference</code>）中存储的是对象的句柄地址，而句柄中包含了对象的实例数据与类型数据各自具体的地址信息。如下图所示。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545142.jpeg" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545142.jpeg"></a></p></li><li><p>如果使用直接指针访问的话，<code>Java</code> 堆中对象的内存布局就会有所区别，栈区引用指示的是堆中的实例数据的地址，如果只是访问对象本身的话，就不会多一次直接访问的开销，而对象类型数据的指针是存在于方法区中，如果定位的话，需要多一次直接定位开销。如下图所示</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545927.jpeg" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545927.jpeg"></a></p><p>这两种对象访问方式各有各的优势，使用句柄最大的好处就是引用中存储的是句柄地址，对象移动时只需改变句柄的地址就可以，而无需改变对象本身。</p></li></ul><p>使用直接指针来访问速度更快，它节省了一次指针定位的时间开销，由于对象访问在 Java 中非常频繁，因为这类的开销也是值得优化的地方。</p><p>上面聊到了对象的两种数据，一种是对象的实例数据，这没什么好说的，就是对象实例字段的数据，一种是对象的类型数据，这个数据说的是对象的类型、父类、实现的接口和方法等。</p><h2 id="如何判断对象已经死亡？"><a href="#如何判断对象已经死亡？" class="headerlink" title="如何判断对象已经死亡？"></a>如何判断对象已经死亡？</h2><blockquote><p>引用计数、可达性分析</p></blockquote><p>我们大家知道，基本上所有的对象都在堆中分布，当我们不再使用对象的时候，垃圾收集器会对无用对象进行回收♻️，那么 JVM 是如何判断哪些对象已经是 “无用对象” 的呢？</p><p>首先我们先来说第一种：</p><p><strong>引用计数法</strong>。</p><p>引用计数法的判断标准是这样的：在对象中添加一个引用计数器，每当有一个地方引用它时，计数器的值就会加一；当引用失效时，计数器的值就会减一；只要任何时刻计数器为零的对象就是不会再被使用的对象。虽然这种判断方式非常简单粗暴，但是往往很有用，不过，在 Java 领域，主流的 Hotspot 虚拟机实现并没有采用这种方式，因为引用计数法不能解决对象之间的循环引用问题。</p><p>循环引用问题简单来讲就是两个对象之间互相依赖着对方，除此之外，再无其他引用，这样虚拟机无法判断引用是否为零从而进行垃圾回收操作。</p><p>还有一种判断对象无用：</p><p><strong>可达性分析算法</strong>。</p><p>当前主流的 JVM 都采用了可达性分析算法来进行判断，这个算法的基本思路就是通过一系列被称为</p><p><code>GC Roots</code>的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程走过的路径被称为<code>引用链</code>（<code>Reference</code> <code>Chain</code>），如果某个对象到 <code>GC</code> <code>Roots</code> 之间没有任何引用链相连接，或者说从 <code>GC</code> <code>Roots</code> 到这个对象不可达时，则证明此这个对象是无用对象，需要被垃圾回收。</p><p>这种引用方式如下</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545756.jpeg" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545756.jpeg"></a></p><p>如上图所示，从枚举根节点 <code>GC</code> <code>Roots</code> 开始进行遍历，<code>object 1 、2、3、4</code> 是存在引用关系的对象，而 <code>object 5、6、7</code> 之间虽然有关联，但是它们到 GC <code>Roots</code> 之间是不可达的，所以被认为是可以回收的对象。</p><p>在 <code>Java</code> 技术体系中，可以作为 <code>GC Roots</code> 进行检索的对象主要有</p><ul><li>在虚拟机栈（栈帧中的本地变量表）中引用的对象。</li><li>方法区中类静态属性引用的对象，比如 <code>Java</code> 类的引用类型静态变量。</li><li>方法区中常量引用的对象，比如字符串常量池中的引用。</li><li>在本地方法栈中 <code>JNI</code> 引用的对象。</li><li><code>JVM</code> 内部的引用，比如基本数据类型对应的 <code>Class</code> 对象，一些异常对象比如 <code>NullPointerException</code>、<code>OutOfMemoryError</code> 等，还有系统类加载器。</li><li>所有被 <code>synchronized</code> 持有的对象。</li><li>还有一些 <code>JVM</code> 内部的比如 <code>JMXBean</code>、<code>JVMTI</code> 中注册的回调，本地代码缓存等。</li><li>根据用户所选的垃圾收集器以及当前回收的内存区域的不同，还可能会有一些对象临时加入，共同构成 <code>GC Roots</code> 集合。</li></ul><p>虽然我们上面提到了两种判断对象回收的方法，但无论是引用计数法还是判断 <code>GC Roots</code> 都离不开<code>引用</code>这一层关系。</p><blockquote><p>这里涉及到到强引用、软引用、弱引用、虚引用的引用关系，后续再聊</p></blockquote><h2 id="如何判断一个不再使用的类？"><a href="#如何判断一个不再使用的类？" class="headerlink" title="如何判断一个不再使用的类？"></a>如何判断一个不再使用的类？</h2><p>判断一个类型属于 “不再使用的类” 需要满足下面这三个条件</p><ul><li>这个类所有的实例已经被回收，也就是 <code>Java</code> 堆中不存在该类及其任何这个类字类的实例</li><li>加载这个类的类加载器已经被回收，但是类加载器一般很难会被回收，除非这个类加载器是为了这个目的设计的，比如 <code>OSGI</code>、<code>JSP</code> 的重加载等，否则通常很难达成。</li><li>这个类对应的 <code>Class</code> 对象没有任何地方被引用，无法在任何时刻通过反射访问这个类的属性和方法。</li></ul><p>虚拟机允许对满足上面这三个条件的无用类进行回收操作。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试系列（三）| 幂等性</title>
      <link href="/posts/16712.html"/>
      <url>/posts/16712.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h1><p>​    HTTP/1.1 中对幂等性的定义是：一次和多次请求某一个资源<strong>对于资源本身</strong>应该具有同样的结果（网络超时等问题除外）。也就是说，<strong>其任意多次执行对资源本身所产生的影响均与一次执行的影响相同</strong>。</p><p>这里需要关注几个重点：</p><ol><li><p> 幂等不仅仅只是一次（或多次）请求对资源没有副作用（比如查询数据库操作，没有增删改，因此没有对数据库有任何影响）。</p></li><li><p> 幂等还包括第一次请求的时候对资源产生了副作用，但是以后的多次请求都不会再对资源产生副作用。</p></li><li><p> 幂等关注的是以后的多次请求是否对资源产生的副作用，而不关注结果。</p></li><li><p> 网络超时等问题，不是幂等的讨论范围。</p></li></ol><p>幂等性是系统服务对外一种承诺（而不是实现），承诺只要调用接口成功，外部多次调用对系统的影响是一致的。声明为幂等的服务会认为外部调用失败是常态，并且失败之后必然会有重试。</p><h2 id="什么情况下需要幂等"><a href="#什么情况下需要幂等" class="headerlink" title="什么情况下需要幂等"></a>什么情况下需要幂等</h2><p>业务开发中，经常会遇到重复提交的情况，无论是由于网络问题无法收到请求结果而重新发起请求，或是前端的操作抖动而造成重复提交情况。 在交易系统，支付系统这种重复提交造成的问题有尤其明显，比如：</p><ol><li><p> 用户在 APP 上连续点击了多次提交订单，后台应该只产生一个订单；</p></li><li><p> 向支付宝发起支付请求，由于网络问题或系统 BUG 重发，支付宝应该只扣一次钱。 <strong>很显然，声明幂等的服务认为，外部调用者会存在多次调用的情况，为了防止外部多次调用对系统数据状态的发生多次改变，将服务设计成幂等。</strong></p></li></ol><h2 id="幂等-VS-防重"><a href="#幂等-VS-防重" class="headerlink" title="幂等 VS 防重"></a>幂等 VS 防重</h2><p>上面例子中小明遇到的问题，只是重复提交的情况，和服务幂等的初衷是不同的。重复提交是在第一次请求已经成功的情况下，人为的进行多次操作，导致不满足幂等要求的服务多次改变状态。而幂等更多使用的情况是第一次请求不知道结果（比如超时）或者失败的异常情况下，发起多次请求，目的是多次确认第一次请求成功，却不会因多次请求而出现多次的状态变化。</p><h2 id="什么情况下需要保证幂等性"><a href="#什么情况下需要保证幂等性" class="headerlink" title="什么情况下需要保证幂等性"></a>什么情况下需要保证幂等性</h2><p>以 SQL 为例，有下面三种场景，只有第三种场景需要开发人员使用其他策略保证幂等性：</p><ol><li><p> <code>SELECT col1 FROM tab1 WHER col2=2</code>，无论执行多少次都不会改变状态，是天然的幂等。</p></li><li><p> <code>UPDATE tab1 SET col1=1 WHERE col2=2</code>，无论执行<strong>成功</strong>多少次<strong>状态</strong>都是一致的，因此也是幂等操作。</p></li><li><p> <code>UPDATE tab1 SET col1=col1+1 WHERE col2=2</code>，每次执行的结果都会发生变化，这种不是幂等的。</p></li></ol><h2 id="为什么要设计幂等性的服务"><a href="#为什么要设计幂等性的服务" class="headerlink" title="为什么要设计幂等性的服务"></a>为什么要设计幂等性的服务</h2><p>幂等可以使得客户端逻辑处理变得简单，但是却以服务逻辑变得复杂为代价。满足幂等服务的需要在逻辑中至少包含两点：</p><ol><li><p> 首先去查询上一次的执行状态，如果没有则认为是第一次请求</p></li><li><p> 在服务改变状态的业务逻辑前，保证防重复提交的逻辑</p></li></ol><h2 id="幂等的不足"><a href="#幂等的不足" class="headerlink" title="幂等的不足"></a>幂等的不足</h2><p>幂等是为了简化客户端逻辑处理，却增加了服务提供者的逻辑和成本，是否有必要，需要根据具体场景具体分析，因此除了业务上的特殊要求外，尽量不提供幂等的接口。</p><ol><li><p> 增加了额外控制幂等的业务逻辑，复杂化了业务功能；</p></li><li><p> 把并行执行的功能改为串行执行，降低了执行效率。</p></li></ol><h2 id="保证幂等策略"><a href="#保证幂等策略" class="headerlink" title="保证幂等策略"></a>保证幂等策略</h2><p>幂等需要通过<strong>唯一的业务单号</strong>来保证。也就是说相同的业务单号，认为是同一笔业务。使用这个唯一的业务单号来确保，后面多次的相同的业务单号的处理逻辑和执行效果是一致的。 下面以支付为例，在不考虑并发的情况下，实现幂等很简单：<br>    ①先查询一下订单是否已经支付过，<br>    ②如果已经支付过，则返回支付成功；如果没有支付，进行支付流程，修改订单状态为‘已支付’。</p><h2 id="防重复提交策略"><a href="#防重复提交策略" class="headerlink" title="防重复提交策略"></a>防重复提交策略</h2><p>上述的保证幂等方案是分成两步的，第②步依赖第①步的查询结果，无法保证原子性的。在高并发下就会出现下面的情况：第二次请求在第一次请求第②步订单状态还没有修改为‘已支付状态’的情况下到来。既然得出了这个结论，余下的问题也就变得简单：把查询和变更状态操作加锁，将并行操作改为串行操作。</p><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>如果只是更新<strong>已有</strong>的数据，没有必要对业务进行加锁，设计表结构时使用乐观锁，一般通过 version 来做乐观锁，这样既能保证执行效率，又能保证幂等。例如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> tab1 <span class="token keyword">SET</span> col1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>version<span class="token operator">=</span>version<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">WHERE</span> version<span class="token operator">=</span><span class="token comment">#version#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 不过，乐观锁存在失效的情况，就是常说的 <strong>ABA</strong> 问题，不过如果 version 版本一直是自增的就不会出现 ABA 的情况。（从网上找了一张图片很能说明乐观锁，引用过来，出自 Mybatis 对乐观锁的支持）</p><h3 id="防重表"><a href="#防重表" class="headerlink" title="防重表"></a>防重表</h3><p>使用订单号 orderNo 做为去重表的唯一索引，每次请求都根据订单号向去重表中插入一条数据。第一次请求查询订单支付状态，当然订单没有支付，进行支付操作，无论成功与否，执行完后更新订单状态为成功或失败，删除去重表中的数据。后续的订单因为表中唯一索引而插入失败，则返回操作失败，直到第一次的请求完成（成功或失败）。<strong>可以看出防重表作用是加锁的功能。</strong></p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>这里使用的防重表可以使用分布式锁代替，比如 Redis。订单发起支付请求，支付系统会去 Redis 缓存中查询是否存在该订单号的 Key，如果不存在，则向 Redis 增加 Key 为订单号。查询订单支付已经支付，如果没有则进行支付，支付完成后删除该订单号的 Key。通过 Redis 做到了分布式锁，只有这次订单订单支付请求完成，下次请求才能进来。相比去重表，将放并发做到了缓存中，较为高效。思路相同，<strong>同一时间只能完成一次支付请求</strong>。</p><h3 id="token-令牌"><a href="#token-令牌" class="headerlink" title="token 令牌"></a>token 令牌</h3><p>这种方式分成两个阶段：申请 token 阶段和支付阶段。 第一阶段，在进入到提交订单页面之前，需要订单系统根据用户信息向支付系统发起一次申请 token 的请求，支付系统将 token 保存到 Redis 缓存中，为第二阶段支付使用。 第二阶段，订单系统拿着申请到的 token 发起支付请求，支付系统会检查 Redis 中是否存在该 token，如果存在，表示第一次发起支付请求，删除缓存中 token 后开始支付逻辑处理；如果缓存中不存在，表示非法请求。 实际上这里的 token 是一个信物，支付系统根据 token 确认，你是你妈的孩子。不足是需要系统间交互两次，流程较上述方法复杂。</p><h3 id="支付缓冲区"><a href="#支付缓冲区" class="headerlink" title="支付缓冲区"></a>支付缓冲区</h3><p>把订单的支付请求都快速地接下来，一个快速接单的缓冲管道。后续使用异步任务处理管道中的数据，过滤掉重复的待支付订单。优点是同步转异步，高吞吐。不足是不能及时地返回支付结果，需要后续监听支付结果的异步返回。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 幂等性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试系列（二）| SpringCloud 面试题</title>
      <link href="/posts/19188.html"/>
      <url>/posts/19188.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="微服务基础"><a href="#微服务基础" class="headerlink" title="微服务基础"></a>微服务基础</h1><h2 id="1-什么是微服务架构"><a href="#1-什么是微服务架构" class="headerlink" title="1.什么是微服务架构"></a>1.什么是微服务架构</h2><p>​    微服务架构就是将<strong>单体的应用程序分成多个应用程序</strong>，这多个应用程序就成为微服务，每个微服务 运行在自己的进程中，并使用轻量级的机制通信。这些服务围绕业务能力来划分，并通过自动化部 署机制来独立部署。这些服务可以使用不同的编程语言，不同数据库，以保证最低限度的集中式管理。</p><h2 id="2-为什么需要学习Spring-Cloud"><a href="#2-为什么需要学习Spring-Cloud" class="headerlink" title="2.为什么需要学习Spring Cloud"></a>2.为什么需要学习Spring Cloud</h2><ul><li>首先Spring Cloud基于Spring Boot的优雅简洁，可还记得我们被无数xml支配的恐惧？可还记得 Spring MVC ，Mybatis 错综复杂的配置，有了Spring Boot，这些东西都不需要了，Spring Boot好处不再赘诉，Spring Cloud就基于Spring Boot把市场上优秀的服务框架组合起来，通过Spring Boot风 格进行再封装屏蔽掉了复杂的配置和实现原理 </li><li>什么叫做开箱即用？即使是当年的黄金搭档 Dubbo + ZooKeeper下载配置起来也是颇费心神的！而 Spring Cloud完成这些只需要一个jar的依赖就可以了！ </li><li>Spring Cloud大多数子模块都是直击痛点，像 Zuul 解决的跨域，Fegin 解决的负载均衡，Hystrix的熔 断机制等等等等</li></ul><h2 id="3-Spring-Cloud-是什么"><a href="#3-Spring-Cloud-是什么" class="headerlink" title="3. Spring Cloud 是什么"></a>3. Spring Cloud 是什么</h2><ul><li><p>Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如 <strong>服务发现注册</strong>、<strong>配置中心</strong>、<strong>智能路由</strong>、<strong>消息总线</strong>、<strong>负载均衡</strong>、<strong>断路器</strong>、<strong>数据监控</strong>等，都可以用Spring Boot的开发风格做到一键启动和部署。</p></li><li><p> Spring Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框 架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留 出了一套简单易懂、易部署和易维护的分布式系统开发工具包</p></li></ul><h2 id="4-Spring-Cloud的优缺点"><a href="#4-Spring-Cloud的优缺点" class="headerlink" title="4. Spring Cloud的优缺点"></a>4. Spring Cloud的优缺点</h2><p>优点</p><ol><li>耦合低</li><li>配置简单</li><li>跨平台</li><li>可配置独立的数据库</li><li>可以组件间之间通讯</li></ol><p>缺点：</p><ol><li>部署麻烦</li><li>数据管理麻烦</li><li>系统集成测试</li><li>性能监控复杂</li></ol><h2 id="5-Spring-Boot-和-Spring-Cloud-区别？"><a href="#5-Spring-Boot-和-Spring-Cloud-区别？" class="headerlink" title="5. Spring Boot 和 Spring Cloud 区别？"></a>5. Spring Boot 和 Spring Cloud 区别？</h2><ul><li><p>Spring Boot 专注单体快速开发</p></li><li><p>Spring Cloud 关注全局微服务协调整理治理框架，将Spring Boot 单体微服务整个管理</p></li><li><p>各个微服务之间提供，配置管理，服务发现，断路器，路由，微代理，消息总线，全局锁，决策竞选，分布式会话等</p></li></ul><h2 id="6-Spring-Cloud-和-Spring-Boot-版本对应关系"><a href="#6-Spring-Cloud-和-Spring-Boot-版本对应关系" class="headerlink" title="6.Spring Cloud 和 Spring Boot 版本对应关系?"></a>6.Spring Cloud 和 Spring Boot 版本对应关系?</h2><table><thead><tr><th align="left">Release Train</th><th align="left">Boot Version</th></tr></thead><tbody><tr><td align="left"><code>2020.0.x aka Ilford</code></td><td align="left">2.4.x, 2.5.x (Starting with 2020.0.3)</td></tr><tr><td align="left"><code>Hoxton</code></td><td align="left">2.2.x, 2.3.x (Starting with SR5)</td></tr><tr><td align="left"><code>Greenwich</code></td><td align="left">2.1.x</td></tr><tr><td align="left"><code>Finchley</code></td><td align="left">2.0.x</td></tr><tr><td align="left"><code>Edgware</code></td><td align="left">1.5.x</td></tr><tr><td align="left"><code>Dalston</code></td><td align="left">1.5.x</td></tr></tbody></table><h2 id="7-SpringCloud由什么组成"><a href="#7-SpringCloud由什么组成" class="headerlink" title="7.SpringCloud由什么组成"></a>7.SpringCloud由什么组成</h2><p>这里列举几个主要的组件</p><ul><li><code>Eureka</code> 服务注册和发现</li><li><code>Zuul</code> 网关</li><li><code>Ribbon</code> 负载均衡</li><li><code>Feign</code> 声明式Web服务客户端</li><li><code>Hystrix</code> 断路器</li><li><code>Config</code> 分布式统一配置管理</li></ul><h1 id="Eureka-篇"><a href="#Eureka-篇" class="headerlink" title="Eureka 篇"></a>Eureka 篇</h1><h2 id="8-服务注册和发现是什么意思？Spring-Cloud-如何实现的"><a href="#8-服务注册和发现是什么意思？Spring-Cloud-如何实现的" class="headerlink" title="8.服务注册和发现是什么意思？Spring Cloud 如何实现的?"></a>8.服务注册和发现是什么意思？Spring Cloud 如何实现的?</h2><p>​    一般Spring Cloud 项目由多个模块服务组成，通常在属性文件中进行配置，随着越来越多的服务开发和部署，添加修改属性变得复杂。由于所有服务都通过Eureka 服务注册统一由Eureka服务管理并通过Eureka完成查找，这样就无需知道服务的地的任何修改了。</p><h2 id="9-什么是Eureka"><a href="#9-什么是Eureka" class="headerlink" title="9.什么是Eureka"></a>9.什么是Eureka</h2><p>​    Eureka 作为 Spring Cloud 服务注册中心，系统中的服务使用 Eureka 客户端将其连接 Eureka Service 中并保持心跳，可以通过 Eureka 服务来监控其他微服务是否正常运行</p><h2 id="10-Eureka-如何实现高可用"><a href="#10-Eureka-如何实现高可用" class="headerlink" title="10.Eureka 如何实现高可用"></a>10.Eureka 如何实现高可用</h2><p>​    通过集群注册多台 Eureka，将各个 微服务 相互注册</p><h2 id="11-Eureka-的自我保护机制"><a href="#11-Eureka-的自我保护机制" class="headerlink" title="11.Eureka 的自我保护机制"></a>11.Eureka 的自我保护机制</h2><p>​    默认情况下，如果 Eureka 服务一定时间没有收到某个微服务的心跳，那个Eureka 服务会进入自我保护模式，在该模式下 Eureka 服务会保护注册表中的信息，不删除注册表中的数据，当网路恢复后，自动退出保护模式。</p><h2 id="12-DiscoveryClient-作用"><a href="#12-DiscoveryClient-作用" class="headerlink" title="12.DiscoveryClient 作用"></a>12.DiscoveryClient 作用</h2><p>​    可以从注册中心中的服务别名来注册服务器信息</p><h2 id="13-Eureka-和ZooKeeper-的区别"><a href="#13-Eureka-和ZooKeeper-的区别" class="headerlink" title="13.Eureka 和ZooKeeper 的区别"></a>13.Eureka 和ZooKeeper 的区别</h2><ol><li><p>ZooKeeper 的节点服务挂了要选举，选举期间的注册服务瘫痪</p></li><li><p>Eureka的各个节点平等，服务器挂了没关系，只要由一台可以保证服务即可，如果数据不是最新的，可能是启动了自我保护机制导致的。</p></li><li><p>Eureka 本质是工程，ZooKeeper 是进程</p></li><li><p>ZooKeeper 保证CP，Eureka 保证 AP</p></li></ol><blockquote><p>CAP: C:一致性、A:可用性、P:分区容错性</p></blockquote><h1 id="Zuul-篇"><a href="#Zuul-篇" class="headerlink" title="Zuul 篇"></a>Zuul 篇</h1><h2 id="14-什么是网关"><a href="#14-什么是网关" class="headerlink" title="14.什么是网关"></a>14.什么是网关</h2><ul><li>网关相当与网络服务框架的入口，所有网络请求都必须通过网关才能转发到具体的服务</li></ul><h2 id="15-作用是什么"><a href="#15-作用是什么" class="headerlink" title="15.作用是什么"></a>15.作用是什么</h2><ul><li>统一管理微服务请求，权限控制、负载均衡、路由转发、监控、安全控制黑名单和白名单</li></ul><h2 id="16-什么是Spring-Cloud-Zuul-服务网关"><a href="#16-什么是Spring-Cloud-Zuul-服务网关" class="headerlink" title="16.什么是Spring Cloud Zuul (服务网关)"></a>16.什么是Spring Cloud Zuul (服务网关)</h2><ul><li>Spring Cloud 的一套路由方案，会根据请求路径不同，网关会定位到指定的微服务，并代理请求到不同的微服务接口，对外隐蔽了微服务的真正接口地址，<br>三个重要概念<ul><li>动态路由表：Zuul 支持 Eureka 路由，手动配置路由</li><li>路由定位： 根据请求路径，Zuul 有自己一套定位服务规则以及路由表达式匹配</li><li>反向代理：客户端请求到路由网关，网关手里后，目标发送请求，拿到相应后给到客户端</li></ul></li><li>应用场景：<ul><li>对外暴露</li><li>权限校验</li><li>服务聚合</li><li>日志审计</li></ul></li></ul><h2 id="17-网关和过滤器有什么区别"><a href="#17-网关和过滤器有什么区别" class="headerlink" title="17.网关和过滤器有什么区别"></a>17.网关和过滤器有什么区别</h2><ul><li>网关对所有的服务请求进行分析过滤，过滤器是对于单个服务而言的</li></ul><h2 id="18-常用的网关框架"><a href="#18-常用的网关框架" class="headerlink" title="18.常用的网关框架"></a>18.常用的网关框架</h2><ul><li>Nginxx、Zuul、Gateway</li></ul><h2 id="19-Zuul-和-Nginx区别"><a href="#19-Zuul-和-Nginx区别" class="headerlink" title="19.Zuul 和 Nginx区别"></a>19.Zuul 和 Nginx区别</h2><ul><li>Zuul java 实现，主要是网关服务</li><li>Nginx C 实现，性能高于Zuul，可以做Zuul集群</li></ul><h2 id="20-如何设计一套API接口"><a href="#20-如何设计一套API接口" class="headerlink" title="20.如何设计一套API接口"></a>20.如何设计一套API接口</h2><ul><li>API分类：开发API接口 和 内网API接口<ul><li>内网：局域网，为内部服务考虑</li><li>外网：外部单位提供接口调用，遵循Oauth2.0权限</li></ul></li><li>考虑安全和幂等性</li></ul><h2 id="21-ZuulFilter-常用那些方法"><a href="#21-ZuulFilter-常用那些方法" class="headerlink" title="21.ZuulFilter 常用那些方法"></a>21.ZuulFilter 常用那些方法</h2><ul><li>Run()：过滤器的具体业务逻辑 </li><li>shouldFilter()：判断过滤器是否有效 </li><li>filterOrder()：过滤器执行顺序 </li><li>filterType()：过滤器拦截位置</li></ul><h2 id="22-实现动态Zuul网关路由转发"><a href="#22-实现动态Zuul网关路由转发" class="headerlink" title="22.实现动态Zuul网关路由转发"></a>22.实现动态Zuul网关路由转发</h2><ul><li>通过path配置拦截请求，通过ServicerId配置中心转发道服务列表，内部使用Ribbon实现本地负载均衡和转发</li></ul><h1 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h1><h2 id="23-Ribbon的作用"><a href="#23-Ribbon的作用" class="headerlink" title="23.Ribbon的作用"></a>23.Ribbon的作用</h2><ul><li>主要功能是提供客户端的软件负载均衡算法，默认是轮询算法。</li></ul><h2 id="24-Ribbon的原理"><a href="#24-Ribbon的原理" class="headerlink" title="24.Ribbon的原理"></a>24.Ribbon的原理</h2><ul><li>Ribbon会从注册中心获取到服务的信息，然后通过轮询算法，从中选择一台机器。</li></ul><h2 id="25-Ribbon和nginx的区别"><a href="#25-Ribbon和nginx的区别" class="headerlink" title="25.Ribbon和nginx的区别"></a>25.Ribbon和nginx的区别</h2><ul><li><strong>nginx：</strong> 反向代理实现负载均衡，相当于从nginx服务器进行请求转发。</li><li><strong>Ribbon：</strong> 客户端负载均衡，全程都是客户端操作。</li></ul><h1 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h1><h2 id="26-作用"><a href="#26-作用" class="headerlink" title="26 作用"></a>26 作用</h2><p>Feign集成了Ribbon，Feign 是一个声明web服务客户端，这使得编写web服务客户端更容易，远程调用更加简单。</p><h2 id="27-SpringCloud有几种调用接口方式"><a href="#27-SpringCloud有几种调用接口方式" class="headerlink" title="27.SpringCloud有几种调用接口方式"></a>27.SpringCloud有几种调用接口方式</h2><p>Feign<br>RestTemplate</p><h2 id="28-Ribbon和Feign调用服务的区别"><a href="#28-Ribbon和Feign调用服务的区别" class="headerlink" title="28.Ribbon和Feign调用服务的区别"></a>28.Ribbon和Feign调用服务的区别</h2><p><strong>Ribbon：</strong> 需要我们自己构建http请求，然后通过RestTemplate去发给其他服务，比较繁琐。<br><strong>Feign：</strong> 不需要自己构建Http请求，直接接口调用就行。</p><h1 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h1><h2 id="29-说一说什么是服务雪崩"><a href="#29-说一说什么是服务雪崩" class="headerlink" title="29.说一说什么是服务雪崩"></a>29.说一说什么是服务雪崩</h2><p>服务雪崩：多个服务相互调用时，A调B，B调C，C调D等等更多调用，那么如果中间调用需要很长时间，然后再去调用A，那么占用的资源就越来越多，导致系统崩溃。</p><h2 id="30-Hystrix断路器是什么"><a href="#30-Hystrix断路器是什么" class="headerlink" title="30.Hystrix断路器是什么"></a>30.Hystrix断路器是什么</h2><p>防止服务雪崩的一个工具，具有服务降级、服务熔断(@HystrixCommand(fallbackMethod = “hystrixById”) //失败了调用的方法)、服务隔离、监控等防止雪崩的技术。</p><h2 id="31-什么是服务降级、服务熔断、服务隔离"><a href="#31-什么是服务降级、服务熔断、服务隔离" class="headerlink" title="31.什么是服务降级、服务熔断、服务隔离"></a>31.什么是服务降级、服务熔断、服务隔离</h2><p><strong>服务降级：</strong> 当出现请求超时、资源不足时(线程或者信号量)，会进行服务降级，就是去返回fallback方法的结果。<br><strong>服务熔断：</strong> 当失败率(网络故障或者超时造成)达到阈值自动触发降级，是一种特殊的降级。<br><strong>服务隔离：</strong> 为隔离的服务开启一个独立的线程，这样在高并发情况下，也不会影响该服务。一般使用线程池实现(还有信号量方式实现)。</p><h2 id="32-服务降级和服务熔断的区别"><a href="#32-服务降级和服务熔断的区别" class="headerlink" title="32.服务降级和服务熔断的区别"></a>32.服务降级和服务熔断的区别</h2><p>区别： 降级每个请求都会发送过去，而熔断不一定，达到失败率，请求就不会再去发送了。请求出错时熔断返回的是fallback数据，而熔断则是一段时间不会去访问服务提供者。<br>比如：<br>①降级：A调B，发送10个请求，即使每个请求都超时，也会去请求B。<br>②熔断：A调B，发送10个请求，失败率设置为50%，如果5个请求失败，此时失败率到了50%，那么后面的5个请求就不会走到B。</p><h1 id="网关-Zuul-和-Gateway"><a href="#网关-Zuul-和-Gateway" class="headerlink" title="网关 Zuul 和 Gateway"></a>网关 Zuul 和 Gateway</h1><h2 id="33-什么是Zuul微服务网关"><a href="#33-什么是Zuul微服务网关" class="headerlink" title="33.什么是Zuul微服务网关"></a>33.什么是Zuul微服务网关</h2><p>接收所有的请求，并且将不同的请求转发至不同的微服务模块。</p><h2 id="34-Zuul的应用场景"><a href="#34-Zuul的应用场景" class="headerlink" title="34.Zuul的应用场景"></a>34.Zuul的应用场景</h2><p>①过滤器<br>②权限认证<br>③降级限流<br>④安全</p><h2 id="35-Gateway"><a href="#35-Gateway" class="headerlink" title="35.Gateway"></a>35.Gateway</h2><p>功能强大丰富，性能好，维护性好，实现异步，可以替代Zuul网关。</p><h1 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h1><h2 id="36-什么是Spring-Cloud-Config"><a href="#36-什么是Spring-Cloud-Config" class="headerlink" title="36.什么是Spring Cloud Config"></a>36.什么是Spring Cloud Config</h2><p>集中管理配置文件，不需要每个服务编写配置文件，服务会向配置中心拉取配置。<br>实时刷新(需要spring cloud bus)。</p><h1 id="Spring-Cloud-Alibaba-Nacos"><a href="#Spring-Cloud-Alibaba-Nacos" class="headerlink" title="Spring Cloud Alibaba Nacos"></a>Spring Cloud Alibaba Nacos</h1><h2 id="37-Nacos可以做什么？"><a href="#37-Nacos可以做什么？" class="headerlink" title="37.Nacos可以做什么？"></a>37.Nacos可以做什么？</h2><p>注册中心和配置中心。</p><h2 id="38-Eureka保证是AP，那么Nacos保证的是什么？默认是什么？"><a href="#38-Eureka保证是AP，那么Nacos保证的是什么？默认是什么？" class="headerlink" title="38.Eureka保证是AP，那么Nacos保证的是什么？默认是什么？"></a>38.Eureka保证是AP，那么Nacos保证的是什么？默认是什么？</h2><p>Nacos可以是AP也可以是CP。默认是AP</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试系列（一）| SpringBoot 面试题</title>
      <link href="/posts/10749.html"/>
      <url>/posts/10749.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="1-什么是-SpringBoot"><a href="#1-什么是-SpringBoot" class="headerlink" title="1.什么是 SpringBoot"></a>1.什么是 SpringBoot</h2><p>Spring组件一站式解决方案，主要简化了 Spring 难度，简省了繁重的配置，提供了各种的启动器，是开发上手快</p><h2 id="2-Spring-Boot-优点"><a href="#2-Spring-Boot-优点" class="headerlink" title="2.Spring Boot 优点"></a>2.Spring Boot 优点</h2><ol><li>开箱即用，原理繁琐配置</li><li>内嵌服务器、安全管理、运行数据监控、运行状态检查、外部化配置</li><li>易上手开发效率高，有完善的第三方start库和官网 starter</li></ol><p>总结：<strong>编码、配置、部署、监控</strong> 简单</p><h2 id="2-SpringBoot-启动类注解？它是由那些注解组成？"><a href="#2-SpringBoot-启动类注解？它是由那些注解组成？" class="headerlink" title="2.SpringBoot 启动类注解？它是由那些注解组成？"></a>2.SpringBoot 启动类注解？它是由那些注解组成？</h2><p>@SpringBootApplication</p><ul><li>@SpringBootConfiguration：组合了@Configuration注解，实现配置文件的功能。</li><li>@EnableAutoConfiguration：打开自动配置的功能，也可以关闭某个自动配置的选项</li><li>@SpringBootApplication(exclude={DataSourceAutoConfiguration.class})</li><li>@ComponentScan：Spring组件扫描</li></ul><h2 id="3-yaml是什么"><a href="#3-yaml是什么" class="headerlink" title="3.yaml是什么"></a>3.yaml是什么</h2><p>用来表达数据序列化的参数</p><h2 id="4-SpringBoot启动方式"><a href="#4-SpringBoot启动方式" class="headerlink" title="4.SpringBoot启动方式"></a>4.SpringBoot启动方式</h2><ol><li>main方法</li><li>命令行 java -jar</li><li>mvn/gradle</li></ol><h2 id="5-SpringBoot-需要独立的容器独立？"><a href="#5-SpringBoot-需要独立的容器独立？" class="headerlink" title="5.SpringBoot 需要独立的容器独立？"></a>5.SpringBoot 需要独立的容器独立？</h2><p>内置了Tomcat/Jetty</p><h2 id="6-SpringBoot自动配置原理"><a href="#6-SpringBoot自动配置原理" class="headerlink" title="6.SpringBoot自动配置原理"></a>6.SpringBoot自动配置原理</h2><pre><code>在sprinBoot启动时由 @SpringBootApplication 注解会自动去maven中读取每个 starter 中的 spring.factories文件,该文件里配置了所有需要被创建spring容器中的bean，并且进行自动配置把 bean注入SpringContext中 //（SpringContext是Spring的配置文件）</code></pre><h2 id="7-SpringBoot监视器是什么，如何配置监控？"><a href="#7-SpringBoot监视器是什么，如何配置监控？" class="headerlink" title="7.SpringBoot监视器是什么，如何配置监控？"></a>7.SpringBoot监视器是什么，如何配置监控？</h2><pre><code>Spring boot actuator 是 spring 启动框架中的重要功能之一。Spring boot 监视器可帮助您访问生产环境中 **正在运行的应用程序的当前状态** 。有几个指标必须在生产环境中进行检查和监控。即使一 些外部应用程序可能正在使用这些服务来向相关人员触发警报消息。监视器模块公开了一组可直接 作为 HTTP URL 访问的REST 端点来检查状态。</code></pre><p>pom.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">management</span><span class="token punctuation">:</span>    <span class="token key atrule">endpoint</span><span class="token punctuation">:</span>        <span class="token key atrule">health</span><span class="token punctuation">:</span> <span class="token comment">## 开启健康监控端点</span>            <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token key atrule">beans</span><span class="token punctuation">:</span> <span class="token comment">## 开启Bean实例监控端点</span>            <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>健康监控开启标志，启动了两个端点，默认之开启 health 和 info 端口</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223093051031.png" title="image-20220223093051031" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223093051031.png" alt="image-20220223093051031"></a>  </p><p>yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">management</span><span class="token punctuation">:</span><span class="token key atrule">endpoints</span><span class="token punctuation">:</span><span class="token key atrule">web</span><span class="token punctuation">:</span><span class="token key atrule">exposure</span><span class="token punctuation">:</span><span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">"*"</span> <span class="token comment">## 开启所有端点暴露</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-查看各个监控信息？"><a href="#8-查看各个监控信息？" class="headerlink" title="8.查看各个监控信息？"></a>8.查看各个监控信息？</h2><p>/actuator 端点 ，默认开启了两个端点，health 和 info</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"_links"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"self"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:9999/actuator"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"health"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:9999/actuator/health"</span><span class="token punctuation">,</span> 查看当前服务的是否上线      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"health-path"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:9999/actuator/health/&#123;*path&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"info"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:9999/actuator/info"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果将所有端点暴露</p><p>访问路径： ip:port/actuator/xx</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223094652254.png" title="image-20220223094652254" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223094652254.png" alt="image-20220223094652254"></a> </p><h3 id="loggers-端点"><a href="#loggers-端点" class="headerlink" title="loggers 端点"></a>loggers 端点</h3><p>访问 <code>http://localhost:8080/actuator/loggers</code> 可以查看当前应用的日志级别等信息：</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223095239970.png" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223095239970.png"></a> </p><p>这里面本身并不特别，但是有一个功能却非常有用，比如我们生产环境日志级别一般都是 info，但是现在有一个 bug 通过 info 级别无法排查，那么我们就可以临时修改 log 级别。</p><p>比如上图中的 ROOT 节点是 info 级别，那么我们可以通过 postman 等工具来发一个 post 请求修改日志级别。 </p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223095330889.png" title="image-20220223095330889" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223095330889.png" alt="image-20220223095330889"></a> </p><p>修改之后就会发现，日志由原来的 info 变成了 debug： </p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223095351178.png" title="image-20220223095351178" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223095351178.png" alt="image-20220223095351178"></a> </p><h3 id="metrics-端点"><a href="#metrics-端点" class="headerlink" title="metrics 端点"></a>metrics 端点</h3><p>非常重要的监控端点，监控内容包含 JVM内存、堆、类加载、处理器和 tomcat 容器等重要的指标</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223095921378.png" title="image-20220223095921378" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223095921378.png" alt="image-20220223095921378"></a> </p><h3 id="自定义监控端点"><a href="#自定义监控端点" class="headerlink" title="自定义监控端点"></a>自定义监控端点</h3><blockquote><p>这一部分之后再详介绍</p></blockquote><h2 id="9-SpringBoot-中的starter"><a href="#9-SpringBoot-中的starter" class="headerlink" title="9.SpringBoot 中的starter?"></a>9.SpringBoot 中的starter?</h2><p>可以理解成对依赖的一种合成，starter会把一个或者一套功能相关的依赖包含进来，避免造轮子。</p><h2 id="10-什么是SpringProfiles"><a href="#10-什么是SpringProfiles" class="headerlink" title="10.什么是SpringProfiles"></a>10.什么是SpringProfiles</h2><p>开发到生产，经过开发（dev）、测试（test）、上线（prod），主要针对不同的的配置。Spring Profiles允许用户根据配置文件（dev/test/prod）来注册bean。</p><h2 id="11-激活不同环境配置"><a href="#11-激活不同环境配置" class="headerlink" title="11.激活不同环境配置"></a>11.激活不同环境配置</h2><p>yml:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">profiles</span><span class="token punctuation">:</span><span class="token key atrule">active</span><span class="token punctuation">:</span> dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>   命令行：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">java -jar xx.jar --spring.profiles.active&#x3D;dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="12-SpringBoot异常处理相关注解？"><a href="#12-SpringBoot异常处理相关注解？" class="headerlink" title="12.SpringBoot异常处理相关注解？"></a>12.SpringBoot异常处理相关注解？</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token annotation punctuation">@ExceptinoHandler</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="13-SpringBoot1-1-和-2-x的区别？"><a href="#13-SpringBoot1-1-和-2-x的区别？" class="headerlink" title="13.SpringBoot1.1 和 2.x的区别？"></a>13.SpringBoot1.1 和 2.x的区别？</h2><ol><li>SpringBoot 2基于Spring5和JDK8，Spring 1.x用的最低版本</li><li>配置变更，参数名</li><li>SpringBoot 2相关插件最低版本很多都要比原来高</li><li>2.x配置中的中文可以直接读取</li></ol><h2 id="14-Spring-Boot-中如何解决跨域问题"><a href="#14-Spring-Boot-中如何解决跨域问题" class="headerlink" title="14. Spring Boot 中如何解决跨域问题 ?"></a>14. Spring Boot 中如何解决跨域问题 ?</h2><pre><code>后端通过 （CORS，Cross origin resource sharing） 来解决跨域问题。这种解决方案并非 Spring Boot 特有的，在传统的 SSM 框架中，就可以通过 CORS 来解决跨域问题，只不过之前我们是在 XML 文件中配置 CORS ， 现在可以通过实现 **WebMvcConfigurer** 接口然后重写 **addCorsMappings** 方法解决跨域问题。</code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">allowedOrigins</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"PUT"</span><span class="token punctuation">,</span> <span class="token string">"DELETE"</span><span class="token punctuation">,</span> <span class="token string">"OPTIONS"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://mp.weixin.qq.com/s/kisvBJABJ27rb6JNZdCyqA">https://mp.weixin.qq.com/s/kisvBJABJ27rb6JNZdCyqA</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java系列（七）| 日志快速入门</title>
      <link href="/posts/29669.html"/>
      <url>/posts/29669.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>日志和异常处理结合得当的话，会给项目维护带来非常大的价值。</p><ul><li>  <strong>日志：</strong>就是介绍一个过程和经历的详细记录。</li><li>  <strong>项目日志：</strong>就是项目开发过程的详细记录，一般由项目经理记录。</li><li>  <strong>代码里的日志：</strong>就是程序员记录某个开发过程的详细情况，这是项目里每个程序员需要做的工作。</li></ul><p>代码里的日志在项目中扮演着非常重要的角色，日志记录的详细程度决定系统是否容易维护，Java 项目中日志记录的框架有很多，在项目中如何选型也必将困惑。</p><p>我们这场 chat 讨论的主题就是：<strong>Java 代码里的日志</strong>，主要是写给 Java 程序员看的，本篇 Chat 从以下六个方面对 Java 日志进行阐述：</p><ul><li>  一、日志在项目中的作用</li><li>  二、Java 日志使用的困惑</li><li>  三、Java 日志演化历史</li><li>  四、使用不同框架的 Java 日志示例说明</li><li>  五、项目中日志记录遵守哪些原则</li><li>  六、一个推荐的项目 Java 日志实例</li></ul><p>以期通过本场 Chat 的学习，能使大家在编码过程中，对日志的处理过程加深认识、统一规范、得到收获，从零开始轻松掌握 Java 日志处理，并且可以运用到实际项目中。</p><h2 id="一、日志在项目中的作用"><a href="#一、日志在项目中的作用" class="headerlink" title="一、日志在项目中的作用"></a>一、日志在项目中的作用</h2><p>Log 日志，主要用于记录程序运行的情况，以便于程序在部署之后的排错调试等，也有利于将这些信息进行持久化（如果不将日志信息保存到文件或数据库，则信息便会丢失）。</p><h3 id="1-查看程序当前运行状态"><a href="#1-查看程序当前运行状态" class="headerlink" title="1. 查看程序当前运行状态"></a>1. 查看程序当前运行状态</h3><p>如果想了解程序当前的运行情况，我们通过实时查看应用日志的输出，就能进行分析。</p><p>比如，你在浏览器里输入一个 action 地址，该 url 负责执行一些批量处理，action 运行后，假设处理比较耗时，你再浏览器里无法直接看到程序的执行结果，此时，你可以打开系统日志，通过从日志输出信息就能轻松地分析该 url 的执行情况。</p><h3 id="2-查看程序历史运行轨迹"><a href="#2-查看程序历史运行轨迹" class="headerlink" title="2. 查看程序历史运行轨迹"></a>2. 查看程序历史运行轨迹</h3><p>如果想了解历时程序的运行情况，我们通过查看应用历时日志的输出，就能进行分析。</p><p>比如，你想了解下上周周末用户访问量，你可以打开系统上周周末的日志记录，进行分析。你想了解昨天的某个定时任务是否正常执行，你可以打开昨天的系统日志，精确查找该定时任务的输出信息，从而判断定时任务是否执行。</p><h3 id="3-排查系统问题"><a href="#3-排查系统问题" class="headerlink" title="3. 排查系统问题"></a>3. 排查系统问题</h3><p>排查系统问题是程序员最熟悉的味道了，在项目维护过程中，出了任何问题，都需要程序员去进行排查。此时，如果没有清楚明了的日志记录，想要核查出问题的原因，难于上青天。</p><p>一个优秀的程序员一定是个日志记录高手，如果日志记录的好，处理得当，排查问题则易如反掌。</p><p>大家有没有遇到一种场景，一个问题发生了，有的人能迅速定位问题并解决，有的人搞了半天，还没发现问题的产生原因。</p><p>其实快速定位问题的人一定记录了详细的日志，因此当问题发生的时候，通过核查问题发生时候的日志，就能快速的找出问题产生的原因。</p><h3 id="4-优化系统性能"><a href="#4-优化系统性能" class="headerlink" title="4. 优化系统性能"></a>4. 优化系统性能</h3><p>通过记录程序运行的时间，就能判断程序从执行开始到执行结束消耗的时间，从而判断系统性能是否达标，为系统性能优化提供判断依据。</p><h3 id="5-安全审计的基石"><a href="#5-安全审计的基石" class="headerlink" title="5. 安全审计的基石"></a>5. 安全审计的基石</h3><p>网络安全越来越受到大家的关注，所以系统安全目前是项目过程非常重要的一个环节，安全审计也是系统中非常重要的部分。</p><p>通过系统日志分析，可以判断一些非法攻击，非法调用，以及系统处理过程中的安全隐患。</p><p>比如，大家平时都在做运营系统，其中运营人员在通过界面处理一些数据的时候，如果没有清楚的日志操作记录，一条数据被删除或者修改，你是无法找到是谁操作的，但是如果你做了相应的记录，该数据被谁删除或者修改就会一目了然。</p><p><strong>通过以上 5 点说明了日志在项目维护过程中的重要作用</strong></p><p>一个系统是否容易维护，很大程度上是基于程序员在程序开发过程中的代码日志是怎么记录的。</p><p>日志记录的越清楚，维护起来就越容易，有的程序员没有日志记录意识，或者对日志记录认识不清，或者是不知道日志该如何记录，这势必会给项目后期的维护带来一个个大坑。</p><p>当项目经理让你解决一个线上问题的时候，正好遇到了一个没有日志记录习惯的人写的代码，你就能体会到那种痛苦，不由地想要爆粗口。</p><p>因此，作为一个程序员来说，掌握代码日志的记录方法，是程序员生涯的一项基本功。写代码时做好日志记录是 “即利人又利己” 的做法，不写日志记录就是 “损人不利己” 的做法。</p><h2 id="二、Java-日志使用的困惑"><a href="#二、Java-日志使用的困惑" class="headerlink" title="二、Java 日志使用的困惑"></a>二、Java 日志使用的困惑</h2><p>大多数的程序员都能认识到日志在项目中的重要性，可是对日志记录具体要怎么做，做到什么程度，日志记录用什么工具，会有很多困惑。</p><h3 id="1-工具困惑"><a href="#1-工具困惑" class="headerlink" title="1. 工具困惑"></a>1. 工具困惑</h3><p>作为 Java 程序员，幸运的是，Java 拥有功能和性能都非常强大的日志库；不幸的是，这样的日志库有不止一个，相信每个人都会对 JUL(Java Util Log)、JCL(Commons Logging)、Log4j、SLF4J、Logback、Log4j2 等等的日志工具，到底使用什么产生感到困扰。</p><p>下面的第三节：“Java 日志演化历史”，第四节：“使用不同框架的 Java 日志示例说明”，为大家解惑 Java 日志框架的使用问题。</p><h3 id="2-使用困惑"><a href="#2-使用困惑" class="headerlink" title="2. 使用困惑"></a>2. 使用困惑</h3><p>有的程序员即使知道写 Java 程序用什么日志工具，可能对日志记录具体应该怎么写，写什么东西，什么情况下要写，这些仁者见仁智者见智的东西也会产生困扰。</p><p>下面的第五节：“项目中日志记录遵守哪些原则”，为大家解惑日志记录要遵守哪些原则。</p><p>有的程序员知道了该用哪个 Java 框架，也知道了日志记录的原则，可能还会对具体在项目中到底该如何操作产生困惑。</p><h3 id="3-实战困惑"><a href="#3-实战困惑" class="headerlink" title="3. 实战困惑"></a>3. 实战困惑</h3><p>下面的第六节：“一个推荐的项目 Java 日志实例”，为大家展示在具体项目过程中的应用示例。</p><h2 id="三、Java-日志演化历史"><a href="#三、Java-日志演化历史" class="headerlink" title="三、Java 日志演化历史"></a>三、Java 日志演化历史</h2><p>最先出现的是 Apache 开源社区的 Log4j，这个日志确实是应用最广泛的日志工具，成为了 Java 日志的事实上的标准。</p><p>然而，当时 Java 的开发主体 Sun 公司认为自己才是正统，在 Jdk1.4 中增加了 JUL（在 java.util.logging 包下）日志实现，企图对抗 Log4j，但是却造成了 Java 目前开发者记录日志局面的混乱，迄今为止仍饱受诟病。</p><p>当然也有其他日志工具的出现，基本都是各自为政，这些日志系统互相没有关联。</p><p><strong>为什么 JUL 的出现会导致开发局面混乱呢？</strong></p><p>想象下你的项目应用使用 Log4j，然后使用了一个第三方库，而第三方库使用了 JUL，那么，你的应用就得同时使用 Log4j 和 JUL 两个日志工具了，然后又有需要使用另外一个第三方库，但是这个第三方库使用了 Log4j 和 JUL 之外的 simplelog。这个时候你的应用里各种 log 工具满天飞，这势必会使你的程序员感到崩溃。因为这些日志工具互相没有关联，替换和统一日志工具也就变成了比较棘手的一件事情。</p><blockquote><p>如果你遇到了这种问题，你该如何解决呢？<br>解决这个问题，我们会用到一个设计模式——“适配器模式”，即把这个问题进行抽象，抽象出一个接口层，对每个日志实现都进行适配，这样这些提供给别人的库都直接使用抽象的接口层即可。</p></blockquote><p>为了搞定这个日常开发中比较棘手的问题，Apache 开源社区提供了一个日志框架作为日志的抽象，叫 commons-logging，也被称为 JCL(java common logging)，JCL 对各种日志接口进行抽象，抽象出一个接口层，对每个日志实现都进行适配，这样这些提供给别人的库都直接使用抽象层即可，确实出色地完成了兼容主流的日志实现（Log4j、JUL、simplelog 等），较好的解决了上述问题，基本一统江湖，就连顶顶大名的 spring 也是依赖了 JCL。</p><p>但是美好的日子并不长，作为元老级日志 Log4j 的作者 (Ceki Gülcü)，他觉得 JCL 不够优秀，所以他再度出山，搞出了一套更优雅的日志框架 SLF4J（这个也是抽象层），即简单日志门面（Simple Logging Facade for Java），并为 SLF4J 实现了一个亲儿子——logback，确实更加优雅了。</p><p>最后，Ceki Gülcü 觉得还是得照顾下自己的 “大儿子”——Log4j，又把 Log4j 进行了改造，就是所谓的 Log4j2，同时支持 JCL 以及 SLF4J。</p><p>SLF4J 的出现，又使 Java 日志体系变得混乱起来。</p><p>下面是一张目前 Java 日志体系的示意图：</p><p><a href="https://pic3.zhimg.com/v2-1d6add0536d2266211f2569a84a681ae_r.jpg" class="gallery-item"><img src="https://pic3.zhimg.com/v2-1d6add0536d2266211f2569a84a681ae_r.jpg"></a></p><p>日志库 Log4j，JUL，logback 是互相不兼容的，没有共同的 Interface，所以 commons-logging、SLF4J 通过适配器模式，抽象出来一个共同的接口，然后根据使用的具体日志框架来实现日志。</p><p>java common logging 和 SLF4J 都是日志的接口，供用户使用，而没有提供实现，Log4j，JUL，logback 等等才是日志的真正实现。</p><p>当我们调用日志接口时，接口会自动寻找恰当的实现，返回一个合适的实例给我们服务。这些过程都是透明化的，用户不需要进行任何操作。</p><p>工具官方网站 Log4j<a href="http://logging.apache.org/log4j/1.2">http://logging.apache.org/log4j/1.2</a>JCL<a href="http://commons.apache.org/proper/commons-logging/">http://commons.apache.org/proper/commons-logging/</a>SLF4J<a href="http://www.slf4j.org/">http://www.slf4j.org</a>logback<a href="http://logback.qos.ch/">http://logback.qos.ch</a>Log4j2<a href="https://logging.apache.org/log4j/2.x/">https://logging.apache.org/log4j/2.x/</a></p><h2 id="四、使用不同框架的-Java-日志示例说明"><a href="#四、使用不同框架的-Java-日志示例说明" class="headerlink" title="四、使用不同框架的 Java 日志示例说明"></a>四、使用不同框架的 Java 日志示例说明</h2><h3 id="1-Log4j"><a href="#1-Log4j" class="headerlink" title="1. Log4j"></a>1. Log4j</h3><h3 id="Log4j-介绍"><a href="#Log4j-介绍" class="headerlink" title="Log4j 介绍"></a><strong>Log4j 介绍</strong></h3><p>Log4j（log for java）是 Apache 的一个开源项目，通过使用 Log4j，我们可以控制日志信息输出到日志文件、也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用程序的代码。</p><h3 id="Log4j-使用步骤说明"><a href="#Log4j-使用步骤说明" class="headerlink" title="Log4j 使用步骤说明"></a><strong>Log4j 使用步骤说明</strong></h3><p><strong>（1）选择 jar 包</strong></p><p>加入 log4j-1.2.17.jar 到 Libraries 下，如果使用 maven 项目，也可以选择在 pom.xml 中新增依赖如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（2）log4j.properties 配置</strong></p><p>Log4j 有三个主要组件：记录器， appender 和布局。这三种类型的组件协同工作，使开发人员能够根据消息类型和级别记录消息，并在运行时控制这些消息的格式和报告位置。</p><p>Log4j 建议只使用四个级别，优先级从高到低分别是 ERROR、WARN、INFO、DEBUG。</p><p>比如定义了 INFO 级别，只有等于及高于这个级别的才进行处理，则应用程序中所有 DEBUG 级别的日志信息将不被打印出来。ALL，打印所有的日志；OFF，关闭所有的日志输出。</p><p>appenderName，就是指定日志信息输出到哪个地方。可同时指定多个输出目的地。</p><p>在 src 根目录下建立 log4j.properties，根据自己的需求，相应的修改其中的配置，其内容如下所示：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#配置根Logger</span><span class="token comment">    #改代码表示输输出info级别以上的日志，文件分别输出，一个是file，一个是error</span><span class="token key attr-name">    log4j.rootLogger</span><span class="token punctuation">=</span><span class="token value attr-value">info,file,error</span><span class="token comment">    #配置file日志信息输出目的地Appender</span><span class="token comment">    #定义名为file的输出端是每天产生一个日志文件</span><span class="token key attr-name">    log4j.appender.file</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.log4j.DailyRollingFileAppender</span><span class="token comment">    #指定日志信息的最低输出级别位INFO，默认为DEBUG。</span><span class="token key attr-name">    log4j.appender.file.Threshold</span><span class="token punctuation">=</span><span class="token value attr-value">INFO</span><span class="token comment">    #指定当前消息输出到jpm/log4j/log.log文件中</span><span class="token key attr-name">    log4j.appender.file.File</span><span class="token punctuation">=</span><span class="token value attr-value">/jpm/log4j/log.log</span><span class="token comment">    #指定按天来滚动日志文件</span><span class="token key attr-name">    log4j.appender.file.DatePattern</span><span class="token punctuation">=</span><span class="token value attr-value">yyyy-MM-dd</span><span class="token comment">    #配置日志信息的格式（布局）Layout是可以灵活地指定布局模式</span><span class="token key attr-name">    log4j.appender.file.layout</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.log4j.PatternLayout</span><span class="token comment">    #格式化日志，Log4j采用类似C语言中的printf函数的打印格式格式化日志信息</span><span class="token key attr-name">    log4j.appender.file.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token value attr-value">[%d&#123;yyyy-MM-ddHH:mm:ss&#125;][%-5p][jpm-%c&#123;1&#125;-%M(%L)]-%m%n</span><span class="token comment">    #指定输出信息的编码</span><span class="token key attr-name">    log4j.appender.file.encoding</span><span class="token punctuation">=</span><span class="token value attr-value">UTF-8</span><span class="token comment">    #配置error日志信息输出目的地Appender</span><span class="token comment">    #定义名为error的输出端是每天产生一个日志文件</span><span class="token key attr-name">    log4j.appender.error</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.log4j.DailyRollingFileAppender</span><span class="token comment">    #指定日志信息的最低输出级别位ERROR，默认为DEBUG。</span><span class="token key attr-name">    log4j.appender.error.Threshold</span><span class="token punctuation">=</span><span class="token value attr-value">ERROR</span><span class="token comment">    #指定当前消息输出到jpm/log4j/error.log文件中</span><span class="token key attr-name">    log4j.appender.error.File</span><span class="token punctuation">=</span><span class="token value attr-value">/jpm/log4j/error.log</span><span class="token comment">    #指定按月来滚动日志文件</span><span class="token key attr-name">    log4j.appender.error.DatePattern</span><span class="token punctuation">=</span><span class="token value attr-value">yyyy-MM</span><span class="token comment">    #配置日志信息的格式（布局）Layout是可以灵活地指定布局模式</span><span class="token key attr-name">    log4j.appender.error.layout</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.log4j.PatternLayout</span><span class="token comment">    #格式化日志，Log4j采用类似C语言中的printf函数的打印格式格式化日志信息</span><span class="token key attr-name">    log4j.appender.error.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token value attr-value">[%d&#123;yyyy-MM-ddHH:mm:ss&#125;][%-5p][jpm-%c&#123;1&#125;-%M(%L)]-%m%n</span><span class="token comment">    #指定输出信息的编码</span><span class="token key attr-name">    log4j.appender.error.encoding</span><span class="token punctuation">=</span><span class="token value attr-value">UTF-8</span><span class="token comment">    #使某个功能的日志单独输出到指定的日志文件</span><span class="token key attr-name">    log4j.logger.saveUserLog</span><span class="token punctuation">=</span><span class="token value attr-value">INFO,saveUserLog</span><span class="token comment">    #该配置就是让job的日志只输出到自己指定的日志文件中,表示Logger不会在父Logger的appender里输出，默认为true。</span><span class="token key attr-name">    log4j.additivity.saveUserLog</span><span class="token punctuation">=</span><span class="token value attr-value">false</span><span class="token key attr-name">    log4j.appender.saveUserLog</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.log4j.DailyRollingFileAppender</span><span class="token key attr-name">    log4j.appender.saveUserLog.File</span><span class="token punctuation">=</span><span class="token value attr-value">/jpm/log4j/saveUserLog.log</span><span class="token key attr-name">    log4j.appender.saveUserLog.DatePattern</span><span class="token punctuation">=</span><span class="token value attr-value">yyyy-MM-dd</span><span class="token key attr-name">    log4j.appender.saveUserLog.Append</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token key attr-name">    log4j.appender.saveUserLog.layout</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.log4j.PatternLayout</span><span class="token key attr-name">    log4j.appender.saveUserLog.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token value attr-value">%m%n</span><span class="token key attr-name">    log4j.appender.error.encoding</span><span class="token punctuation">=</span><span class="token value attr-value">UTF-8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（3）输出日志的代码示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">jpm</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLog4j</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">TestLog4j</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token class-name">Logger</span> saveUserLog <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"saveUserLog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"debug"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            saveUserLog<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"张三,男,26岁,北京大学,2018-05-19,学霸"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（4）以上代码示例生成的日志文件及日志详情</strong></p><p><a href="https://pic1.zhimg.com/v2-a8903ca4a3d5f97a1d696998fc00e150_b.jpg" class="gallery-item"><img src="https://pic1.zhimg.com/v2-a8903ca4a3d5f97a1d696998fc00e150_b.jpg"></a><a href="https://pic1.zhimg.com/v2-28c0f94b7a08b1d3526714e7f53f83c4_r.jpg" class="gallery-item"><img src="https://pic1.zhimg.com/v2-28c0f94b7a08b1d3526714e7f53f83c4_r.jpg"></a></p><h3 id="2-JUL（在-java-util-logging-包下）使用示例"><a href="#2-JUL（在-java-util-logging-包下）使用示例" class="headerlink" title="2. JUL（在 java.util.logging 包下）使用示例"></a>2. JUL（在 java.util.logging 包下）使用示例</h3><h3 id="JUL-介绍"><a href="#JUL-介绍" class="headerlink" title="JUL 介绍"></a><strong>JUL 介绍</strong></h3><p>Java Logging API 是 Sun 公司于 2002 年 5 月正式发布的。它是自 J2SE 1.4 版本开始提供的一个新的应用程序接口，需 JDK1.4 版本以上才能支持，java.util.logging.* 包是 JDK 的日志记录 API。</p><p><a href="https://pic2.zhimg.com/v2-66266d98c49b4d310d53694cfdc74b01_r.jpg" class="gallery-item"><img src="https://pic2.zhimg.com/v2-66266d98c49b4d310d53694cfdc74b01_r.jpg"></a></p><p><strong>强烈不推荐使用 java.util.logging 记录日志，因此这里不提供对应示例给大家。</strong></p><h3 id="3-java-common-logging-介绍"><a href="#3-java-common-logging-介绍" class="headerlink" title="3. java common logging 介绍"></a>3. java common logging 介绍</h3><p>commons-logging 提供的是一个日志接口，是为那些需要建立在不同环境下使用不同日志架构的组件或库的开发者创建的，其中包括 log4j 以及 Java log 的日志架构。commons-logging 有两个基本的抽象类：Log(基本记录器) 和 <code>LogFactory</code>(负责创建 Log 实例)。把日志信息抽象成 commons-logging 的 Log 接口，并由 commons-logging 在运行时决定使用哪种日志架构。因为 Log4j 的强大功能，commons-logging 一般会和 Log4j 一起使用，这几乎成为了 Java 日志的标准工具。</p><h3 id="4-SLF4J-介绍"><a href="#4-SLF4J-介绍" class="headerlink" title="4. SLF4J 介绍"></a>4. SLF4J 介绍</h3><p>SLF4J 全称为 Simple Logging Facade for JAVA，即 java 简单日志门面。 和 commons-loging 一样也是对不同日志框架提供的一个门面封装，可以在部署的时候不修改任何配置即可接入一种日志实现方案，能支持多个参数，并通过 {} 占位符进行替换。</p><p><strong>看这个 Log4J 示例：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Hello "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于字符串拼接的问题（注：上述语句会先拼接字符串，再根据当前级别是否低于 debug 决定是否输出本条日志，即使不输出日志，字符串拼接操作也会执行），因此许多公司一般强制使用下面的语句，这样只有当前处于 DEBUG 级别时才会执行字符串拼接：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>“<span class="token class-name">Hello</span> ” <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>它避免了字符串拼接问题，可是有点太繁琐了。而 SLF4J 提供下面这样简单的语法:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Hello &#123;&#125;"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它的形式类似第一条示例，但是又没有字符串拼接问题，也不像第二条那样繁琐。</p><p>正是因为 SLF4J 的这个占位符功能，使得人们越来越多的使用 SLF4J 这个接口用到实际开发项目中。</p><p><strong>为什么需要日志接口，直接使用具体的实现不就行了吗？</strong></p><p>接口用于定制规范，可以有多个实现，使用时是面向接口的（导入的包都是 SLF4J 的包或者是 JCL 的包，而不是具体某个日志框架中的包），即直接和接口交互，不直接使用实现，所以当需要更换实现的时候，直接更换实就可以了，而不用更改代码中的日志相关代码。</p><p>比如：SLF4J 定义了一套日志接口，项目中使用的日志框架是 log4j，开发中调用的所有接口都是 SLF4J 的，不直接使用 log4j，项目应用调用 SLF4J 的接口，SLF4J 的接口去调用 log4j 的实现，整个应用程序并没有直接使用 log4j，当项目需要更换更加优秀的日志框架时（如 logback）只需要引入 logback 的 jar 和 logback 对应的配置文件即可，完全不用更改 Java 代码中的日志相关的代码 <a href="http://logger.info/">http://logger.info</a>(“hello world”)，也不用修改日志相关的类的导入的包（import org.slf4j.Logger; import org.slf4j.LoggerFactory;）。</p><p>因此日志门面的使用，为后续具体日志系统的实现更换带来了方便。</p><h3 id="5-logback-使用示例"><a href="#5-logback-使用示例" class="headerlink" title="5. logback 使用示例"></a>5. logback 使用示例</h3><h3 id="LogBack-介绍"><a href="#LogBack-介绍" class="headerlink" title="LogBack 介绍"></a><strong>LogBack 介绍</strong></h3><p><code>LogBack</code> 和 Log4j 都是开源日记工具库，<code>LogBack</code> 是 Log4j 的改良版本，比 Log4j 拥有更多的特性，同时也带来很大性能提升。<code>LogBack</code> 官方建议配合 Slf4j 使用，这样可以灵活地替换底层日志框架。</p><p><code>Logback</code> 主要由三个模块组成：</p><ul><li>  logback-core</li><li>  logback-classic</li><li>  logback-access</li></ul><p>其中 logback-core 提供了 LogBack 的核心功能，是另外两个组件的基础。logback-classic 的地位和作用等同于 Log4J，它也被认为是 Log4J 的一个改进版，并且它实现了简单日志门面 SLF4J，所以当想配合 SLF4J 使用时，需要将 logback-classic 加入 classpath；而 logback-access 主要作为一个与 Servlet 容器交互的模块，比如说 tomcat 或者 jetty，提供一些与 HTTP 访问相关的功能。</p><h3 id="logback-使用步骤说明"><a href="#logback-使用步骤说明" class="headerlink" title="logback 使用步骤说明"></a><strong>logback 使用步骤说明</strong></h3><p><strong>（1）选择 jar 包</strong></p><p>想在 Java 程序中使用 Logback，需要依赖三个 jar 包，分别是 slf4j-api，logback-core，logback-classic。其中 slf4j-api 并不是 Logback 的一部分，建议将 SLF4J 与 Logback 结合使用。</p><p><strong>pom.xml</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-access<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（2）logback.xml</strong></p><p>在 src 根目录下建立 logback.xml，根据自己的需求，相应的修改其中的配置，其内容如下所示：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>    <span class="token comment">&lt;!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL --></span>    <span class="token comment">&lt;!-- status用来指定log4j本身的打印日志的级别 --></span>    <span class="token comment">&lt;!--monitorInterval：Log4j能够自动检测修改配置文件和重新配置本身，设置间隔秒数 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">status</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WARN<span class="token punctuation">"</span></span> <span class="token attr-name">monitorInterval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--先定义所有的appender --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appenders</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--这个输出控制台的配置 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>console</span> <span class="token punctuation">></span></span>                <span class="token comment">&lt;!--输出日志的格式 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span>                    <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l %logger&#123;36&#125; - %msg%n<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>console</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--定义输出到指定位置的文件 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>File</span> <span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span>                    <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l %logger&#123;36&#125; - %msg%n<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>File</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RollingFile</span>                 <span class="token attr-name">filePattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/jpm/log4j2/logs/$$&#123;date:yyyy-MM&#125;/info-%d&#123;yyyy-MM-dd&#125;-%i.log<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） --></span>                <span class="token comment">&lt;!-- DENY，日志将立即被抛弃不再经过其他过滤器； NEUTRAL，有序列表里的下个过滤器过接着处理日志； ACCEPT，日志会被立即处理，不再经过剩余过滤器。 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThresholdFilter</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span>                    <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span>                    <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l %logger&#123;36&#125; - %msg%n<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Policies</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TimeBasedTriggeringPolicy</span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SizeBasedTriggeringPolicy</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100 MB<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Policies</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了30 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DefaultRolloverStrategy</span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RollingFile</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RollingFile</span>                 <span class="token attr-name">filePattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/jpm/log4j2/logs/$$&#123;date:yyyy-MM&#125;/error-%d&#123;yyyy-MM-dd&#125;-%i.log<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThresholdFilter</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ERROR<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span>                    <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span>                    <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l %logger&#123;36&#125; - %msg%n<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Policies</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TimeBasedTriggeringPolicy</span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SizeBasedTriggeringPolicy</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100 MB<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Policies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RollingFile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appenders</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--只有定义了logger并引入的appender，appender才会生效 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>loggers</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--过滤掉spring和mybatis的一些无用的DEBUG信息 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RollingFileInfo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RollingFileError<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>loggers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（3）输出日志的代码示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">jpm<span class="token punctuation">.</span>logback</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span>    <span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLogback</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Logger</span> <span class="token constant">LOGGER</span> <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">TestLogback</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"print debug log."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"print info log."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"print error log."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（4）打印日志结果</strong></p><p><a href="https://pic3.zhimg.com/v2-e5cf7e342e2821235428d3f1c33a7cd2_b.jpg" class="gallery-item"><img src="https://pic3.zhimg.com/v2-e5cf7e342e2821235428d3f1c33a7cd2_b.jpg"></a><a href="https://pic3.zhimg.com/v2-9c2ceb4f73b1771b0fde829117e9d33a_r.jpg" class="gallery-item"><img src="https://pic3.zhimg.com/v2-9c2ceb4f73b1771b0fde829117e9d33a_r.jpg"></a></p><p><strong>上例使用 SLF4J 做日志接口， logback 做日志实现的日志示例</strong></p><h3 id="6-Log4j2-使用示例"><a href="#6-Log4j2-使用示例" class="headerlink" title="6. Log4j2 使用示例"></a>6. Log4j2 使用示例</h3><h3 id="Log4j2-介绍"><a href="#Log4j2-介绍" class="headerlink" title="Log4j2 介绍"></a><strong>Log4j2 介绍</strong></h3><p>Apache Log4j 2 是对 Log4j 的升级，与其前身 Log4j 1.x 相比有了显着的改进，并提供了许多 Logback 可用的改进，同时支持 JCL 以及 SLF4J。</p><h3 id="Log4j2-使用步骤说明"><a href="#Log4j2-使用步骤说明" class="headerlink" title="Log4j2 使用步骤说明"></a><strong>Log4j2 使用步骤说明</strong></h3><p><strong>（1）选择 jar 包</strong></p><p>引入 Log4j2 必要的包：log4j-api、log4j-core。</p><p><strong>pom.xml 配置</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（2）log2j 配置文件：log4j2.xml</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>    <span class="token comment">&lt;!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL --></span>    <span class="token comment">&lt;!-- status用来指定Log4j本身的打印日志的级别 --></span>    <span class="token comment">&lt;!--monitorInterval：Log4j能够自动检测修改配置文件和重新配置本身，设置间隔秒数 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">status</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WARN<span class="token punctuation">"</span></span> <span class="token attr-name">monitorInterval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--先定义所有的appender --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appenders</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--这个输出控制台的配置 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>console</span> <span class="token punctuation">></span></span>                <span class="token comment">&lt;!--输出日志的格式 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span>                    <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l %logger&#123;36&#125; - %msg%n<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>console</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--定义输出到指定位置的文件 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>File</span> <span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span>                    <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l %logger&#123;36&#125; - %msg%n<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>File</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RollingFile</span>                 <span class="token attr-name">filePattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/jpm/log4j2/logs/$$&#123;date:yyyy-MM&#125;/info-%d&#123;yyyy-MM-dd&#125;-%i.log<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThresholdFilter</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span>                    <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span>                    <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l %logger&#123;36&#125; - %msg%n<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Policies</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TimeBasedTriggeringPolicy</span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SizeBasedTriggeringPolicy</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100 MB<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Policies</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了30 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DefaultRolloverStrategy</span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RollingFile</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RollingFile</span>                 <span class="token attr-name">filePattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/jpm/log4j2/logs/$$&#123;date:yyyy-MM&#125;/error-%d&#123;yyyy-MM-dd&#125;-%i.log<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThresholdFilter</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span>                    <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span>                    <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l %logger&#123;36&#125; - %msg%n<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Policies</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TimeBasedTriggeringPolicy</span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SizeBasedTriggeringPolicy</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100 MB<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Policies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RollingFile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appenders</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--只有定义了logger并引入的appender，appender才会生效 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>loggers</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--过滤掉spring和mybatis的一些无用的DEBUG信息 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RollingFileInfo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RollingFileError<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>loggers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（3）输出日志的代码示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">jpm<span class="token punctuation">.</span>log4j2</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span><span class="token class-name">LogManager</span></span><span class="token punctuation">;</span>    <span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLog4j2</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token class-name">Logger</span> <span class="token constant">LOGGER</span> <span class="token operator">=</span> <span class="token class-name">LogManager</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LogManager</span><span class="token punctuation">.</span><span class="token constant">ROOT_LOGGER_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"TestLog4j2 debug log."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestLog4j2 info log."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"TestLog4j2 error log."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（4）打印日志结果</strong></p><p><a href="https://pic1.zhimg.com/v2-be11d8203d8c529c9a9020a05967bdf8_b.jpg" class="gallery-item"><img src="https://pic1.zhimg.com/v2-be11d8203d8c529c9a9020a05967bdf8_b.jpg"></a><a href="https://pic1.zhimg.com/v2-2f11d92ede4c1418d88ca05e481cf044_r.jpg" class="gallery-item"><img src="https://pic1.zhimg.com/v2-2f11d92ede4c1418d88ca05e481cf044_r.jpg"></a></p><p><strong>（5）关于日志 level</strong></p><p>共有 8 个级别，按照从低到高为：All &lt; Trace &lt; Debug &lt; Info &lt; Warn &lt; Error &lt; Fatal &lt; OFF。</p><ul><li>  <strong>All：</strong>最低等级的，用于打开所有日志记录</li><li>  <strong>Trace：</strong>是追踪，就是程序推进以下，你就可以写个 trace 输出，所以 trace 应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出</li><li>  <strong>Debug：</strong>指出细粒度信息事件对调试应用程序是非常有帮助的</li><li>  <strong>Info：</strong>消息在粗粒度级别上突出强调应用程序的运行过程</li><li>  <strong>Warn：</strong>输出警告及 warn 以下级别的日志</li><li>  <strong>Error：</strong>输出错误信息日志</li><li>  <strong>Fatal：</strong>输出每个严重的错误事件将会导致应用程序的退出的日志</li><li>  <strong>OFF：</strong>最高等级的，用于关闭所有日志记录</li></ul><p>程序会打印高于或等于所设置级别的日志，设置的日志等级越高，打印出来的日志就越少。</p><h3 id="7-JCL-java-common-logging-Log4j-使用示例"><a href="#7-JCL-java-common-logging-Log4j-使用示例" class="headerlink" title="7. JCL(java common logging) + Log4j 使用示例"></a>7. JCL(java common logging) + Log4j 使用示例</h3><h3 id="JCL-java-common-logging-Log4j-介绍"><a href="#JCL-java-common-logging-Log4j-介绍" class="headerlink" title="JCL(java common logging) + Log4j 介绍"></a><strong>JCL(java common logging) + Log4j 介绍</strong></h3><p>使用 commons-logging 的 Log 接口，并由 commons-logging 在运行时决定使用哪种日志架构（如 Log4j）。现在，Apache 通用日志工具 commons-logging 和 Log4j 已经成为 Java 日志的标准工具，这个组合是比较常用的一个日志框架组合。</p><h3 id="JCL-java-common-logging-Log4j-使用步骤说明"><a href="#JCL-java-common-logging-Log4j-使用步骤说明" class="headerlink" title="JCL(java common logging) + Log4j 使用步骤说明"></a><strong>JCL(java common logging) + Log4j 使用步骤说明</strong></h3><p><strong>（1）选择 jar 包</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">commons-logging-1.2 + log4j1.2.17<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>pom.xml</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（2）配置 common-logging.properties 文件</strong></p><p>只需要一行即可，放在 classpath 下，如果是 Maven 中就在 src/resources 下，不过如果没有 common-logging.properties 文件，但是 src 下有 log4j.properties 配置也可以正常的输出 Log4j 设置的日志。</p><pre class="line-numbers language-none"><code class="language-none">org.apache.commons.logging.Log&#x3D;org.apache.commons.logging.impl.Log4JLogger<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>（3）log4j.properties 配置</strong></p><p>参考《Log4j 使用步骤说明》</p><p><strong>（4）输出日志的代码示例</strong></p><pre class="line-numbers language-none"><code class="language-none">package jpm.jcllog4j;    import org.apache.commons.logging.Log;    import org.apache.commons.logging.LogFactory;    public class TestJclAndLog4j &#123;        public static void main(String[] args) &#123;            final Log LOGGER &#x3D; LogFactory.getLog(TestJclAndLog4j.class);            LOGGER.debug(&quot;TestJclAndLog4j debug log.&quot;);            LOGGER.info(&quot;TestJclAndLog4j info log.&quot;);            LOGGER.error(&quot;TestJclAndLog4j error log.&quot;);        &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（5）打印日志结果</strong></p><p><a href="https://pic2.zhimg.com/v2-953e2376a2fac3d9af730ceb2ca40a81_b.jpg" class="gallery-item"><img src="https://pic2.zhimg.com/v2-953e2376a2fac3d9af730ceb2ca40a81_b.jpg"></a><a href="https://pic1.zhimg.com/v2-f3927da8d2998d641730acb45ca0cf0c_r.jpg" class="gallery-item"><img src="https://pic1.zhimg.com/v2-f3927da8d2998d641730acb45ca0cf0c_r.jpg"></a></p><h3 id="8-SLF4J-Log4j-使用示例"><a href="#8-SLF4J-Log4j-使用示例" class="headerlink" title="8. SLF4J + Log4j 使用示例"></a>8. SLF4J + Log4j 使用示例</h3><h3 id="SLF4J-Log4j-介绍"><a href="#SLF4J-Log4j-介绍" class="headerlink" title="SLF4J + Log4j 介绍"></a><strong>SLF4J + Log4j 介绍</strong></h3><p>SLF4j+Log4j 与 JCL+Log4J 的使用方式差不多，主要差异就在 SLF4J 用 用绑定包（slf4j-Log4j12.jar）来告知用哪种日志实现，而 JCL 是通过配置文件来获得该选择哪个日志实现。</p><h3 id="SLF4J-Log4j-使用步骤说明"><a href="#SLF4J-Log4j-使用步骤说明" class="headerlink" title="SLF4J + Log4j 使用步骤说明"></a><strong>SLF4J + Log4j 使用步骤说明</strong></h3><p><strong>（1）选择 jar 包</strong></p><pre class="line-numbers language-none"><code class="language-none">slf4j-api.jar + slf4j-log4j12.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>pom.xml</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（2）log4j.properties 配置文件</strong></p><p>参考《Log4j 使用步骤说明》</p><p><strong>（3）输出日志的代码示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">jpm<span class="token punctuation">.</span>slf4jlog4j</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span>    <span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSlf4jAndLog4j</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token class-name">Logger</span> <span class="token constant">LOGGER</span> <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">TestSlf4jAndLog4j</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"TestSlf4jAndLog4j debug log：&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token string">"debug"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestSlf4jAndLog4j info log：&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"TestSlf4jAndLog4j error log：&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（4）打印日志结果</strong></p><p><a href="https://pic1.zhimg.com/v2-990aca0df5ebd71d0a29ebad5a5d6858_b.jpg" class="gallery-item"><img src="https://pic1.zhimg.com/v2-990aca0df5ebd71d0a29ebad5a5d6858_b.jpg"></a><a href="https://pic1.zhimg.com/v2-25cbbac94a5b4ad99c08b6ebc3cc12f0_r.jpg" class="gallery-item"><img src="https://pic1.zhimg.com/v2-25cbbac94a5b4ad99c08b6ebc3cc12f0_r.jpg"></a></p><h2 id="五、项目中日志记录遵守哪些原则"><a href="#五、项目中日志记录遵守哪些原则" class="headerlink" title="五、项目中日志记录遵守哪些原则"></a>五、项目中日志记录遵守哪些原则</h2><h3 id="1-阿里巴巴-Java-开发手册的日志规约"><a href="#1-阿里巴巴-Java-开发手册的日志规约" class="headerlink" title="1. 阿里巴巴 Java 开发手册的日志规约"></a>1. 阿里巴巴 Java 开发手册的日志规约</h3><p>大家可以参考去年 10 月份阿里推出的《阿里巴巴 Java 开发手册（终极版）.pdf》里的第二章第二节 “日志规约” 部分的内容。</p><h3 id="2-个人经验总结"><a href="#2-个人经验总结" class="headerlink" title="2. 个人经验总结"></a>2. 个人经验总结</h3><p>记录项目日志要注意以下几点：</p><ol><li> 注意日志级别，尤其是 info 和 error 不能用混。</li><li> 注意记录信息的准确性，切记日志表达不清楚。</li><li> 注意不同的代码段日志说明不能重复。</li><li> 捕获异常后，要及时记录异常详细信息，并把异常传递到外部。</li><li> 时刻铭记，日志的记录是为了后期查询问题带来方便，因此重要的代码务必要记录日志。</li></ol><h2 id="六、一个推荐的项目-Java-日志实例"><a href="#六、一个推荐的项目-Java-日志实例" class="headerlink" title="六、一个推荐的项目 Java 日志实例"></a>六、一个推荐的项目 Java 日志实例</h2><p>经过以上代码的分析，我们项目中使用的日志一般会选用一个日志接口和一个具体的日志实现。</p><p>那么日志接口是选 JCL 呢，还是选 SLF4J 呢？下面我们把他俩做个对比，具体日志实现为 Log4j，如下图：</p><p><a href="https://pic3.zhimg.com/v2-d80377fa8f2af3220eb3574ec4bbe8b2_r.jpg" class="gallery-item"><img src="https://pic3.zhimg.com/v2-d80377fa8f2af3220eb3574ec4bbe8b2_r.jpg"></a></p><p>从上图可以看出，用 slf4j 作为日志接口，对项目来说更好一些。</p><p>所以，在实际项目中，我一般建议使用 SLF4J+Log4j 或者 slf4j+logback。</p><p><strong>配置文件参见第四节</strong></p><p><strong>推荐程序片段如下</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"根据用户编码查询用户信息-开始，userId：&#123;&#125;"</span> <span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"根据用户编码查询用户信息-结束，userId：&#123;&#125;"</span> <span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CustomException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"根据用户编码查询用户信息-自定义异常:&#123;&#125;"</span> <span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token string">"根据用户编码查询用户信息-自定义异常&#123;&#125;"</span> <span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"根据用户编码查询用户信息-捕获异常:&#123;&#125;"</span> <span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span>根据用户编码查询用户信息<span class="token operator">-</span>捕获异常<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>" <span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此，Java 日志从入门到实战 就结束了，咱们下次再见，谢谢。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端系列（一）| Vue 快速入门</title>
      <link href="/posts/4425.html"/>
      <url>/posts/4425.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="Vue-快速入门"><a href="#Vue-快速入门" class="headerlink" title="Vue 快速入门"></a>Vue 快速入门</h1><h2 id="1-Vue-入门"><a href="#1-Vue-入门" class="headerlink" title="1.Vue 入门"></a>1.Vue 入门</h2><h3 id="1-1-下载-Vuejs"><a href="#1-1-下载-Vuejs" class="headerlink" title="1.1 下载 Vuejs"></a>1.1 下载 <code>Vuejs</code></h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">//开发版本<span class="token comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>//生产版本<span class="token comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-Vue第一个应用"><a href="#1-2-Vue第一个应用" class="headerlink" title="1.2 Vue第一个应用"></a>1.2 <code>Vue</code>第一个应用</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;div id&#x3D;&quot;app&quot;&gt;    &#123;&#123;msg&#125;&#125;  &#123;&#123;username&#125;&#125; &#123;&#123;pwd&#125;&#125;&lt;&#x2F;div&gt;&lt;!--建议放到临近的js位置--&gt;&lt;!--1.引入vue.js--&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;&lt;!--2.创建vue实例--&gt;&lt;script&gt;    const app &#x3D; new Vue(&#123;        el: &#39;#app&#39;,         &#x2F;&#x2F;用来给vue实例定义一个作用范围        data: &#123;         &#x2F;&#x2F;用来给vue实例定义一些相关数据            msg:&quot;你好，欢迎这个世界！&quot;,            username:&quot;hello vue&quot;,            pwd: &quot;1234&quot;        &#125;,    &#125;);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">总结：1.vue实例（对象）中el属性：代表Vue的作用范围    日后在Vue的作用范围内都可以使用Vue语法2.vue实例（对象）中的data：绑定一些相关的数据变量，绑定的数据通过&#123;&#123;变量名&#125;&#125;在Vue的作用范围内取出3.在使用&#123;&#123;&#125;&#125;进行获取data中数据时，可在&#123;&#123;&#125;&#125;写表达式，运算符，调用相关方法，以及逻辑运算等4.el属性中可以书写任意css选择器（jq选择器），但是使用Vue开发是推荐使用，id选择器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2-vue-text和v-html"><a href="#2-vue-text和v-html" class="headerlink" title="2.vue-text和v-html"></a>2.vue-text和v-html</h2><h3 id="2-1-v-text"><a href="#2-1-v-text" class="headerlink" title="2.1 v-text"></a>2.1 v-text</h3><blockquote><p>v-text : 用来获取data中数据将数据以文本的形式渲染到指定的标签内部 类似 js中的 innerText</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>aa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--差值表达器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&#123;&#123;msg&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>    const app = new Vue(&#123;        el: '.aa',        data: &#123;            msg: "hello world"        &#125;    &#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">总结1.&#123;&#123;&#125;&#125;（插值表达）和v-text获取数据的区别  a.使用v-text取值会将标签中原有的数据覆盖  插值表达其不会b.使用v-text可以避免在网络环境较差的情况出现插值闪烁<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-v-html"><a href="#2-2-v-html" class="headerlink" title="2.2 v-html"></a>2.2 v-html</h3><blockquote><p>v-html: 用来获取data中数据将数据中含有的html标签先解析在渲染到指定标签的内部  类似 js 中 innerHTML</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&#123;&#123;msg&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>    const app = new Vue(&#123;        el: '#app',        data: &#123;            msg: "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span> 欢迎你!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>"        &#125;    &#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="3-vue中时间绑定（v-on）"><a href="#3-vue中时间绑定（v-on）" class="headerlink" title="3.vue中时间绑定（v-on）"></a>3.vue中时间绑定（v-on）</h2><h3 id="3-1-绑定事件语法"><a href="#3-1-绑定事件语法" class="headerlink" title="3.1 绑定事件语法"></a>3.1 绑定事件语法</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>aa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;msg&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>年龄：&#123;&#123;age&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>点击改变年龄<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeAge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"hello world"</span><span class="token punctuation">,</span>            <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">"23"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span> <span class="token comment">//定义vue事件</span>            <span class="token function-variable function">changeAge</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"出发"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 总结：</span>事件   事件源:发送事件demo元素   事件：发生特定的动作 click...   监听器  发生特定动作之后的事件处理程序通常时js中的函数1.在vue中绑定事件时通过v-on指令完成的  v-on:事件名  如 v-on:click2.在v-on:事件名的赋值语句中的当前事件触发的函数名3.在vue中事件的函数统一定义在Vue实例的methods属性中4.在vue定义事件中this值的就是当前Vue实例，日后可以在事件中通过使用this获取Vue中相关数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-Vue事件简化写法"><a href="#3-2-Vue事件简化写法" class="headerlink" title="3.2 Vue事件简化写法"></a>3.2 Vue事件简化写法</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;age&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>通过v-on事件修改年龄 +1<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>通过@事件修改年龄 -1<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>editage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token function-variable function">changeage</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">editage</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 总结 1. vue事件简化通过 @符号 简化 v-on</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3-Vue优化写法"><a href="#3-3-Vue优化写法" class="headerlink" title="3.3 Vue优化写法"></a>3.3 Vue优化写法</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;age&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>通过@事件修改年龄 -1<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>editage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">20</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// changeage: function () &#123;</span>            <span class="token comment">//     this.age++;</span>            <span class="token comment">// &#125;,</span>            <span class="token function">editage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 总结</span> 1.事件定义存在两种写法 1.函数名:function()&#123;&#125; 2.函数名()&#123;&#125;推荐<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-4-Vue事件传递"><a href="#3-4-Vue事件传递" class="headerlink" title="3.4 Vue事件传递"></a>3.4 Vue事件传递</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;age&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>事件传值<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeage(23,'xiaochen')<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">20</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">changeage</span><span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 总结1.使用事件时，通常调用参数，通过函数接收参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="4-v-show-v-if-v-bind"><a href="#4-v-show-v-if-v-bind" class="headerlink" title="4.v-show v-if v-bind"></a>4.v-show v-if v-bind</h2><h3 id="4-1-v-show"><a href="#4-1-v-show" class="headerlink" title="4.1 v-show"></a>4.1 v-show</h3><blockquote><p>v-show 用来控制页面中某个元素是否展示  底层控制是标签 display 属性</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        v-show    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-v-if"><a href="#4-2-v-if" class="headerlink" title="4.2.v-if"></a>4.2.v-if</h3><blockquote><p>控制页面中的标签元素是否展示底层通过对dom树节点进行添加和删除来控制展示和隐藏用</p></blockquote><h3 id="4-3-v-bind"><a href="#4-3-v-bind" class="headerlink" title="4.3.v-bind"></a>4.3.v-bind</h3><blockquote><p>用来给页面中标签元素绑定相应的属性简化写法v-bin:属性名 ==》:属性名</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        v-show    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        v-show hello    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        袁老一路走好    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        吴老一路走好    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        浪费粮食    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>点击我改变title<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeTitle('这是修改后的title')<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>点击我改变src<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeSrc('https://gitee.com/lingzhexi/blogImage/raw/master/img2021/05/shiro/20210523165516.png')<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>点我显示隐藏<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showHide<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">isShow</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'陈小佳'</span><span class="token punctuation">,</span>            <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">'https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">showHide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isShow<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">changeTitle</span><span class="token punctuation">(</span><span class="token parameter">title</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">changeSrc</span><span class="token punctuation">(</span><span class="token parameter">src</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="5-v-for使用"><a href="#5-v-for使用" class="headerlink" title="5.v-for使用"></a>5.v-for使用</h2><blockquote><p>对象遍历</p></blockquote><p>创建vue模板</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>        $&#123;NAME&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;&#123;user.name&#125;&#125;&#123;&#123;user.age&#125;&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>u in user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;u&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(value,key,index) in user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a,index in arr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &#123;&#123;index&#125;&#125;:&#123;&#123;a&#125;&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>u in users<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>u.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &#123;&#123;u.id&#125;&#125;=&#123;&#123;u.name&#125;&#125;===&#123;&#123;u.age&#125;&#125;==&#123;&#123;u.state&#125;&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"小岑"</span><span class="token punctuation">,</span>                <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">24</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"土豆"</span><span class="token punctuation">,</span> <span class="token string">"玉米"</span><span class="token punctuation">,</span> <span class="token string">"小麦"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token literal-property property">users</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"zhangs"</span><span class="token punctuation">,</span>                <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>                <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token string">"good"</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"lis"</span><span class="token punctuation">,</span>                    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>                    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token string">"bad"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 总结在使用-for的时候一定要注意加入:key用来给vue内部提供重用和排序的唯—key</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="6-v-model-双向绑定"><a href="#6-v-model-双向绑定" class="headerlink" title="6.v-model 双向绑定"></a>6.v-model 双向绑定</h2><blockquote><p><code>v-model</code>:作用用来绑定标签元素的值与wue实例对象中data数据保持一致,从而实现双向的数据绑定机制</p></blockquote><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML"> &lt;div id&#x3D;&quot;app&quot;&gt;    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;message&quot;&gt;    &lt;div&gt;        &#123;&#123;message&#125;&#125;    &lt;&#x2F;div&gt;    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;改变输入框的值&quot; @click&#x3D;&quot;changeMsg(&#39;凌哲熙&#39;)&quot;&gt;&lt;&#x2F;div&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;    const app &#x3D; new Vue(&#123;        el: &#39;#app&#39;,        data: &#123;            message: &quot;&quot;        &#125;,        methods: &#123;            changeMsg(msg) &#123;                this.message &#x3D; msg;            &#125;        &#125;,        components: &#123;&#125;    &#125;);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 总结</span>1.使用v- model指令可以实现数据的双向绑定2.所谓双向绑定表单中数据变化导致vue实例data数据变化vue实例中data数据的变化导致表单中数据变化称之为双向绑定<span class="token title important"><span class="token punctuation">#</span> MVWM架构  双向绑定机制</span>Model:数据vue   实例中绑定数据VM: ViewMode1   监听器View:页面  页面展示的数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="练习：记事本案例"><a href="#练习：记事本案例" class="headerlink" title="练习：记事本案例"></a>练习：记事本案例</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>添加到记事本<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>save()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item,index in lists<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &#123;&#123;index+1&#125;&#125;: &#123;&#123;item&#125;&#125; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delItem(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>总数量：&#123;&#123;lists.length&#125;&#125; 条<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lists.length!=0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>删除所有<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delAll()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">lists</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'今天下了一场暴雨'</span><span class="token punctuation">,</span><span class="token string">'晚上回家吃小龙虾'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token string">""</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">''</span><span class="token operator">!=</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>lists<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">delItem</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>lists<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">delAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>lists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="7-事件修饰符"><a href="#7-事件修饰符" class="headerlink" title="7.事件修饰符"></a>7.事件修饰符</h2><blockquote><p><code>修饰符</code>: 作用用来和事件连用,用来决定事件触发条件或者是阻止事件的触发机制</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.常用的事件修饰符  </span>    .stop    .prevent    .capture    .self    .once    .passive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-1-stop事件修饰符"><a href="#7-1-stop事件修饰符" class="headerlink" title="7.1 stop事件修饰符"></a>7.1 stop事件修饰符</h3><blockquote><p>用来阻止事件冒泡</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aa<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>divClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--阻止事件冒泡--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span> <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">divClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"div is clicked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">btnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'button is clicked'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-prevent事件修饰符"><a href="#7-2-prevent事件修饰符" class="headerlink" title="7.2 prevent事件修饰符"></a>7.2 prevent事件修饰符</h3><blockquote><p>用来阻止标签的默认行为</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.bilibili.com<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>b站<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-3-self事件修饰符"><a href="#7-3-self事件修饰符" class="headerlink" title="7.3 self事件修饰符"></a>7.3 self事件修饰符</h3><blockquote><p>用来针对于当前标签的事件触发=&gt;只触发自己标签的上特定动作的事件</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--只触发标签自身的事件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aa<span class="token punctuation">"</span></span> <span class="token attr-name">@click.self</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>divClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--阻止事件冒泡--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span> <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>按钮1<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnClick1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-4-once-事件修饰符"><a href="#7-4-once-事件修饰符" class="headerlink" title="7.4 once 事件修饰符"></a>7.4 once 事件修饰符</h3><blockquote><p>once 一次 作用：就是让指定事件只触发一次</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--.prevent ：用来阻止事件默认的行为.once ：用来只执行一次特定的事件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">@click.prevent.once</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="8-按键修饰符"><a href="#8-按键修饰符" class="headerlink" title="8.按键修饰符"></a>8.按键修饰符</h2><blockquote><p>作用:用来与键盘中按键事件绑定在一起,用来修饰特定的按键事件的修饰符</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 按键修饰符</span>    .enter    .tab    .delete (捕获“删除”和“退格”键)    .esc    .space    .up    .down    .left    .right<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-1-enter-回车键"><a href="#8-1-enter-回车键" class="headerlink" title="8.1 enter 回车键"></a>8.1 enter 回车键</h3><blockquote><p>用来在触发回车按键之后触发的事件</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keyups<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-2-tab"><a href="#8-2-tab" class="headerlink" title="8.2 tab"></a>8.2 tab</h3><blockquote><p>用来捕获到tab键执行到当前标签是才会触发</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--其他光标tab到该文本框的时候触发--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.tab</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tabkey<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="8-3-其他"><a href="#8-3-其他" class="headerlink" title="8.3 其他"></a>8.3 其他</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.delete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteKey<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.esc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>esckey<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--空格--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.space</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spacekey<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.left</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>leftkey<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.right</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rigthkey<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-Axios基本使用"><a href="#9-Axios基本使用" class="headerlink" title="9.Axios基本使用"></a>9.Axios基本使用</h2><h3 id="9-1引言"><a href="#9-1引言" class="headerlink" title="9.1引言"></a>9.1引言</h3><blockquote><p><code>Axios</code> 是一个异步请求技术核心作用就是用来在页面中发送异步请求并获取对应数据在页面中渲染页面局部更新技术Aax</p></blockquote><h3 id="9-2-Axios第一个程序"><a href="#9-2-Axios第一个程序" class="headerlink" title="9.2 Axios第一个程序"></a>9.2 <code>Axios</code>第一个程序</h3><blockquote><p>中文网站：<a href="https://www.kancloud.cn/yunye/axios/234845">https://www.kancloud.cn/yunye/axios/234845</a><br>安装：<a href="https://unpkg.com/axios/dist/axios.min.js">https://unpkg.com/axios/dist/axios.min.js</a></p></blockquote><h4 id="9-2-1-GET请求"><a href="#9-2-1-GET请求" class="headerlink" title="9.2.1 GET请求"></a>9.2.1 GET请求</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//发送Get请求</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/findAll?name=xiaochen"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-2-2-POST请求方式"><a href="#9-2-2-POST请求方式" class="headerlink" title="9.2.2 POST请求方式"></a>9.2.2 POST请求方式</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//POST请求</span>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://localhost:8080/save'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">'xiaochen'</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span>    <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">'5234@qq.com'</span><span class="token punctuation">,</span>    <span class="token literal-property property">phone</span><span class="token operator">:</span> <span class="token string">'15352252514'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-2-3-axios并发请求"><a href="#9-2-3-axios并发请求" class="headerlink" title="9.2.3 axios并发请求"></a>9.2.3 <code>axios</code>并发请求</h4><blockquote><p><code>并发请求</code>：将多个请求在同一时刻发送到后端服务接口,最后在集中处理每个请求的响应结果</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token comment">//1.创建查询所有请求  </span><span class="token keyword">function</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:8080/findAll?name=xiaochen'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//2.创建保存请求  </span><span class="token keyword">function</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://localhost:8080/save'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">'xiaochen'</span><span class="token punctuation">,</span>        <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">'5234@qq.com'</span><span class="token punctuation">,</span>        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span>        <span class="token literal-property property">phone</span><span class="token operator">:</span> <span class="token string">'15352252514'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//并发操作  </span>axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">spread</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res1<span class="token punctuation">,</span> res2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用来发送一组并发请求</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-2-vue-结合-axios-查询天气"><a href="#9-2-vue-结合-axios-查询天气" class="headerlink" title="9.2  vue 结合 axios 查询天气"></a>9.2  <code>vue</code> 结合 <code>axios</code> 查询天气</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt; div id&#x3D;&quot;app&quot;&gt;&lt;div&gt;    &lt;input type&#x3D;&quot;text&quot; v - model&#x3D;&quot;name&quot; @keyup.delete&#x3D;&quot;show&quot; @keyup.enter&#x3D;&quot;searchCity&quot;&gt;    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;搜索&quot; @click&#x3D;&quot;searchCity&quot;&gt;&lt;&#x2F;div&gt;&lt;span v-for&#x3D;&quot;city in citys&quot;&gt;&lt;a href&#x3D;&quot;&quot; @click.prevent&#x3D;&quot;searchCitys(city)&quot;&gt;&#123;&#123;city&#125;&#125; &amp;nbsp&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;&lt;hr&gt;&lt;span v-show&#x3D;&quot;isShow&quot;&gt;&#123;&#123;name&#125;&#125;：今天天气是 &#123;&#123;weather&#125;&#125;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;&lt;script src&#x3D;&quot;https:&#x2F; &#x2F; cdn.jsdelivr.net &#x2F; npm &#x2F; vue &#x2F; dist &#x2F; vue.js &quot;&gt;&lt;&#x2F;script&gt;&lt;!--引入axios--&gt;&lt;script src&#x3D;&quot;https: &#x2F;&#x2F;unpkg.com&#x2F;axios&#x2F;dist&#x2F;axios.min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;    const app &#x3D; new Vue(&#123;        el: &#39;#app&#39;,        data: &#123;            name: &#39;&#39;,            citys: [&#39;北京&#39;, &#39;上海&#39;, &#39;天津&#39;, &#39;深圳&#39;],            weather: &#39;&#39;,            isShow: false        &#125;,        methods: &#123;            searchCity() &#123;                let _this &#x3D; this axios.get(&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;city&#x2F;find?name&#x3D;&quot; + this.name).then(function(response) &#123;                    console.log(response.data);                    _this.weather &#x3D; response.data.message;                    _this.isShow &#x3D; true;                &#125;).                catch(function(error) &#123;                    console.log(error);                &#125;);            &#125;,            show() &#123;                this.isShow &#x3D; false;            &#125;,            searchCitys(name) &#123;                this.name &#x3D; name;                this.searchCity();            &#125;        &#125;,        components: &#123;&#125;    &#125;);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="10-Vue生命周期"><a href="#10-Vue生命周期" class="headerlink" title="10. Vue生命周期"></a>10. Vue生命周期</h2><blockquote><p><code>生命周期钩子</code>   ===》 <code>生命周期函数</code></p></blockquote><p><a href="https://cn.vuejs.org/assets/lifecycle_zh-CN.W0MNXI0C.png" title="Vue 实例生命周期" class="gallery-item"><img src="https://cn.vuejs.org/assets/lifecycle_zh-CN.W0MNXI0C.png" alt="Vue 实例生命周期"></a></p><p>Vue生命周期总结</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1.初始化阶段  </span><span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//1.生命周期中第一个函数,该函数在执行时vue实例仅仅完成了自身事件的绑定和生命周期函的初始化工作,Vue实例中还没有 Data el methods相关属性        </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"beforeCreate:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//2.生命周期中第二个函数,该函数在执行时vue实例已经初始化了data属性和 methods中相关方法   </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"created:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//3.生命周期中第三个函数,该函数在执行时vue将E1中指定作用范围作为模板编译        </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">" beforeMount:"</span> <span class="token operator">+</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"sp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//4.生命周期中第四个函数,该函数在执行过程中,已经将数据渲染到界面中并且已经更新页面       </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Mounted: "</span> <span class="token operator">+</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"sp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.运行阶段</span><span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//5.生命周期中第五个函数,该函数是data中数据发生变化时执行这个事件执行时仅仅是vue实例中data数据变化页面显示的依然是原始数据       </span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"beforeUpdate: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"beforeUpdate: "</span> <span class="token operator">+</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"sp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//6.生命周期中第六个函数,该函数执行时data中数据发生变化,页面中数据也发生了变化页面中数据已经和data中数据一致        </span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"updated: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"updated: "</span> <span class="token operator">+</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"sp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//3.销毁阶段</span><span class="token function">beforeDestory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//7.生命周期第七个函数,该函数执行时,vue中所有数据 methods componet都没销到   </span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">destoryed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//8.生命周期的第八个函数,该函数执行时,Wue实例彻底销毁    </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-Vue中的组件-Component"><a href="#11-Vue中的组件-Component" class="headerlink" title="11.Vue中的组件( Component)"></a>11.Vue中的组件( Component)</h2><h3 id="11-1组件作用"><a href="#11-1组件作用" class="headerlink" title="11.1组件作用"></a>11.1组件作用</h3><pre class="line-numbers language-none"><code class="language-none">组件作用:用来减少wue实例对象中代码量,日后在使用wue开发过程中,可以根据不能业务功能将页面中划分不同的多个组件然后由多个组件去完成整个页面的布局便于日后使用Vue进行开发时页面管理,方便开发人员维护<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="11-2-组件使用"><a href="#11-2-组件使用" class="headerlink" title="11.2 组件使用"></a>11.2 组件使用</h3><h4 id="11-2-1-全局组件注册"><a href="#11-2-1-全局组件注册" class="headerlink" title="11.2.1 全局组件注册"></a>11.2.1 全局组件注册</h4><p>说明:全局组件注册给vue实例,日后可以在任意ue实例的范围内使用该组件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//1.开发全局组件  </span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>template<span class="token operator">:</span><span class="token string">'&lt;div>&lt;h1>用户登录&lt;/h1>&lt;/div>'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.使用全局组件在Vue实例范围内  </span><span class="token operator">&lt;</span>login<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>login<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 注意</span>1.Vue.component用来开发全局组件  参数1:组件的名称  参数2: 组件配置&#123;&#125; template:'' 用来书写组件的htm1代码 template中必须有且只有一个root元素  2.使用时需要在vue的作用范围内根据组件名使用全局组件  3.如果在注册组件过程中使用驼峰命名组件的方式在使用组件时必须将驼峰的所有单词小写加入-线进行使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11-2-2-局部组件注册"><a href="#11-2-2-局部组件注册" class="headerlink" title="11.2.2 局部组件注册"></a>11.2.2 局部组件注册</h4><blockquote><p>说明:通过将组件注册给对应<code>vue</code>实例中一个 <code>components</code>属性来完成组件注册,这种方式不会对<code>vue</code>实例造成累加</p></blockquote><ul><li>第一种开发</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//局部组件登录模板</span><span class="token keyword">let</span> login <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">'&lt;div>&lt;h1>用户管理&lt;/h1>&lt;/div>'</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">login</span><span class="token operator">:</span> login    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用局部组件</span><span class="token operator">&lt;</span>login<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>login<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第二种开发</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//1.声明局部组件模板 template 标签 注意：在Vue实例作用范围外声明</span><span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"loginTemplate"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>用户管理<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token comment">//2.定义变量用来保存模板配置对象  </span><span class="token keyword">let</span> login <span class="token operator">=</span> <span class="token punctuation">&#123;</span>     <span class="token comment">//具体组件模板    </span>    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'#loginTemplate'</span>     <span class="token comment">//使用自定义template 标签选择器即可  </span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//3.注册组件  </span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//用来注册局部组件        </span>        <span class="token literal-property property">login</span><span class="token operator">:</span> login         <span class="token comment">//注册局部组件</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4使用局部组件</span><span class="token operator">&lt;</span>login<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>login<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-3-Prop的使用"><a href="#11-3-Prop的使用" class="headerlink" title="11.3 Prop的使用"></a>11.3 Prop的使用</h3><blockquote><p>作用: <code>props</code>用来给组件传递相应静态数据或者是动态数据的</p></blockquote><h4 id="11-3-1-通过在组件上声明静态数据传递给组件内部"><a href="#11-3-1-通过在组件上声明静态数据传递给组件内部" class="headerlink" title="11.3.1 通过在组件上声明静态数据传递给组件内部"></a>11.3.1 通过在组件上声明静态数据传递给组件内部</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//1.声明组件模板配置对象  </span><span class="token keyword">let</span> login<span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">'&lt;div>&lt;h1>欢迎：&#123;&#123;username&#125;&#125;年龄：&#123;&#123;age&#125;&#125;&lt;h1>&lt;/div>'</span><span class="token punctuation">,</span>        <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'userName'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token comment">// props作用用来接收使用组件时通过组件标签传递的数  </span><span class="token punctuation">&#125;</span><span class="token comment">//2.注册组件</span><span class="token keyword">const</span> app <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            login          <span class="token comment">//组件注册</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.通过组件完成数据传递</span><span class="token operator">&lt;</span>login user<span class="token operator">-</span>name<span class="token operator">=</span><span class="token string">"小陈"</span> age<span class="token operator">=</span><span class="token string">"23"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>1ogin<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 总结  </span>1.使用组件时可以在组件上定义多个属性以及对应数据  2.在组件内部可以使用 props数组生命多个定义在组件上的属性名日后可以在组件中通过&#123;属性名&#125;&#125;方式获取组件中属性值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="11-3-2-通过在组件上声明动态数据传递给组件内部"><a href="#11-3-2-通过在组件上声明动态数据传递给组件内部" class="headerlink" title="11.3.2 通过在组件上声明动态数据传递给组件内部"></a>11.3.2 通过在组件上声明动态数据传递给组件内部</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//1.声明组件模板对象 </span><span class="token keyword">const</span> logins <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"&lt;div>&lt;h1>welcome &#123;&#123;userName&#125;&#125; ,age &#123;&#123;age&#125;&#125;, email: &#123;&#123;email&#125;&#125;,salary &#123;&#123;salary&#125;&#125; !&lt;/h1>&lt;/div>"</span><span class="token punctuation">,</span>            <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"userName"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"email"</span><span class="token punctuation">,</span><span class="token string">"salary"</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span> <span class="token comment">//2.注册局部组件 </span>    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">email</span><span class="token operator">:</span><span class="token string">'333@qq.com'</span><span class="token punctuation">,</span>            <span class="token literal-property property">salary</span><span class="token operator">:</span><span class="token string">'200'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            login              <span class="token comment">//注册组件</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.使用组件 </span><span class="token operator">&lt;</span>login <span class="token operator">:</span>email<span class="token operator">=</span><span class="token string">"email"</span> <span class="token operator">:</span>salary<span class="token operator">=</span><span class="token string">"salary"</span> user<span class="token operator">-</span>name<span class="token operator">=</span><span class="token string">"小陈"</span> age<span class="token operator">=</span><span class="token string">"24"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>login<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11-3-2-prop的单项数据流"><a href="#11-3-2-prop的单项数据流" class="headerlink" title="11.3.2 prop的单项数据流"></a>11.3.2 prop的单项数据流</h4><blockquote><p>单向数据流:所有的 prop 都使得其父子prop之间形成了一个单向下行绑定:父级 prop 的更新会向下流动到子组件中,但是反过来则不行</p><p>所有的prop都使得其父子prop之间形成了一个单向下行绑定:父级prop的更新会向下流动到子组件中,但是反过来则不行。这样会防止从子组件意外改变父级组件的状<br>态,从而导致你的应用的数据流向难以理解<br>额外的,每次父级组件发生更新时,子组件中所有的prop都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变prop。如果你这样做了,Wue会在浏览器的控<br>制台中发出警告。一摘自官网</p></blockquote><h3 id="11-4-组件中定义数据和事件使用"><a href="#11-4-组件中定义数据和事件使用" class="headerlink" title="11.4 组件中定义数据和事件使用"></a>11.4 组件中定义数据和事件使用</h3><p>1.组件中定义属于组件的数据</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//组件声明的配置对象 </span><span class="token keyword">const</span> login <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"&lt;div>&lt;h1>&#123;&#123;name&#125;&#125; Vue&lt;ul>&lt;li v-for='item,index in lists'>&#123;&#123;index+1&#125;&#125;==&#123;&#123;item&#125;&#125;&lt;/li>&lt;/ul>&lt;/h1>&lt;/div>"</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'learning'</span><span class="token punctuation">,</span>            <span class="token literal-property property">lists</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'js'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.组件定义事件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> login <span class="token operator">=</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"&lt;div>&lt;h1>&#123;&#123;name&#125;&#125;&lt;/h1>&lt;input type='button' value='点击我修改名称' @click='change'>&lt;/div>"</span><span class="token punctuation">,</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"john"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"micheal"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 总结</span>1.组件中定义事件和直接在vue中定义事件基本一致直接在组件内部对应的htm1代码上加入@事件名=函数名方式即可2.在组件内部使用 methods属性用来定义对应的事件函数即可,事件函数中this指向的是当前组件的实例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="11-5-向子组件中传递事件并在子组件中调用改事件"><a href="#11-5-向子组件中传递事件并在子组件中调用改事件" class="headerlink" title="11.5 向子组件中传递事件并在子组件中调用改事件"></a>11.5 向子组件中传递事件并在子组件中调用改事件</h3><p><code>在子组件中调用传递过来的相关事件必须使用this.$emit(函数名)方式调用</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//1.声明组件</span><span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"login"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>Vue <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>uname<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">'button'</span> value<span class="token operator">=</span><span class="token string">'点我'</span> @click<span class="token operator">=</span><span class="token string">'change'</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token keyword">const</span> login <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"#login"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> <span class="token string">'点击后触发Vue事件'</span>                <span class="token comment">//调用Vue中实例的事件</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'fun'</span><span class="token punctuation">)</span><span class="token comment">//调用组件传递过来的其他函数时需要使用this.$emit('函数名调用)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>    <span class="token comment">//2.注册组件</span>    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">'xiaochen'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//一个事件函数  将这个事件函数传递给子组件       </span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Vue实例的事件'</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            login<span class="token punctuation">,</span>  <span class="token comment">//组件的注册  </span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.使用组件</span><span class="token operator">&lt;</span>login <span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"username"</span> @fun<span class="token operator">=</span>fun<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>login<span class="token operator">></span>   <span class="token comment">// ===>在组件内部使用this.$emit("fun")</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://s2.loli.net/2024/12/20/lksY83NuQHj6bz2.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/lksY83NuQHj6bz2.png"></a></p><h2 id="12-Vue路由"><a href="#12-Vue路由" class="headerlink" title="12.Vue路由"></a>12.Vue路由</h2><p><code>注意事项</code></p><p><a href="https://s2.loli.net/2024/12/20/Ht3s6BWoJGSvQAp.png" title="image-20241220010637764" class="gallery-item"><img src="https://s2.loli.net/2024/12/20/Ht3s6BWoJGSvQAp.png" alt="image-20241220010637764"></a></p><h3 id="12-1-路由"><a href="#12-1-路由" class="headerlink" title="12.1 路由"></a>12.1 路由</h3><p><code>路由：根据请求的路径按照一定的路由规则进行请求的转发从而帮助我们实现统一的请求管理</code></p><h3 id="12-2-作用"><a href="#12-2-作用" class="headerlink" title="12.2 作用"></a>12.2 作用</h3><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>用来在vue中实现组件间的动态切换</code></p><h3 id="12-3-使用"><a href="#12-3-使用" class="headerlink" title="12.3 使用"></a>12.3 使用</h3><p>1.引入路由</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://unpkg.com/vue-router/dist/vue-router.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span class="token comment">//Vue 路由js</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.创建组件对象</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/* 创建模板 */</span>  <span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"login"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>登录页面<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"reg"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>注册页面<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>  <span class="token keyword">const</span> login <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'#login'</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> register <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'#reg'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.定义路由对象的规则</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/* 定义路由 */</span>  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/login"</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>login<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">//path:路由的路径  component：路由的相应组件</span>        <span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/reg"</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>register<span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.将路由对象注册到vue实例</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//路由注册到Vue实例</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">router</span><span class="token operator">:</span>router  <span class="token comment">//设置路由对象</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.在页面中显示路由的组件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- 显示路由组件 --&gt;    &lt;router-view&gt;&lt;&#x2F;router-view&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>6.根据链接切换路由</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#/login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#/reg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="12-4-router-link使用"><a href="#12-4-router-link使用" class="headerlink" title="12.4  router-link使用"></a>12.4  router-link使用</h3><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>作用：用来替换我们在切换路由时使用a标签切换路由</code></p><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>好处：就是可以自动给路由路径加入#不需要手动加入</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;router-link to&#x3D;&quot;&#x2F;login&quot; tag&#x3D;&quot;button&quot;&gt;登录&lt;&#x2F;router-link&gt;&lt;router-link to&#x3D;&quot;&#x2F;reg&quot; tag&#x3D;&quot;span&quot;&gt;注册&lt;&#x2F;router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 总结</span><span class="token list punctuation">1.</span> router-link用来替换使用a标签实现路由切换好处是不需要书写#号直接书写路由路径<span class="token list punctuation">2.</span> router-1 ink to属性用来书写路由路径tag属性:用来将 router-1ink渲染成指定的标签<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="12-5-默认路由"><a href="#12-5-默认路由" class="headerlink" title="12.5 默认路由"></a>12.5 默认路由</h3><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>作用:用来在第一次进入界面是显示一个默认的组件</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/* 定义路由 */</span>  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token literal-property property">redirect</span><span class="token operator">:</span><span class="token string">'/login'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// redirect:用来当访问的是默认路由"/"时跳转到指定的路由展示推荐使用        </span>        <span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/login"</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>login<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/reg"</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>register<span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-6-路由中参数传递"><a href="#12-6-路由中参数传递" class="headerlink" title="12.6 路由中参数传递"></a>12.6 路由中参数传递</h3><ul><li>第一种方式传递参数 传统方式</li></ul><ol><li><p>通过?号形式拼接参数</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;router-link to&#x3D;&quot;&#x2F;login?id&#x3D;1&amp;name&#x3D;张三&quot; tag&#x3D;&quot;button&quot;&gt;i need login&lt;&#x2F;router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>组件中获取参数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> login <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'#login'</span><span class="token punctuation">,</span>    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"id: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">"  ==> name:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>第二种方式传递参数 <code>restful</code></li></ul><ol><li><p>通过使用路径方式传递</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/reg/2/李四"</span> tag<span class="token operator">=</span><span class="token string">"button"</span><span class="token operator">></span>i need register<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/reg/:id/:name'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> reg<span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>组件中获取参数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'#reg'</span><span class="token punctuation">,</span>    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'id: '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">'  ===>name:'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java系列（六）| JDK1.8 新特性</title>
      <link href="/posts/33246.html"/>
      <url>/posts/33246.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><blockquote><p><code>JDK</code> 已经出到 <code>17</code> 了，但是你迭代你的版本，我用我的 8。<code>JDK1.8</code> 的一些新特性，当然现在也不新了，其实在工作中已经很常用了。</p></blockquote><h2 id="JDK1-8-都有哪些新特性？"><a href="#JDK1-8-都有哪些新特性？" class="headerlink" title="JDK1.8 都有哪些新特性？"></a>JDK1.8 都有哪些新特性？</h2><p><code>JDK1.8</code> 有不少新特性，我们经常接触到的新特性如下：</p><p><a href="https://s2.loli.net/2024/12/19/lJHMBZpq5NW61si.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/19/lJHMBZpq5NW61si.png"></a> </p><ul><li><p>接口默认方法：<code>Java</code> 8 允许我们给接口添加一个非抽象的方法实现，只需要使用 default 关键字修饰即可</p></li><li><p><code>Lambda</code> 表达式和函数式接口：<code>Lambda</code> 表达式本质上是一段匿名内部类，也可以是一段可以传递的代码。<code>Lambda</code> 允许把函数作为一个方法的参数（函数作为参数传递到方法中），使用 <code>Lambda</code> 表达式使代码更加简洁，但是也不要滥用，否则会有可读性等问题，《<code>Effective</code> Java》作者 <code>Josh Bloch</code> 建议使用 <code>Lambda</code> 表达式最好不要超过 3 行。</p></li><li><p><code>Stream API</code>：用函数式编程方式在集合类上进行复杂操作的工具，配合 <code>Lambda</code> 表达式可以方便的对集合进行处理。</p><p>Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用 <code>Stream API</code> 对集合数据进行操作，就类似于使用 <code>SQL</code> 执行的数据库查询。也可以使用 <code>Stream API</code> 来并行执行操作。</p><p>简而言之，<code>Stream API</code> 提供了一种高效且易于使用的处理数据的方式。</p></li><li><p>日期时间 <code>API</code>：<code>Java 8</code> 引入了新的日期时间 API 改进了日期时间的管理。</p></li><li><p><code>Optional</code> 类：用来解决空指针异常的问题。很久以前 <code>Google Guava</code> 项目引入了 <code>Optional</code> 作为解决空指针异常的一种方式，不赞成代码被 <code>null</code> 检查的代码污染，期望程序员写整洁的代码。受 <code>Google Guava</code> 的鼓励，<code>Optional</code> 现在是 <code>Java 8</code> 库的一部分。</p></li></ul><h2 id="Lambda-表达式了解多少？"><a href="#Lambda-表达式了解多少？" class="headerlink" title="Lambda 表达式了解多少？"></a>Lambda 表达式了解多少？</h2><p><code>Lambda</code> 表达式本质上是一段匿名内部类，也可以是一段可以传递的代码。</p><p>比如我们以前使用 <code>Runnable</code> 创建并运行线程：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread is running before Java8!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是通过内部类的方式来重写 run 方法，使用 Lambda 表达式，还可以更加简洁：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread is running since Java8!"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然不是每个接口都可以缩写成 <code>Lambda</code> 表达式。只有那些函数式接口（<code>Functional</code> <code>Interface</code>）才能缩写成 <code>Lambda</code> 表示式。</p><p>所谓函数式接口（<code>Functional</code> <code>Interface</code>）就是只包含一个抽象方法的声明。针对该接口类型的所有 Lambda 表达式都会与这个抽象方法匹配。</p><blockquote><p>Java8 有哪些内置函数式接口？</p></blockquote><p><code>JDK 1.8 API</code> 包含了很多内置的函数式接口。其中就包括我们在老版本中经常见到的 <strong>Comparator</strong> 和 **<code>Runnable</code>**，<code>Java 8</code> 为他们都添加了 <code>@FunctionalInterface</code> 注解，以用来支持 Lambda 表达式。</p><p>除了这两个之外，还有 <code>Callable、Predicate、Function、Supplier、Consumer</code> 等等。</p><h2 id="Optional-了解吗？"><a href="#Optional-了解吗？" class="headerlink" title="Optional 了解吗？"></a>Optional 了解吗？</h2><p><code>Optional</code>是用于防范 <code>NullPointerException</code>。</p><p>可以将 <code>Optional</code> 看做是包装对象（可能是 <code>null</code>, 也有可能非 <code>null</code>）的容器。当我们定义了 一个方法，这个方法返回的对象可能是空，也有可能非空的时候，我们就可以考虑用 <code>Optional</code> 来包装它，这也是在 Java 8 被推荐使用的做法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> optional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"bam"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// true</span>optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// "bam"</span>optional<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"fallback"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// "bam"</span>optional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// "b"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Stream-流用过吗？"><a href="#Stream-流用过吗？" class="headerlink" title="Stream 流用过吗？"></a>Stream 流用过吗？</h2><p><code>Stream</code> 流，简单来说，使用 <code>java.util.Stream</code> 对一个包含一个或多个元素的集合做各种操作。这些操作可能是 <em>中间操作</em> 亦或是 _终端操作_。终端操作会返回一个结果，而中间操作会返回一个 <code>Stream</code> 流。</p><p><code>Stream</code> 流一般用于集合，我们对一个集合做几个常见操作：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stringCollection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ddd2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ddd1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>Filter 过滤</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">stringCollection    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "aaa2", "aaa1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>Sorted 排序</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">stringCollection    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "aaa1", "aaa2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>Map 转换</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">stringCollection    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "DDD2", "DDD1", "CCC", "BBB3", "BBB2", "AAA2", "AAA1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>Match 匹配</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 验证 list 中 string 是否有以 a 开头的, 匹配到第一个，即返回 true</span><span class="token keyword">boolean</span> anyStartsWithA <span class="token operator">=</span>    stringCollection        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>anyStartsWithA<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// true</span><span class="token comment">// 验证 list 中 string 是否都是以 a 开头的</span><span class="token keyword">boolean</span> allStartsWithA <span class="token operator">=</span>    stringCollection        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>allStartsWithA<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// false</span><span class="token comment">// 验证 list 中 string 是否都不是以 z 开头的,</span><span class="token keyword">boolean</span> noneStartsWithZ <span class="token operator">=</span>    stringCollection        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>noneStartsWithZ<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>Count 计数</strong></li></ul><p><code>count</code> 是一个终端操作，它能够统计 <code>stream</code> 流中的元素总数，返回值是 <code>long</code> 类型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 先对 list 中字符串开头为 b 进行过滤，让后统计数量</span><span class="token keyword">long</span> startsWithB <span class="token operator">=</span>    stringCollection        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>startsWithB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>Reduce</strong></li></ul><p><code>Reduce</code> 中文翻译为：_减少、缩小_。通过入参的 <code>Function</code>，我们能够将 <code>list</code> 归约成一个值。它的返回类型是 <code>Optional</code> 类型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> reduced <span class="token operator">=</span>    stringCollection        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-></span> s1 <span class="token operator">+</span> <span class="token string">"#"</span> <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>reduced<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上是常见的几种流式操作，还有其它的一些流式操作，可以帮助我们更便捷地处理集合数据。</p><p><a href="https://s2.loli.net/2024/12/19/fby849IB5uW7stp.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/19/fby849IB5uW7stp.png"></a> </p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java系列（五）| 序列化、泛型、注解、反射</title>
      <link href="/posts/10468.html"/>
      <url>/posts/10468.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><h2 id="什么是序列化？什么是反序列化？"><a href="#什么是序列化？什么是反序列化？" class="headerlink" title="什么是序列化？什么是反序列化？"></a>什么是序列化？什么是反序列化？</h2><p>什么是序列化，序列化就是<strong>把 Java 对象转为二进制流</strong>，方便存储和传输。</p><p>所以<strong>反序列化就是把二进制流恢复成对象</strong>。</p><p><a href="https://s2.loli.net/2024/12/19/QygVTwWMIBsfpXr.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/19/QygVTwWMIBsfpXr.png"></a>序列化和反序列化</p><p>类比我们生活中一些大件物品的运输，运输的时候把它拆了打包，用的时候再拆包组装。</p><blockquote><p><code>Serializable</code> 接口有什么用？</p></blockquote><p>这个接口只是一个标记，没有具体的作用，但是如果不实现这个接口，在有些序列化场景会报错，所以一般建议，创建的 <code>JavaBean</code> 类都实现 <code>Serializable</code>。</p><blockquote><p><code>serialVersionUID</code> 又有什么用？</p></blockquote><p><code>serialVersionUID</code> 就是起验证作用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们经常会看到这样的代码，这个 <code>ID</code> 其实就是用来验证序列化的对象和反序列化对应的对象 ID 是否一致。</p><p>这个 <code>ID</code> 的数字其实不重要，无论是 1L 还是 <code>IDE</code> 自动生成的，只要序列化时候对象的 <code>serialVersionUID</code> 和反序列化时候对象的 <code>serialVersionUID</code> 一致的话就行。</p><p>如果没有显示指定 <code>serialVersionUID</code> ，则编译器会根据类的相关信息自动生成一个，可以认为是一个指纹。</p><p>所以如果你没有定义一个 <code>serialVersionUID</code>， 结果序列化一个对象之后，在反序列化之前把对象的类的结构改了，比如增加了一个成员变量，则此时的反序列化会失败。</p><p>因为类的结构变了，所以 <code>serialVersionUID</code> 就不一致。</p><blockquote><p>Java 序列化不包含静态变量？</p></blockquote><p>序列化的时候是不包含静态变量的。</p><blockquote><p>如果有些变量不想序列化，怎么办？</p></blockquote><p>对于不想进行序列化的变量，使用 <code>transient</code>关键字修饰。</p><p><code>transient</code> 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 <code>transient</code> 修饰的变量值不会被持久化和恢复。<code>transient</code> 只能修饰变量，不能修饰类和方法。</p><h2 id="说说有几种序列化方式？"><a href="#说说有几种序列化方式？" class="headerlink" title="说说有几种序列化方式？"></a>说说有几种序列化方式？</h2><p>Java 序列化方式有很多，常见的有三种：</p><p><a href="https://s2.loli.net/2024/12/19/JeFED1Gwp9lugfx.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/19/JeFED1Gwp9lugfx.png"></a> </p><ul><li><code>Java</code> 对象流列化 ：<code>Java</code> 原生序列化方法即通过 Java 原生流 (<code>InputStream</code> 和 <code>OutputStream</code> 之间的转化) 的方式进行转化，一般是对象输出流 <code>ObjectOutputStream</code>和对象输入流 <code>ObjectI叩utStream</code>。</li><li><code>Json</code> 序列化：这个可能是我们最常用的序列化方式，<code>Json</code> 序列化的选择很多，一般会使用 <code>jackson</code> 包，通过 <code>ObjectMapper</code> 类来进行一些操作，比如将对象转化为 <code>byte</code> 数组或者将 <code>json</code> 串转化为对象。</li><li><code>ProtoBuff</code> 序列化：<code>ProtocolBuffer</code> 是一种轻便高效的结构化数据存储格式，<code>ProtoBuff</code> 序列化对象可以很大程度上将其压缩，可以大大减少数据传输大小，提高系统性能。</li></ul><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="Java-泛型了解么？什么是类型擦除？介绍一下常用的通配符？"><a href="#Java-泛型了解么？什么是类型擦除？介绍一下常用的通配符？" class="headerlink" title="Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？"></a>Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？</h2><blockquote><p>什么是泛型？</p></blockquote><p>Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里直接添加会报错</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">List</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Method</span> add <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//但是通过反射添加，是可以的</span>add<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">"kl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>泛型一般有三种使用方式: <strong>泛型类</strong>、<strong>泛型接口</strong>、<strong>泛型方法</strong>。</p><p><a href="https://s2.loli.net/2024/12/19/82sAnUaqEl9jKtk.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/19/82sAnUaqEl9jKtk.png"></a> </p><p><strong>1. 泛型类</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span><span class="token comment">//在实例化泛型类时，必须指定T的具体类型</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> key<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Generic</span><span class="token punctuation">(</span><span class="token class-name">T</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> key<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如何实例化泛型类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> genericInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2. 泛型接口</strong> ：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">GeneratorImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Generator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现泛型接口，指定类型：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">GeneratorImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Generator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3. 泛型方法</strong> ：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span> <span class="token class-name">E</span> <span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span> <span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inputArray <span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token class-name">E</span> element <span class="token operator">:</span> inputArray <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%s "</span><span class="token punctuation">,</span> element <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建不同类型数组：Integer, Double 和 Character</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArray <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stringArray <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"World"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printArray</span><span class="token punctuation">(</span> intArray  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printArray</span><span class="token punctuation">(</span> stringArray  <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>泛型常用的通配符有哪些？</p></blockquote><p><strong>常用的通配符为：T，E，K，V，？</strong></p><ul><li>？表示不确定的 java 类型</li><li>T (type) 表示具体的一个 java 类型</li><li>K V (key value) 分别代表 java 键值中的 Key Value</li><li>E (element) 代表 Element</li></ul><blockquote><p>什么是泛型擦除？</p></blockquote><p>所谓的泛型擦除，官方名叫 “类型擦除”。</p><p>Java 的泛型是伪泛型，这是因为 Java 在编译期间，所有的类型信息都会被擦掉。</p><p>也就是说，在运行的时候是没有泛型的。</p><p>例如这段代码，往一群猫里放条狗：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cat</span><span class="token punctuation">></span></span> cats <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cat</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LinkedList</span> list <span class="token operator">=</span> cats<span class="token punctuation">;</span>  <span class="token comment">// 注意我在这里把范型去掉了，但是list和cats是同一个链表！</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 完全没问题！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>因为 Java 的范型只存在于源码里，编译的时候给你静态地检查一下范型类型是否正确，而到了运行时就不检查了。上面这段代码在 JRE（Java <strong>运行</strong>环境）看来和下面这段没区别：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LinkedList</span> cats <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 注意：没有范型！</span><span class="token class-name">LinkedList</span> list <span class="token operator">=</span> cats<span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>为什么要类型擦除呢？</p><p>主要是为了向下兼容，因为 JDK5 之前是没有泛型的，为了让 JVM 保持向下兼容，就出了类型擦除这个策略。</p><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="说一下你对注解的理解？"><a href="#说一下你对注解的理解？" class="headerlink" title="说一下你对注解的理解？"></a>说一下你对注解的理解？</h2><p><strong>Java 注解本质上是一个标记</strong>，可以理解成生活中的一个人的一些小装扮，比如戴什么什么帽子，戴什么眼镜。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644374.png" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644374.png"></a> </p><p>注解可以标记在类上、方法上、属性上等，标记自身也可以设置一些值，比如帽子颜色是绿色。</p><p>有了标记之后，我们就可以在编译或者运行阶段去识别这些标记，然后搞一些事情，这就是注解的用处。</p><p>例如我们常见的 <code>AOP</code>，使用注解作为切点就是运行期注解的应用；比如 <code>lombok</code>，就是注解在编译期的运行。</p><p>注解生命周期有三大类，分别是：</p><ul><li><code>RetentionPolicy.SOURCE</code>：给编译器用的，不会写入 <code>class</code> 文件</li><li><code>RetentionPolicy.CLASS</code>：会写入 <code>class</code> 文件，在类加载阶段丢弃，也就是运行的时候就没这个信息了</li><li><code>RetentionPolicy.RUNTIME</code>：会写入 <code>class</code> 文件，永久保存，可以通过反射获取注解信息</li></ul><p>所以我上文写的是解析的时候，没写具体是解析啥，因为不同的生命周期的解析动作是不同的。</p><p>像常见的：</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641804.png" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641804.png"></a> </p><p>就是给编译器用的，编译器编译的时候检查没问题就 <code>over</code> 了，<code>class</code> 文件里面不会有 <code>Override</code> 这个标记。</p><p>再比如 <code>Spring</code> 常见的 <code>Autowired</code> ，就是 <code>RUNTIME</code> 的，所以<strong>在运行的时候可以通过反射得到注解的信息</strong>，还能拿到标记的值 <code>required</code> 。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644704.png" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644704.png"></a></p><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="什么是反射？应用？原理？"><a href="#什么是反射？应用？原理？" class="headerlink" title="什么是反射？应用？原理？"></a>什么是反射？应用？原理？</h2><blockquote><p>什么是反射？</p></blockquote><p>我们通常都是利用 <code>new</code>方式来创建对象实例，这可以说就是一种 “正射”，这种方式在编译时候就确定了类型信息。</p><p>而如果，我们想在时候动态地获取类信息、创建类实例、调用类方法这时候就要用到<strong>反射</strong>。</p><p>通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。</p><p>反射最核心的四个类：</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641099.png" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641099.png"></a>Java 反射相关类</p><blockquote><p>反射的应用场景？</p></blockquote><p>一般我们平时都是在在写业务代码，很少会接触到直接使用反射机制的场景。</p><p>但是，这并不代表反射没有用。相反，正是因为反射，你才能这么轻松地使用各种框架。像 Spring/Spring Boot、MyBatis 等等框架中都大量使用了反射机制。</p><p>像 <code>Spring</code> 里的很多 <strong>注解</strong> ，它真正的功能实现就是利用反射。</p><p>就像为什么我们使用 Spring 的时候 ，一个 <code>@Component</code>注解就声明了一个类为 Spring Bean 呢？为什么通过一个 <code>@Value</code>注解就读取到配置文件中的值呢？究竟是怎么起作用的呢？</p><p>这些都是因为我们可以基于反射操作类，然后获取到类 / 属性 / 方法 / 方法的参数上的注解，注解这里就有两个作用，一是标记，我们对注解标记的类 / 属性 / 方法进行对应的处理；二是注解本身有一些信息，可以参与到处理的逻辑中。</p><blockquote><p>反射的原理？</p></blockquote><p>我们都知道 <code>Java</code> 程序的执行分为编译和运行两步，编译之后会生成字节码 (.class) 文件，JVM 进行类加载的时候，会加载字节码文件，将类型相关的所有信息加载进方法区，反射就是去获取这些信息，然后进行各种操作。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础核心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java系列（四）| 异常处理及IO</title>
      <link href="/posts/55137.html"/>
      <url>/posts/55137.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="Java-中异常处理体系"><a href="#Java-中异常处理体系" class="headerlink" title="Java 中异常处理体系?"></a>Java 中异常处理体系?</h2><p>Java 的异常体系是分为多层的。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644491.png" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644491.png"></a>Java 异常体系</p><p><code>Throwable</code>是 <code>Java</code> 语言中所有错误或异常的基类。</p><p><code>Throwable</code> </p><ul><li><code>Error</code>：系统内部错误比如虚拟机异常，是程序无法处理的。</li><li> <code>Exception</code>：程序问题导致的异常</li><li><code>CheckedException</code> 受检异常：编译器会强制检查并要求处理的异常。</li><li><code>RuntimeException</code> 运行时异常：程序运行中出现异常，比如我们熟悉的空指针、数组下标越界等等</li></ul><h2 id="异常的处理方式？"><a href="#异常的处理方式？" class="headerlink" title="异常的处理方式？"></a>异常的处理方式？</h2><p>针对异常的处理主要有两种方式：</p><p><a href="sp7qab7o2.hd-bkt.clouddn.com/images/20250107215110181.png" class="gallery-item"><img src="sp7qab7o2.hd-bkt.clouddn.com/images/20250107215110181.png"></a></p><ul><li><strong>遇到异常不进行具体处理，而是继续抛给调用者 （throw，throws）</strong></li></ul><p>抛出异常有三种形式，一是 <code>throw</code>, 一个 <code>throws</code>，还有一种系统自动抛异常。</p><p><code>throws</code> 用在方法上，后面跟的是异常类，可以跟多个；而 <code>throw</code> 用在方法内，后面跟的是异常对象。</p><ul><li><strong>try catch 捕获异常</strong></li></ul><p>在 <code>catch</code> 语句块中补货发生的异常，并进行处理。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//包含可能会出现异常的代码以及声明异常的方法</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//捕获异常并进行处理</span><span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                                                       <span class="token punctuation">&#125;</span><span class="token comment">//可选，必执行的代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>try-catch</code> 捕获异常的时候还可以选择加上 <code>finally</code> 语句块，<code>finally</code> 语句块不管程序是否正常执行，最终它都会必然执行。</p><h2 id="三道经典异常处理代码题"><a href="#三道经典异常处理代码题" class="headerlink" title="三道经典异常处理代码题"></a>三道经典异常处理代码题</h2><blockquote><p>题目 1</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TryDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：31。</p><p><code>try、catch。finally</code> 的基础用法，在 <code>return</code> 前会先执行 <code>finally</code> 语句块，所以是先输出 <code>finally</code> 里的 3，再输出 <code>return</code> 的 1。</p><blockquote><p>题目 2</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TryDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：3。</p><p><code>try</code> 返回前先执行 <code>finally</code>，结果 <code>finally</code> 里不按套路出牌，直接 <code>return</code> 了，自然也就走不到 <code>try</code> 里面的 <code>return</code> 了。</p><p><code>finally</code> 里面使用 <code>return</code> 仅存在于面试题中，实际开发这么写要挨吊的。</p><blockquote><p>题目 3</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TryDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：2。</p><p>大家可能会以为结果应该是 3，因为在 <code>return</code> 前会执行 <code>finally</code>，而 i 在 <code>finally</code> 中被修改为 3 了，那最终返回 i 不是应该为 3 吗？</p><p>但其实，在执行 <code>finally</code> 之前，<code>JVM</code> 会先将 i 的结果暂存起来，然后 <code>finally</code> 执行完毕后，会返回之前暂存的结果，而不是返回 i，所以即使 i 已经被修改为 3，最终返回的还是之前暂存起来的结果 2。</p><h1 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h1><h2 id="Java-中-IO-流分为几种"><a href="#Java-中-IO-流分为几种" class="headerlink" title="Java 中 IO 流分为几种?"></a>Java 中 IO 流分为几种?</h2><p>流按照不同的特点，有很多种划分方式。</p><ul><li>按照流的流向分，可以分为<strong>输入流</strong>和<strong>输出流</strong>；</li><li>按照操作单元划分，可以划分为<strong>字节流</strong>和<strong>字符流</strong>；</li><li>按照流的角色划分为<strong>节点流</strong>和<strong>处理流</strong></li></ul><p><code>Java Io</code> 流共涉及 40 多个类，看上去杂乱，其实都存在一定的关联， <code>Java I0</code> 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。</p><ul><li><strong>InputStream</strong>/<strong>Reader</strong>: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</li><li><strong>OutputStream</strong>/<strong>Writer</strong>: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</li></ul><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644073.jpeg" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644073.jpeg"></a> </p><blockquote><p>IO 流用到了什么设计模式？</p></blockquote><p>其实，<code>Java 的 IO</code> 流体系还用到了一个设计模式——<strong>装饰器模式</strong>。</p><p><code>InputStream</code> 相关的部分类图如下，篇幅有限，装饰器模式就不展开说了。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644242.png" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644242.png"></a></p><h2 id="既然有了字节流-为什么还要有字符流"><a href="#既然有了字节流-为什么还要有字符流" class="headerlink" title="既然有了字节流, 为什么还要有字符流?"></a>既然有了字节流, 为什么还要有字符流?</h2><p>其实字符流是由 <code>Java</code> 虚拟机将字节转换得到的，问题就出在这个过程还比较耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。</p><p>所以， I/<code>O</code>  流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。</p><h2 id="BIO、NIO、AIO？"><a href="#BIO、NIO、AIO？" class="headerlink" title="BIO、NIO、AIO？"></a>BIO、NIO、AIO？</h2><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644132.png" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644132.png"></a>BIO、NIO、AIO</p><p><strong>BIO</strong><code>(blocking I/O)</code> ：就是传统的 <code>IO</code>，同步阻塞，服务器实现模式为一个连接一个线程，即<strong>客户端有连接请求时服务器端就需要启动一个线程进行处理</strong>，如果这个连接不做任何事情会造成不必要的线程开销，可以通过连接池机制改善 (实现多个客户连接服务器)。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644898.png" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644898.png"></a> </p><p>BIO 方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 以前的唯一选择，程序简单易理解。</p><p><strong>NIO</strong> ：全称 <code>java non-blocking IO，</code>是指 JDK 提供的新 API。从 JDK1.4 开始，<code>Java</code> 提供了一系列改进的输入 / 输出的新特性，被统称为 <code>NIO(即 New IO)。</code></p><p>NIO 是<strong>同步非阻塞</strong>的，服务器端用一个线程处理多个连接，客户端发送的连接请求会注册到多路复用器上，多路复用器轮询到连接有 <code>IO</code> 请求就进行处理：</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644133.png" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644133.png"></a> </p><p><code>NIO</code> 的数据是面向<strong>缓冲区 Buffer</strong> 的，必须从 <code>Buffer</code> 中读取或写入。</p><p>所以完整的 <code>NIO</code> 示意图：</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644272.png" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644272.png"></a><code>NIO</code> 完整示意图</p><p>可以看出，<code>NIO</code> 的运行机制：</p><ul><li>每个 <code>Channel</code> 对应一个 <code>Buffer</code>。</li><li>Selector 对应一个线程，一个线程对应多个 s。</li><li>Selector 会根据不同的事件，在各个通道上切换。</li><li>Buffer 是内存块，底层是数据。</li></ul><p><code>AIO</code>：<code>JDK 7</code> 引入了 <code>Asynchronous I/O，</code>是<strong>异步不阻塞</strong>的 IO。在进行 I/O 编程中，常用到两种模式：<code>Reactor</code> 和 <code>Proactor</code>。Java 的 NIO 就是 Reactor，当有事件触发时，服务器端得到通知，进行相应的处理，完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。</p><p>PS：关于同步阻塞 IO、同步不阻塞 IO、异步不阻塞 IO 的相关概念可以查看：<a href="https://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&mid=2247488406&idx=1&sn=93e2435b319c42497a4efa966ddc9237&scene=21#wechat_redirect">面试字节，被操作系统问挂了</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础核心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java系列（三）| 常用类</title>
      <link href="/posts/49988.html"/>
      <url>/posts/49988.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="String-是-Java-基本数据类型吗？可以被继承吗？"><a href="#String-是-Java-基本数据类型吗？可以被继承吗？" class="headerlink" title="String 是 Java 基本数据类型吗？可以被继承吗？"></a>String 是 Java 基本数据类型吗？可以被继承吗？</h3><blockquote><p>String 是 Java 基本数据类型吗？</p></blockquote><p>不是。Java 中的基本数据类型只有 8 个：<code>byte、short、int、long、float、double、char、boolean</code>；除了基本类型（<code>primitive type</code>），剩下的都是引用类型（<code>reference type</code>）。</p><p><code>String</code> 是一个比较特殊的引用数据类型。</p><blockquote><p><code>String</code> 类可以继承吗？</p></blockquote><p>不行。<code>String</code> 类使用 <code>final</code> 修饰，是所谓的不可变类，无法被继承。</p><h3 id="String-和-StringBuilder、StringBuffer-的区别？"><a href="#String-和-StringBuilder、StringBuffer-的区别？" class="headerlink" title="String 和 StringBuilder、StringBuffer 的区别？"></a>String 和 StringBuilder、StringBuffer 的区别？</h3><ul><li><code>String</code>：<code>String</code> 的值被创建后不能修改，任何对 <code>String</code> 的修改都会引发新的 <code>String</code> 对象的生成。</li><li><code>StringBuffer</code>：跟 <code>String</code> 类似，但是值可以被修改，使用 <code>synchronized</code> 来保证线程安全。</li><li><code>StringBuilder</code>：<code>StringBuffer</code> 的非线程安全版本，性能上更高一些。</li></ul><h3 id="String-str1-new-String-“abc”-和-String-str2-“abc”-和-区别？"><a href="#String-str1-new-String-“abc”-和-String-str2-“abc”-和-区别？" class="headerlink" title="String str1 = new String(“abc”) 和 String str2 = “abc” 和  区别？"></a>String str1 = new String(“abc”) 和 String str2 = “abc” 和  区别？</h3><p>两个语句都会去字符串常量池中检查是否已经存在 “<code>abc</code>”，如果有则直接使用，如果没有则会在常量池中创建 “<code>abc</code>” 对象。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643815.png" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643815.png"></a> </p><p>但是不同的是，<code>String str1 = new String(&quot;abc&quot;)</code> 还会通过 <code>new String()</code> 在堆里创建一个 “<code>abc</code>“ 字符串对象实例。所以后者可以理解为被前者包含。</p><blockquote><p>String s = new String(“abc”) 创建了几个对象？</p></blockquote><p>很明显，一个或两个。如果字符串常量池已经有 “<code>abc</code>”，则是一个；否则，两个。</p><p>当字符创常量池没有 “<code>abc</code>”，此时会创建如下两个对象：</p><ul><li>一个是字符串字面量 “<code>abc</code>“ 所对应的、字符串常量池中的实例</li><li>另一个是通过 <code>new String()</code> 创建并初始化的，内容与 “<code>abc</code>“ 相同的实例，在堆中。</li></ul><h3 id="String-不是不可变类吗？字符串拼接是如何实现的？"><a href="#String-不是不可变类吗？字符串拼接是如何实现的？" class="headerlink" title="String 不是不可变类吗？字符串拼接是如何实现的？"></a>String 不是不可变类吗？字符串拼接是如何实现的？</h3><p><code>String</code> 的确是不可变的，“**+**” 的拼接操作，其实是会生成新的对象。</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">"hello "</span><span class="token punctuation">;</span><span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">"world!"</span><span class="token punctuation">;</span><span class="token class-name">String</span> ab <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在 <strong>jdk1.8 之前</strong>，<code>a 和 b</code> 初始化时位于字符串常量池，ab 拼接后的对象位于堆中。经过拼接新生成了 String 对象。如果拼接多次，那么会生成多个中间对象。</p><p>内存如下：</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643474.png" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643474.png"></a> </p><p>在 <strong>Java8 时</strong> <code>JDK</code> 对 <code>“+”</code> 号拼接进行了优化，上面所写的拼接方式会被优化为基于 <code>StringBuilder</code> 的 append 方法进行处理。<code>Java</code> 会在编译期对 <code>“+”</code> 号进行处理。</p><p>下面是通过 <code>javap -verbose</code> 命令反编译字节码的结果，很显然可以看到 <code>StringBuilder</code> 的创建和 <code>append</code> 方法的调用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>     <span class="token number">0</span><span class="token operator">:</span> ldc           #<span class="token number">2</span>                  <span class="token comment">// String hello</span>     <span class="token number">2</span><span class="token operator">:</span> astore_1     <span class="token number">3</span><span class="token operator">:</span> ldc           #<span class="token number">3</span>                  <span class="token comment">// String world!</span>     <span class="token number">5</span><span class="token operator">:</span> astore_2     <span class="token number">6</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">4</span>                  <span class="token comment">// class java/lang/StringBuilder</span>     <span class="token number">9</span><span class="token operator">:</span> dup    <span class="token number">10</span><span class="token operator">:</span> invokespecial #<span class="token number">5</span>                  <span class="token comment">// Method java/lang/StringBuilder."&lt;init>":()V</span>    <span class="token number">13</span><span class="token operator">:</span> aload_1    <span class="token number">14</span><span class="token operator">:</span> invokevirtual #<span class="token number">6</span>                  <span class="token comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>    <span class="token number">17</span><span class="token operator">:</span> aload_2    <span class="token number">18</span><span class="token operator">:</span> invokevirtual #<span class="token number">6</span>                  <span class="token comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>    <span class="token number">21</span><span class="token operator">:</span> invokevirtual #<span class="token number">7</span>                  <span class="token comment">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span>    <span class="token number">24</span><span class="token operator">:</span> astore_3    <span class="token number">25</span><span class="token operator">:</span> <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说其实上面的代码其实相当于：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">"hello "</span><span class="token punctuation">;</span><span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">"world!"</span><span class="token punctuation">;</span><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> ab <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，如果再笼统的回答：通过加号拼接字符串会创建多个 <code>String</code> 对象，因此性能比 <code>StringBuilder</code> 差，就是错误的了。因为本质上加号拼接的效果最终经过编译器处理之后和 <code>StringBuilder</code> 是一致的。</p><p>当然，循环里拼接还是建议用 <code>StringBuilder</code>，为什么，因为循环一次就会创建一个新的 <code>StringBuilder</code> 对象，大家可以自行实验。</p><h3 id="intern-方法有什么作用？"><a href="#intern-方法有什么作用？" class="headerlink" title="intern 方法有什么作用？"></a>intern 方法有什么作用？</h3><p>JDK 源码里已经对这个方法进行了说明：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span> <span class="token generics"><span class="token punctuation">&lt;</span>p<span class="token punctuation">></span></span><span class="token operator">*</span> <span class="token class-name">When</span> the intern method is invoked<span class="token punctuation">,</span> <span class="token keyword">if</span> the pool already contains a<span class="token operator">*</span> string equal <span class="token keyword">to</span> <span class="token keyword">this</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@code</span> <span class="token class-name">String</span><span class="token punctuation">&#125;</span> object as determined by<span class="token operator">*</span> the <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@link</span> #<span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> method<span class="token punctuation">,</span> then the string from the pool is<span class="token operator">*</span> <span class="token class-name"><span class="token namespace">returned<span class="token punctuation">.</span></span> Otherwise</span><span class="token punctuation">,</span> <span class="token keyword">this</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@code</span> <span class="token class-name">String</span><span class="token punctuation">&#125;</span> object is added <span class="token keyword">to</span> <span class="token namespace">the</span><span class="token operator">*</span> pool and a reference <span class="token keyword">to</span> <span class="token keyword">this</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@code</span> <span class="token class-name">String</span><span class="token punctuation">&#125;</span> object is returned<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token generics"><span class="token punctuation">&lt;</span>p<span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>意思也很好懂：</p><ul><li>如果当前字符串内容存在于字符串常量池（即 <code>equals()</code> 方法为 <code>true</code>，也就是内容一样），直接返回字符串常量池中的字符串</li><li>否则，将此 <code>String</code> 对象添加到池中，并返回 <code>String</code> 对象的引用</li></ul><h2 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h2><h3 id="Integer-a-127，Integer-b-127；Integer-c-128，Integer-d-128；，相等吗"><a href="#Integer-a-127，Integer-b-127；Integer-c-128，Integer-d-128；，相等吗" class="headerlink" title="Integer a= 127，Integer b = 127；Integer c= 128，Integer d = 128；，相等吗?"></a>Integer a= 127，Integer b = 127；Integer c= 128，Integer d = 128；，相等吗?</h3><p>答案是 <code>a 和 b</code> 相等，<code>c 和 d</code> 不相等。</p><ul><li>对于基本数据类型 == 比较的值</li><li>对于引用数据类型 == 比较的是地址</li></ul><p><code>Integer a= 127</code> 这种赋值，是用到了 <code>Integer</code> 自动装箱的机制。自动装箱的时候会去缓存池里取 <code>Integer</code> 对象，没有取到才会创建新的对象。</p><p>如果整型字面量的值在 - 128 到 127 之间，那么自动装箱时不会 <code>new</code> 新的 <code>Integer</code> 对象，而是直接引用缓存池中的 <code>Integer</code> 对象，超过范围 <code>a1==b1</code> 的结果是 <code>false</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token operator">==</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//false</span>        <span class="token class-name">Integer</span> c <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> d <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//false</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>什么是 Integer 缓存？</p></blockquote><p>因为根据实践发现大部分的数据操作都集中在值比较小的范围，因此 <code>Integer</code> 搞了个缓存池，默认范围是 -128 到 127，可以根据通过设置<code>JVM-XX:AutoBoxCacheMax=</code>来修改缓存的最大值，最小值改不了。</p><p>实现的原理是 <code>int</code> 在自动装箱的时候会调用 <code>Integer.valueOf</code>，进而用到了 <code>IntegerCache</code>。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643743.png" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643743.png"></a>   </p><p>很简单，就是判断下值是否在缓存范围之内，如果是的话去 <code>IntegerCache</code> 中取，不是的话就创建一个新的 <code>Integer</code> 对象。</p><p><code>IntegerCache</code> 是一个静态内部类， 在静态块中会初始化好缓存值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IntegerCache</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//创建Integer对象存储</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="String-怎么转成-Integer-的？原理？"><a href="#String-怎么转成-Integer-的？原理？" class="headerlink" title="String 怎么转成 Integer 的？原理？"></a>String 怎么转成 Integer 的？原理？</h3><p>PS: 这道题印象中在一些面经中出场过几次。</p><p><code>String</code> 转成 <code>Integer</code>，主要有两个方法：</p><ul><li><code>Integer.parseInt(String s)</code></li><li><code>Integer.valueOf(String s)</code></li></ul><p>不管哪一种，最终还是会调用 <code>Integer</code> 类内中的<code>parseInt(String s, int radix)</code>方法。</p><p>抛去一些边界之类的看看核心代码：</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public static int parseInt(String s, int radix) throws NumberFormatException    &#123;        int result &#x3D; 0;        &#x2F;&#x2F;是否是负数        boolean negative &#x3D; false;        &#x2F;&#x2F;char字符数组下标和长度        int i &#x3D; 0, len &#x3D; s.length();        int digit;        &#x2F;&#x2F;判断字符长度是否大于0，否则抛出异常        if (len &gt; 0) &#123;            while (i &lt; len) &#123;                &#x2F;&#x2F; Accumulating negatively avoids surprises near MAX_VALUE                &#x2F;&#x2F;返回指定基数中字符表示的数值。（此处是十进制数值）                digit &#x3D; Character.digit(s.charAt(i++),radix);                &#x2F;&#x2F;进制位乘以数值                result *&#x3D; radix;                  result -&#x3D; digit;            &#125;        &#125;         &#x2F;&#x2F;根据上面得到的是否负数，返回相应的值        return negative ? result : -result;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>去掉枝枝蔓蔓（当然这些枝枝蔓蔓可以去看看，源码 <code>cover</code> 了很多情况），其实剩下的就是一个简单的字符串遍历计算，不过计算方式有点反常规，是用负的值累减。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644037.png" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644037.png"></a> </p><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><h3 id="Object-类的常见方法"><a href="#Object-类的常见方法" class="headerlink" title="Object 类的常见方法?"></a>Object 类的常见方法?</h3><p>Object 类是一个特殊的类，是所有类的父类，也就是说所有类都可以调用它的方法。它主要提供了以下 11 个方法，大概可以分为六类：</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644047.png" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644047.png"></a></p><h3 id="对象比较："><a href="#对象比较：" class="headerlink" title="对象比较："></a><strong>对象比较</strong>：</h3><ul><li><code>public native int hashCode() ：native</code> 方法，用于返回对象的哈希码，主要使用在哈希表中，比如 <code>JDK 中的 HashMap。</code></li><li><code>public boolean equals(Object obj)</code>：用于比较 2 个对象的内存地址是否相等，<code>String</code> 类对该方法进行了重写用户比较字符串的值是否相等。</li></ul><h3 id="对象拷贝："><a href="#对象拷贝：" class="headerlink" title="对象拷贝："></a><strong>对象拷贝</strong>：</h3><ul><li><code>protected native Object clone() throws CloneNotSupportedException</code>：<code>naitive</code> 方法，用于创建并返回当前对象的一份拷贝。一般情况下，对于任何对象 x，表达式 <code>x.clone() != x 为 true</code>，<code>x.clone().getClass() == x.getClass() 为 true</code>。<code>Object</code> 本身没有实现 <code>Cloneable</code> 接口，所以不重写 <code>clone</code> 方法并且进行调用的话会发生 <code>CloneNotSupportedException</code> 异常。</li></ul><h3 id="对象转字符串："><a href="#对象转字符串：" class="headerlink" title="对象转字符串："></a><strong>对象转字符串：</strong></h3><ul><li><code>public String toString()</code>：返回类的名字 @实例的哈希码的 16 进制的字符串。建议 Object 所有的子类都重写这个方法。</li></ul><h3 id="多线程调度："><a href="#多线程调度：" class="headerlink" title="多线程调度："></a><strong>多线程调度：</strong></h3><ul><li><code>public final native void notify()</code>：<code>native</code> 方法，并且不能重写。唤醒一个在此对象监视器上等待的线程 (监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。</li><li><code>public final native void notifyAll()</code>：<code>native</code> 方法，并且不能重写。跟 <code>notify</code> 一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。</li><li><code>public final native void wait(long timeout) throws InterruptedException</code>：<code>native</code> 方法，并且不能重写。暂停线程的执行。注意：<code>sleep</code> 方法没有释放锁，而 wait 方法释放了锁 。timeout 是等待时间。</li><li><code>public final void wait(long timeout, int nanos) throws InterruptedException</code>：多了 <code>nanos</code> 参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。所以超时的时间还需要加上 nanos 毫秒。</li><li><code>public final void wait() throws InterruptedException</code>：跟之前的 2 个 <code>wait</code> 方法一样，只不过该方法一直等待，没有超时时间这个概念</li></ul><h3 id="反射："><a href="#反射：" class="headerlink" title="反射："></a><strong>反射：</strong></h3><ul><li><code>public final native Class&lt;?&gt; getClass()</code>：<code>native</code> 方法，用于返回当前运行时对象的 <code>Class</code> 对象，使用了 <code>final</code> 关键字修饰，故不允许子类重写。</li></ul><h3 id="垃圾回收："><a href="#垃圾回收：" class="headerlink" title="垃圾回收："></a><strong>垃圾回收：</strong></h3><ul><li><code>protected void finalize() throws Throwable</code> ：通知垃圾收集器回收对象。</li></ul></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础核心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java系列（二）| 面向对象</title>
      <link href="/posts/56665.html"/>
      <url>/posts/56665.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="面向对象和面向过程的区别"><a href="#面向对象和面向过程的区别" class="headerlink" title="面向对象和面向过程的区别?"></a>面向对象和面向过程的区别?</h2><ul><li><strong>面向过程</strong> ：面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的一次调用就可以。</li><li><strong>面向对象</strong> ：面向对象，把构成问题的事务分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事件在解决整个问题的过程所发生的行为。目的是为了写出通用的代码，加强代码的重用，屏蔽差异性。</li></ul><p>用一个比喻：面向过程是编年体；面向对象是纪传体。</p><p><a href="https://s2.loli.net/2024/12/19/MgZTzAKowWvndHE.png" title="面向对象和面向过程的区别" class="gallery-item"><img src="https://s2.loli.net/2024/12/19/MgZTzAKowWvndHE.png" alt="面向对象和面向过程的区别"></a> </p><h2 id="面向对象有哪些特性"><a href="#面向对象有哪些特性" class="headerlink" title="面向对象有哪些特性"></a>面向对象有哪些特性</h2><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642081.png" title="面向对象三大特征" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642081.png" alt="面向对象三大特征"></a> </p><ul><li><p><strong>封装</strong></p><p>封装把⼀个对象的属性私有化，同时提供⼀些可以被外界访问的属性的⽅法。</p></li><li><p><strong>继承</strong></p><p>继承是使⽤已存在的类的定义作为基础创建新的类，新类的定义可以增加新的属性或新的方法，也可以继承父类的属性和方法。通过继承可以很方便地进行代码复用。</p></li></ul><blockquote><p>关于继承有以下三个要点：</p></blockquote><ol><li>⼦类拥有⽗类对象所有的属性和⽅法（包括私有属性和私有⽅法），但是⽗类中的私有属性和⽅法⼦类是⽆法访问，只是拥有。</li><li>⼦类可以拥有⾃⼰属性和⽅法，即⼦类可以对⽗类进⾏扩展。</li><li>⼦类可以⽤⾃⼰的⽅式实现⽗类的⽅法。</li></ol><ul><li><p><strong>多态</strong></p><p>所谓多态就是指程序中定义的引⽤变量所指向的具体类型和通过该引⽤变量发出的⽅法调⽤在编程时并不确定，⽽是在程序运⾏期间才确定，即⼀个引⽤变量到底会指向哪个类的实例对象，该引⽤变量发出的⽅法调⽤到底是哪个类中实现的⽅法，必须在由程序运⾏期间才能决定。</p><p>在 Java 中有两种形式可以实现多态：继承（多个⼦类对同⼀⽅法的重写）和接⼝（实现接⼝并覆盖接⼝中同⼀⽅法）。</p></li></ul><h2 id="重载（overload）和重写（override）的区别？"><a href="#重载（overload）和重写（override）的区别？" class="headerlink" title="重载（overload）和重写（override）的区别？"></a>重载（overload）和重写（override）的区别？</h2><p>方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。</p><ul><li>重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；</li><li>重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。</li></ul><p>方法重载的规则：</p><ol><li>方法名一致，参数列表中参数的顺序，类型，个数不同。</li><li>重载与方法的返回值无关，存在于父类和子类，同类中。</li><li>可以抛出不同的异常，可以有不同修饰符。</li></ol><h2 id="访问修饰符-public、private、protected、以及不写（默认）时的区别？"><a href="#访问修饰符-public、private、protected、以及不写（默认）时的区别？" class="headerlink" title="访问修饰符 public、private、protected、以及不写（默认）时的区别？"></a>访问修饰符 public、private、protected、以及不写（默认）时的区别？</h2><p><code>Java</code> 中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。<code>Java</code> 支持 4 种不同的访问权限。</p><ul><li><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。可以修饰在类、接口、变量、方法。</li><li><strong>private</strong> : 在同一类内可见。可以修饰变量、方法。<strong>注意：不能修饰类（外部类）</strong></li><li><strong>public</strong> : 对所有类可见。可以修饰类、接口、变量、方法</li><li><strong>protected</strong> : 对同一包内的类和所有子类可见。可以修饰变量、方法。<strong>注意：不能修饰类（外部类）</strong>。</li></ul><p><a href="https://s2.loli.net/2024/12/19/zyC4SpkMo2ndbwQ.png" title="访问修饰符和可见性" class="gallery-item"><img src="https://s2.loli.net/2024/12/19/zyC4SpkMo2ndbwQ.png" alt="访问修饰符和可见性"></a> </p><h2 id="this-关键字有什么作用？"><a href="#this-关键字有什么作用？" class="headerlink" title="this 关键字有什么作用？"></a>this 关键字有什么作用？</h2><p><code>this</code> 是自身的一个对象，代表对象本身，可以理解为：<strong>指向对象本身的一个指针</strong>。</p><p><code>this</code> 的用法在 <code>Java</code> 中大体可以分为 3 种：</p><ol><li>普通的直接引用，this 相当于是指向当前对象本身</li><li>形参与成员变量名字重名，用 this 来区分：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>引用本类的构造函数</li></ol><h2 id="抽象类-abstract-class-和接口-interface-有什么区别？"><a href="#抽象类-abstract-class-和接口-interface-有什么区别？" class="headerlink" title="抽象类 (abstract class) 和接口 (interface) 有什么区别？"></a>抽象类 (<code>abstract class</code>) 和接口 (<code>interface</code>) 有什么区别？</h2><ol><li>接⼝的⽅法默认是 <code>public</code> ，所有⽅法在接⼝中不能有实现 (<code>Java 8</code> 开始接⼝⽅法可以有默认实现），⽽抽象类可以有⾮抽象的⽅法。</li><li>接⼝中除了 <code>static</code> 、 <code>final</code> 变量，不能有其他变量，⽽抽象类中则不⼀定。</li><li>⼀个类可以实现多个接⼝，但只能实现⼀个抽象类。接⼝⾃⼰本身可以通过 <code>extends</code> 关键字扩展多个接⼝。</li><li>接⼝⽅法默认修饰符是 <code>public</code> ，抽象⽅法可以有 <code>public</code> 、 <code>protected</code> 和 <code>default</code> 这些修饰符（抽象⽅法就是为了被重写所以不能使⽤ private 关键字修饰！）。</li><li>从设计层⾯来说，抽象是对类的抽象，是⼀种模板设计，⽽接⼝是对⾏为的抽象，是⼀种⾏为的规范。</li></ol><blockquote><ol><li>在 JDK8 中，接⼝也可以定义静态⽅法，可以直接⽤接⼝名调⽤。实现类和实现是不可以调⽤的。如果同时实现两个接⼝，接⼝中定义了⼀样的默认⽅法，则必须重写，不然会报错。</li><li>jdk9 的接⼝被允许定义私有⽅法 。</li></ol></blockquote><p>总结⼀下 <code>jdk7~jdk9 Java</code> 中接⼝的变化：</p><ol><li>在 <code>jdk 7</code> 或更早版本中，接⼝⾥⾯只能有常量变量和抽象⽅法。这些接⼝⽅法必须由选择实现接⼝的类实现。</li><li><code>jdk 8</code> 的时候接⼝可以有默认⽅法和静态⽅法功能。</li><li><code>jdk 9</code> 在接⼝中引⼊了私有⽅法和私有静态⽅法。</li></ol><h2 id="成员变量与局部变量的区别有哪些？"><a href="#成员变量与局部变量的区别有哪些？" class="headerlink" title="成员变量与局部变量的区别有哪些？"></a>成员变量与局部变量的区别有哪些？</h2><ol><li><strong>从语法形式上看</strong>：成员变量是属于类的，⽽局部变量是在⽅法中定义的变量或是⽅法的参数；成员变量可以被 public , private , static 等修饰符所修饰，⽽局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰。</li><li><strong>从变量在内存中的存储⽅式来看</strong>：如果成员变量是使⽤ static 修饰的，那么这个成员变量是属于类的，如果没有使⽤ static 修饰，这个成员变量是属于实例的。对象存于堆内存，如果局部变量类型为基本数据类型，那么存储在栈内存，如果为引⽤数据类型，那存放的是指向堆内存对象的引⽤或者是指向常量池中的地址。</li><li><strong>从变量在内存中的⽣存时间上看</strong>：成员变量是对象的⼀部分，它随着对象的创建⽽存在，⽽局部变量随着⽅法的调⽤⽽⾃动消失。</li><li><strong>成员变量如果没有被赋初值</strong>：则会⾃动以类型的默认值⽽赋值（⼀种情况例外: 被 final 修饰的成员变量也必须显式地赋值），⽽局部变量则不会⾃动赋值。</li></ol><h2 id="静态变量和实例变量的区别？静态方法、实例方法呢？"><a href="#静态变量和实例变量的区别？静态方法、实例方法呢？" class="headerlink" title="静态变量和实例变量的区别？静态方法、实例方法呢？"></a>静态变量和实例变量的区别？静态方法、实例方法呢？</h2><blockquote><p>静态变量和实例变量的区别？</p></blockquote><p><strong>静态变量:</strong> 是被 <code>static</code> 修饰符修饰的变量，也称为类变量，它属于类，不属于类的任何一个对象，一个类不管创建多少个对象，静态变量在内存中有且仅有一个副本。</p><p><strong>实例变量:</strong> 必须依存于某一实例，需要先创建对象然后通过对象才能访问到它。静态变量可以实现让多个对象共享内存。</p><blockquote><p>静态⽅法和实例⽅法有何不同?</p></blockquote><p>类似地。</p><p><strong>静态方法</strong>：<code>static</code> 修饰的方法，也被称为类方法。在外部调⽤静态⽅法时，可以使⽤ “ <strong>类名. ⽅法名</strong> “的⽅式，也可以使⽤” <strong>对象名. ⽅法名</strong> “ 的⽅式。静态方法里不能访问类的非静态成员变量和方法。</p><p><strong>实例⽅法</strong>：依存于类的实例，需要使用 “ <strong>对象名. ⽅法名</strong> “ 的⽅式调用；可以访问类的所有成员变量和方法。</p><h2 id="final-关键字有什么作用？"><a href="#final-关键字有什么作用？" class="headerlink" title="final 关键字有什么作用？"></a>final 关键字有什么作用？</h2><p><code>final</code> 表示不可变的意思，可用于修饰类、属性和方法：</p><ul><li><p>被 final 修饰的类不可以被继承</p></li><li><p>被 final 修饰的方法不可以被重写</p></li><li><p>被 final 修饰的变量不可变，被 final 修饰的变量必须被显式第指定初始值，还得注意的是，这里的不可变指的是变量的引用不可变，不是引用指向的内容的不可变。</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//abcd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一张图说明：</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643611.png" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643611.png"></a> </p></li></ul><h2 id="final、finally、finalize-的区别？"><a href="#final、finally、finalize-的区别？" class="headerlink" title="final、finally、finalize 的区别？"></a>final、finally、finalize 的区别？</h2><ul><li><p><code>final</code> 用于修饰变量、方法和类：final 修饰的类不可被继承；修饰的方法不可被重写；修饰的变量不可变。</p></li><li><p><code>finally</code> 作为异常处理的一部分，它只能在 <code>try/catch</code> 语句中，并且附带一个语句块表示这段语句最终一定被执行（无论是否抛出异常），经常被用在需要释放资源的情况下，<code>System.exit (0)</code> 可以阻断 finally 执行。</p></li><li><p><code>finalize</code> 是在 <code>java.lang.Object</code> 里定义的方法，也就是说每一个对象都有这么个方法，这个方法在 <code>gc</code> 启动，该对象被回收的时候被调用。</p><p>一个对象的 <code>finalize</code> 方法只会被调用一次，finalize 被调用不一定会立即回收该对象，所以有可能调用 finalize 后，该对象又不需要被回收了，然后到了真正要被回收的时候，因为前面调用过一次，所以不会再次调用 finalize 了，进而产生问题，因此不推荐使用 finalize 方法。</p></li></ul><h2 id="和-equals-的区别？"><a href="#和-equals-的区别？" class="headerlink" title="== 和 equals 的区别？"></a>== 和 equals 的区别？</h2><p><strong>==</strong> : 它的作⽤是判断两个对象的地址是不是相等。即，判断两个对象是不是同⼀个对象 (基本数据类型 **== **比较的是值，引⽤数据类型 <code>==</code> 比较的是内存地址)。</p><p><strong>equals()</strong> : 它的作⽤也是判断两个对象是否相等。但是这个 “相等” 一般也分两种情况：</p><ul><li>默认情况：类没有覆盖 <code>equals()</code> ⽅法。则通过 <code>equals()</code> 比较该类的两个对象时，等价于通过 “**==**” 比较这两个对象，还是相当于比较内存地址。</li><li>自定义情况：类覆盖了 <code>equals()</code> ⽅法。我们平时覆盖的 <code>equals()</code> 方法一般是比较两个对象的内容是否相同，自定义了一个相等的标准，也就是两个对象的值是否相等。</li></ul><p>举个例⼦，<code>Person</code>，我们认为两个人的编号和姓名相同，就是一个人：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> no<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>no<span class="token punctuation">,</span> person<span class="token punctuation">.</span>no<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>no<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hashCode-与-equals"><a href="#hashCode-与-equals" class="headerlink" title="hashCode 与 equals?"></a><code>hashCode</code> 与 <code>equals</code>?</h2><p>这个也是面试常问——“你重写过 <code>hashcode</code> 和 <code>equals</code> 么，为什么重写 equals 时必须重写 <code>hashCode</code> ⽅法？”</p><blockquote><p>什么是 <code>HashCode</code>？</p></blockquote><p><code>hashCode</code>() 的作⽤是获取哈希码，也称为散列码；它实际上是返回⼀个 int 整数，定义在 Object 类中， 是一个本地⽅法，这个⽅法通常⽤来将对象的内存地址转换为整数之后返回。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>哈希码主要在哈希表这类集合映射的时候用到，哈希表存储的是键值对 (key-value)，它的特点是：能根据“键” 快速的映射到对应的“值”。这其中就利⽤到了哈希码！</p><blockquote><p>为什么要有 <code>hashCode</code>？</p></blockquote><p>上面已经讲了，主要是在哈希表这种结构中用的到。</p><p>例如 HashMap 怎么把 key 映射到对应的 value 上呢？用的就是哈希取余法，也就是拿哈希码和存储元素的数组的长度取余，获取 key 对应的 value 所在的下标位置。详细可见：<a href="https://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&mid=2247488788&idx=1&sn=01875e3e45515c2d57593cb7a01d0b6b&scene=21#wechat_redirect">面渣逆袭：Java 集合连环三十问</a></p><blockquote><p>为什么重写 <code>equals</code> 时必须重写 <code>hashCode</code> ⽅法？</p></blockquote><p>如果两个对象相等，则 <code>hashcode</code> ⼀定也是相同的。两个对象相等，对两个对象分别调⽤ equals ⽅法都返回 true。反之，两个对象有相同的 hashcode 值，它们也不⼀定是相等的 。因此，<strong>equals</strong> ⽅法被覆盖过，则 <strong>hashCode</strong> ⽅法也必须被覆盖。</p><p><code>hashCode()</code> 的默认⾏为是对堆上的对象产⽣独特值。如果没有重写 hashCode() ，则该 class 的两个对象⽆论如何都不会相等（即使这两个对象指向相同的数据）</p><blockquote><p>为什么两个对象有相同的 <code>hashcode</code> 值，它们也不⼀定是相等的？</p></blockquote><p>因为可能会<strong>碰撞</strong>， <code>hashCode()</code> 所使⽤的散列算法也许刚好会让多个对象传回相同的散列值。越糟糕的散列算法越容易碰撞，但这也与数据值域分布的特性有关（所谓碰撞也就是指的是不同的对象得到相同的 <code>hashCode()</code>。</p><h2 id="Java-是值传递，还是引用传递？"><a href="#Java-是值传递，还是引用传递？" class="headerlink" title="Java 是值传递，还是引用传递？"></a>Java 是值传递，还是引用传递？</h2><p>Java 语言是<strong>值传递</strong>。Java 语言的方法调用只支持参数的值传递。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。对象的属性可以在被调用过程中被改变，但对对象引用的改变是不会影响到调用者的。</p><p>JVM 的内存分为堆和栈，其中栈中存储了基本数据类型和引用数据类型实例的地址，也就是对象地址。</p><p>而对象所占的空间是在堆中开辟的，所以传递的时候可以理解为把变量存储的对象地址给传递过去，因此引用类型也是值传递。</p><p><a href="https://s2.loli.net/2024/12/19/LEpvqsxJHY3DBXw.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/19/LEpvqsxJHY3DBXw.png"></a>Java 引用数据值传递示意图</p><h2 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝?"></a>深拷贝和浅拷贝?</h2><ul><li><strong>浅拷贝</strong>：仅拷贝被拷贝对象的成员变量的值，也就是基本数据类型变量的值，和引用数据类型变量的地址值，而对于引用类型变量指向的堆中的对象不会拷贝。</li><li><strong>深拷贝</strong>：完全拷贝一个对象，拷贝被拷贝对象的成员变量的值，堆中的对象也会拷贝一份。</li></ul><p>例如现在有一个 <code>order</code> 对象，里面有一个 <code>products</code> 列表，它的浅拷贝和深拷贝的示意图：</p><p><a href="https://s2.loli.net/2024/12/19/yaZIoNrO3vteKmi.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/19/yaZIoNrO3vteKmi.png"></a>浅拷贝和深拷贝示意图</p><p>因此深拷贝是安全的，浅拷贝的话如果有引用类型，那么拷贝后对象，引用类型变量修改，会影响原对象。</p><blockquote><p>浅拷贝如何实现呢？</p></blockquote><p>Object 类提供的 clone() 方法可以非常简单地实现对象的浅拷贝。</p><blockquote><p>深拷贝如何实现呢？</p></blockquote><ul><li>重写克隆方法：重写克隆方法，引用类型变量单独克隆，这里可能会涉及多层递归。</li><li>序列化：可以先讲原对象序列化，再反序列化成拷贝对象。</li></ul><h2 id="Java-创建对象有哪几种方式？"><a href="#Java-创建对象有哪几种方式？" class="headerlink" title="Java 创建对象有哪几种方式？"></a>Java 创建对象有哪几种方式？</h2><p>Java 中有以下四种创建对象的方式:</p><p><a href="https://s2.loli.net/2024/12/19/OS6iboZhjkvMJLr.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/19/OS6iboZhjkvMJLr.png"></a> </p><ul><li><code>new</code> 创建新对象</li><li>通过反射机制</li><li>采用 <code>clone</code> 机制</li><li>通过序列化机制</li></ul><p>前两者都需要显式地调用构造方法。对于 <code>clone</code> 机制, 需要注意浅拷贝和深拷贝的区别，对于序列化机制需要明确其实现原理，在 <code>Java</code> 中序列化可以通过实现 <code>Externalizable</code> 或者 <code>Serializable</code> 来实现。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础核心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java系列（一）| 基础语法</title>
      <link href="/posts/42528.html"/>
      <url>/posts/42528.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="Java-概述"><a href="#Java-概述" class="headerlink" title="Java 概述"></a>Java 概述</h2><h3 id="什么是-Java？"><a href="#什么是-Java？" class="headerlink" title="什么是 Java？"></a>什么是 Java？</h3><p>Java 是一门面向对象的编程语言，不仅吸收了 <code>C++</code> 语言的各种优点，还摒弃了 <code>C++</code> 里难以理解的多继承、指针等概念，因此 <code>Java</code> 语言具有功能强大和简单易用两个特征。<code>Java</code> 语言作为静态面向对象编程语言的优秀代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。</p><h3 id="Java-语言有哪些特点？"><a href="#Java-语言有哪些特点？" class="headerlink" title="Java 语言有哪些特点？"></a>Java 语言有哪些特点？</h3><p>Java 语言有很多优秀（可吹）的特点，以下几个是比较突出的：</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641482.png" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641482.png"></a><strong>Java 语言特点</strong></p><ul><li><strong>面向对象</strong>（封装，继承，多态）；</li><li><strong>平台无关性</strong>：Java 是 “【<strong>一次编写，到处运行</strong>（<code>Write Once，Run any Where</code>）】” 的语言，因此采用 <code>Java</code> 语言编写的程序具有很好的可移植性，而保证这一点的正是 <code>Java</code> 的虚拟机机制。在引入虚拟机之后，<code>Java</code> 语言在不同的平台上运行不需要重新编译。</li><li><strong>支持多线程</strong>：<code>C++</code> 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计</li><li>编译与解释并存；</li></ul><h3 id="JVM、JDK-和-JRE-有什么区别？"><a href="#JVM、JDK-和-JRE-有什么区别？" class="headerlink" title="JVM、JDK 和 JRE 有什么区别？"></a>JVM、JDK 和 JRE 有什么区别？</h3><p><code>JVM</code>：<code>Java Virtual Machine</code>，<code>Java</code> 虚拟机，<code>Java</code> 程序运行在 <code>Java</code> 虚拟机上。针对不同系统的实现（<code>Windows，Linux，macOS</code>）不同的 <code>JVM</code>，因此 <code>Java</code> 语言可以实现跨平台。</p><p><code>JRE</code>：<code>Java</code> 运⾏时环境。它是运⾏已编译 <code>Java</code> 程序所需的所有内容的集合，包括【 <code>Java</code> 虚拟机（<code>JVM</code>）、<code>Java</code> 类库、<code>Java</code> 命令和其他的⼀些基础构件】。但是，它不能⽤于创建新程序。</p><p><code>JDK</code>: <code>Java Development Kit</code>，它是功能⻬全的 <code>Java SDK。</code>它拥有 <code>JRE</code> 所拥有的⼀切，还有编译器（<code>javac</code>）和⼯具（如 <code>javadoc</code> 和 <code>jdb</code>）。它能够创建和编译程序。</p><p>简单来说，<code>JDK &gt; JRE &gt; JVM</code></p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641391.png" title="JDK、JRE、JVM 关系" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641391.png" alt="JDK、JRE、JVM 关系"></a></p><h3 id="说说什么是跨平台性？原理是什么"><a href="#说说什么是跨平台性？原理是什么" class="headerlink" title="说说什么是跨平台性？原理是什么"></a>说说什么是跨平台性？原理是什么</h3><p>所谓跨平台性，是指 <code>Java</code> 语言编写的程序，一次编译后，可以在多个系统平台上运行。</p><p>实现原理：<code>Java</code> 程序是通过 <code>Java</code> 虚拟机在系统平台上运行的，只要该系统可以安装相应的 <code>Java</code> 虚拟机，该系统就可以运行 <code>java</code> 程序。</p><h3 id="什么是字节码？采用字节码的好处是什么"><a href="#什么是字节码？采用字节码的好处是什么" class="headerlink" title="什么是字节码？采用字节码的好处是什么?"></a>什么是字节码？采用字节码的好处是什么?</h3><p>所谓的字节码，就是 <code>Java</code> 程序经过编译之类产生的<code>. class</code> 文件，字节码能够被虚拟机识别，从而实现 Java 程序的跨平台性。</p><p><strong>Java</strong> 程序从源代码到运行主要有三步：</p><ul><li><strong>编译</strong>：将我们的代码（<code>.java</code>）编译成虚拟机可以识别理解的字节码 (<code>.class</code>)</li><li><strong>解释</strong>：虚拟机执行 <code>Java</code> 字节码，将字节码翻译成机器能识别的机器码</li><li><strong>执行</strong>：对应的机器执行二进制机器码</li></ul><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641227.png" title="Java 程序执行过程" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641227.png" alt="Java 程序执行过程"></a></p><p>只需要把 <code>Java</code> 程序编译成 <code>Java</code> 虚拟机能识别的 <code>Java</code> 字节码，不同的平台安装对应的 <code>Java</code> 虚拟机，这样就可以可以实现 <code>Java</code> 语言的平台无关性。</p><h3 id="为什么说-Java-语言-“编译与解释并存”？"><a href="#为什么说-Java-语言-“编译与解释并存”？" class="headerlink" title="为什么说 Java 语言 “编译与解释并存”？"></a>为什么说 Java 语言 “编译与解释并存”？</h3><blockquote><p>编译型：一次性翻译<br>解释性：逐行翻译<br>Java 程序 先编译 后解释 【.java –&gt;.class –&gt;机器码】</p></blockquote><p>高级编程语言按照程序的执行方式分为<strong>编译型</strong>和<strong>解释型</strong>两种。</p><ul><li><strong>编译型语言</strong>：指编译器针对特定的操作系统将源代码<strong>一次性翻译</strong>成可被该平台执行的机器码；</li><li><strong>解释型语言</strong>：指解释器对源程序<strong>逐行解释</strong>成特定平台的机器码并立即执行。</li></ul><p><strong>Java</strong> 语言既具有编译型语言的特征，也具有解释型语言的特征。因为 Java 程序要经过<strong>先编译</strong>，<strong>后解释</strong>两个步骤。</p><ol><li><p><strong>编译</strong>：<code>.java</code> 编译 <code>.class</code> 。<code>Java</code> 编写的程序需要先经过编译步骤，生成字节码（<code>.class</code> 文件）</p></li><li><p><strong>解释</strong>：这种字节码必须再经过 <code>JVM</code>，解释成操作系统能识别的<strong>机器码</strong>，在由操作系统执行。</p><p>因此，我们可以认为 Java 语言<strong>编译</strong>与<strong>解释</strong>并存。</p></li></ol><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641639.png" title="编译与解释" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641639.png" alt="编译与解释"></a></p><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="Java-有哪些数据类型？"><a href="#Java-有哪些数据类型？" class="headerlink" title="Java 有哪些数据类型？"></a>Java 有哪些数据类型？</h3><p><strong>定义：</strong><code>Java</code> 语言是强类型语言，对于每一种数据都定义了明确的具体的数据类型，在内存中分配了不同大小的内存空间。</p><p><code>Java</code> 语言数据类型分为两种：<strong>基本数据类型</strong>和<strong>引用数据类型</strong>。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641466.png" title="Java 数据类型" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641466.png" alt="Java 数据类型"></a></p><p><strong>基本数据类型：</strong></p><ul><li>数值型</li><li>整数类型<code>（byte、short、long）</code></li><li>浮点类型<code>（float、long）</code></li><li>字符型<code>（char）</code></li><li>布尔型<code>（boolean）</code></li></ul><p><code>Java</code> 基本数据类型范围和默认值：</p><table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th></tr></thead><tbody><tr><td><code>int</code></td><td>32</td><td>4</td><td>0</td></tr><tr><td><code>short</code></td><td>16</td><td>2</td><td>0</td></tr><tr><td><code>long</code></td><td>64</td><td>8</td><td>0L</td></tr><tr><td><code>byte</code></td><td>8</td><td>1</td><td>0</td></tr><tr><td><code>char</code></td><td>16</td><td>2</td><td>'u0000'</td></tr><tr><td><code>float</code></td><td>32</td><td>4</td><td>0f</td></tr><tr><td><code>double</code></td><td>64</td><td>8</td><td>0d</td></tr><tr><td><code>boolean</code></td><td>1</td><td><br></td><td>false</td></tr></tbody></table><p><strong>引用数据类型：</strong></p><ul><li>类（<code>class</code>）</li><li>接口（<code>interface</code>）</li><li>数组 (<code>array</code>[])</li></ul><h3 id="自动类型转换、强制类型转换？看看这几行代码？"><a href="#自动类型转换、强制类型转换？看看这几行代码？" class="headerlink" title="自动类型转换、强制类型转换？看看这几行代码？"></a>自动类型转换、强制类型转换？看看这几行代码？</h3><p><code>Java</code> 所有的数值型变量可以相互转换。</p><p>当把一个表数范围小的数值或变量直接赋给另一个表数范围大的变量时，可以进行自动类型转换；反之，需要强制转换。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641473.png" title="Java 自动类型转换方向" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641473.png" alt="Java 自动类型转换方向"></a></p><p>这就好像，小杯里的水倒进大杯没问题，但大杯的水倒进小杯就不行了，可能会溢出。</p><p>下面是一个例子：</p><blockquote><p><code>float f=3.4</code>，对吗？</p></blockquote><p>不正确。3.4 是单精度数，将双精度型（<code>double</code>）赋值给浮点型（<code>float</code>）属于下转型（<code>down-casting，</code>也称为<strong>窄化</strong>）会造成<strong>精度损失</strong>，因此需要强制类型转换<code>float f =(float)3.4;</code>或者写成<code>float f =3.4F</code></p><blockquote><p><code>short s1 = 1; s1 = s1 + 1；</code>对吗？<code>short s1 = 1; s1 += 1;</code>对吗？</p></blockquote><p>对于 <code>short s1 = 1; s1 = s1 + 1;</code> 编译出错，由于 1 是 <code>int</code> 类型，因此 <code>s1+1</code> 运算结果也是 int 型，需要强制转换类型才能赋值给 <code>short</code> 型。</p><p>而 <code>short s1 = 1; s1 += 1</code>; 可以正确编译，因为 <code>s1+=</code> 1; 相当于 <code>s1 = (short(s1 + 1)</code>; 其中有隐含的强制类型转换。</p><h3 id="什么是自动拆箱-封箱？"><a href="#什么是自动拆箱-封箱？" class="headerlink" title="什么是自动拆箱 / 封箱？"></a>什么是自动拆箱 / 封箱？</h3><ul><li><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来；</li><li><strong>拆箱</strong>：将包装类型转换为基本数据类型；</li></ul><p><code>Java</code> 可以自动对基本数据类型和它们的包装类进行装箱和拆箱。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642042.png" title="装箱和拆箱" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642042.png" alt="装箱和拆箱"></a></p><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">Integer i &#x3D; 10;  &#x2F;&#x2F;装箱int n &#x3D; i;   &#x2F;&#x2F;拆箱<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="amp-和-amp-amp-有什么区别？"><a href="#amp-和-amp-amp-有什么区别？" class="headerlink" title="&amp; 和 &amp;&amp; 有什么区别？"></a>&amp; 和 &amp;&amp; 有什么区别？</h3><ul><li>&amp; ：【<strong>逻辑与</strong>】两边都是<code>true</code>，结果为 <code>true</code>；反之为<code>false</code>；不管如何两边都会计算</li><li>&amp;&amp; ：【<strong>短路与</strong>】左边为 false ，不计算右边，结果为 <code>false</code>；左边为<code>true</code>，才计算右边，若为 <code>true</code> 结果为<code>true</code> ；反之为 false</li></ul><p>例如在验证用户登录时判定用户名不是 null 而且不是空字符串，应当写为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">username <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span><span class="token operator">!</span>username<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>二者的顺序不能交换，更不能用 &amp; 运算符，因为第一个条件如果不成立，根本不能进行字符串的 equals 比较，否则会产生 <code>NullPointerException</code> 异常。</p><p><strong>注意</strong>：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。</p><h3 id="switch-是否能作用在-byte-long-String-上？"><a href="#switch-是否能作用在-byte-long-String-上？" class="headerlink" title="switch 是否能作用在 byte/long/String 上？"></a>switch 是否能作用在 byte/long/String 上？</h3><ul><li>Java5 以前 switch(expr) 中，expr 只能是 byte、short、char、int。</li><li>Java 5 开始，Java 中引入了<strong>枚举类型</strong>， expr 也可以是 <code>enum</code> 类型。</li><li>Java 7 开始，expr 还可以是字符串 (String)，但是长整型(long) 在目前所有的版本中都是不可以的。</li><li>java 17 开始，预览版，支持使用 Long</li><li>java 21 开始，为正式版</li></ul><h3 id="break-continue-return-的区别及作用？"><a href="#break-continue-return-的区别及作用？" class="headerlink" title="break ,continue ,return 的区别及作用？"></a>break ,continue ,return 的区别及作用？</h3><ul><li><code>break</code> 跳出整个循环，不再执行循环 (<strong>结束当前的循环体</strong>)</li><li><code>continue</code> 跳出本次循环，继续执行下次循环 (<strong>结束正在执行的循环 进入下一个循环条件</strong>)</li><li><code>return</code> 程序返回，不再执行下面的代码 (<strong>结束当前的方法 直接返回</strong>)</li></ul><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642283.png" title="break 、continue 、return" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642283.png" alt="break 、continue 、return"></a></p><h3 id="用最有效率的方法计算-2-乘以-8？"><a href="#用最有效率的方法计算-2-乘以-8？" class="headerlink" title="用最有效率的方法计算 2 乘以 8？"></a>用最有效率的方法计算 2 乘以 8？</h3><p><code>2 &lt;&lt; 3</code>。<strong>位运算</strong>，数字的二进制位左移三位相当于乘以 <code>2</code> 的三次方。</p><p><a href="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171707119.png" title="位移" class="gallery-item"><img src="https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171707119.png" alt="位移"></a></p><h3 id="说说自增自减运算？看下这几个代码运行结果？"><a href="#说说自增自减运算？看下这几个代码运行结果？" class="headerlink" title="说说自增自减运算？看下这几个代码运行结果？"></a>说说自增自减运算？看下这几个代码运行结果？</h3><p>在写代码的过程中，常见的一种情况是需要某个整数类型变量增加 1 或减少 1，<code>Java</code> 提供了一种特殊的运算符，用于这种表达式，叫做自增运算符<code>（++)</code> 和自减运算符（–）。</p><p><code>++ 和 --</code> 运算符可以放在变量之前，也可以放在变量之后。</p><p>当运算符放在变量之前时 (前缀)，先自增 / 减，再赋值；当运算符放在变量之后时 (后缀)，先赋值，再自增 / 减。</p><p>例如，当 <code>b = ++a</code> 时，先自增（自己增加 1），再赋值（赋值给 b）；当 <code>b = a++</code> 时，先赋值 (赋值给 b)，再自增（自己增加 1）。也就是，++a 输出的是 a+1 的值，a++ 输出的是 a 值。</p><p>用一句口诀就是：“符号在前就先加 / 减，符号在后就后加 / 减”。</p><blockquote><p>看一下这段代码运行结果？</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>答案是 1。有点离谱对不对。</p><p>对于 <code>JVM</code> 而言，它对自增运算的处理，是会先定义一个临时变量来接收 i 的值，然后进行自增运算，最后又将临时变量赋给了值为 2 的 i，所以最后的结果为 1。</p><p>相当于这样的代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span>；<span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span>i<span class="token operator">++</span>；i <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这段代码会输出什么？</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    count <span class="token operator">=</span> count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count = "</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>答案是 0。</p><p>和上面的题目一样的道理，同样是用了临时变量，count 实际是等于临时变量的值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">autoAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> count<span class="token punctuation">;</span>    count <span class="token operator">=</span> coutn <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础核心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 系列（二）| GitHub 部署</title>
      <link href="/posts/29807.html"/>
      <url>/posts/29807.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文转载：<a href="https://zhuanlan.zhihu.com/p/60578464">使用 Hexo+GitHub 搭建个人免费博客教程（小白向）</a><br>本文只介绍如何部署到GitPage，默认Hexo已搭建</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="GitHub-Pages-是什么？"><a href="#GitHub-Pages-是什么？" class="headerlink" title="GitHub Pages 是什么？"></a>GitHub Pages 是什么？</h3><ul><li><a href="https://help.github.com/en/articles/what-is-github-pages">What is GitHub Pages? - GitHub Help</a></li></ul><p>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</p><h3 id="Hexo-是什么？"><a href="#Hexo-是什么？" class="headerlink" title="Hexo 是什么？"></a>Hexo 是什么？</h3><ul><li>官网：<a href="https://hexo.io/zh-cn/">hexo.io</a></li></ul><p>Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p><h3 id="Hexo-GitHub-文章发布原理"><a href="#Hexo-GitHub-文章发布原理" class="headerlink" title="Hexo + GitHub 文章发布原理"></a>Hexo + GitHub 文章发布原理</h3><p>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。</p><p><a href="https://pic3.zhimg.com/v2-a193a47cf70fe6ecf156e5f3d34920ea_r.jpg" class="gallery-item"><img src="https://pic3.zhimg.com/v2-a193a47cf70fe6ecf156e5f3d34920ea_r.jpg"></a></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="连接Github"><a href="#连接Github" class="headerlink" title="连接Github"></a>连接Github</h3><p>设置<code>Github</code> 信息<br>设置 git 配置的用户名邮箱 (将<code>lingzhexi</code> / <code>lingzhexi@gmail.com</code> 分别替换成自己的用户名和邮箱)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config --global user.name &quot;lingzhexi&quot;git config --global user.email &quot;lingzhexi@gmail.com&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="创建-SSH-密匙"><a href="#创建-SSH-密匙" class="headerlink" title="创建 SSH 密匙"></a>创建 SSH 密匙</h4><p>输入 <code>ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code>，然后一路回车。<br><a href="https://s2.loli.net/2024/12/19/Lw8hY5UT7lEMQV9.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/19/Lw8hY5UT7lEMQV9.png"></a> </p><p><a href="https://s2.loli.net/2024/12/19/WOCxrBDXbZvVoaF.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/19/WOCxrBDXbZvVoaF.png"></a> </p><h4 id="添加密匙"><a href="#添加密匙" class="headerlink" title="添加密匙"></a>添加密匙</h4><p>进入 <code>[C:\Users \ 用户名 \.ssh]</code> 目录（要勾选显示 “隐藏的项目”），用记事本打开公钥 <code>id_rsa.pu</code>b 文件并复制里面的内容。</p><p>登陆 <code>GitHub</code> ，进入 <code>Settings</code> 页面，选择左边栏的 <code>SSH and GPG keys</code>，点击 <code>New SSH key</code>。</p><p>Title 随便取个名字，粘贴复制的 <code>id_rsa.pub</code> 内容到 <code>Key</code> 中，点击 <code>Add SSH key</code> 完成添加。<br><a href="https://s2.loli.net/2024/12/19/sWiTnIvDSXNB7kZ.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/19/sWiTnIvDSXNB7kZ.png"></a></p><h4 id="验证连接"><a href="#验证连接" class="headerlink" title="验证连接"></a>验证连接</h4><p>打开 <code>Git Bash</code>，输入 <code>ssh -T git@github.com</code> 出现 <code>“Are you sure……”</code>，输入 <code>yes</code> 回车确认。</p><p><a href="https://s2.loli.net/2024/12/19/Xv3xzZFGwiYyCmI.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/19/Xv3xzZFGwiYyCmI.png"></a> </p><p>显示 <code>“Hi xxx! You&#39;ve successfully……</code>” 即连接成功。</p><h3 id="创建-Github-Pages-仓库"><a href="#创建-Github-Pages-仓库" class="headerlink" title="创建 Github Pages 仓库"></a>创建 Github Pages 仓库</h3><hr><p><code>GitHub</code> 主页右上角加号 -&gt; <code>New</code> <code>repository</code>：</p><ul><li><code>Repository</code> <code>name</code> 中输入 <code>用户名.github.io</code></li><li>勾选 “<code>Initialize</code> this repository with a README”</li><li><code>Description</code> 选填</li></ul><p>填好后点击 <code>Create repository</code> 创建。</p><p><a href="https://s2.loli.net/2024/12/19/hBGbJU5gMAKx9Vk.jpg" class="gallery-item"><img src="https://s2.loli.net/2024/12/19/hBGbJU5gMAKx9Vk.jpg"></a> </p><p>创建后默认自动启用 <code>HTTPS</code>，博客地址为：<code>https://用户名.github.io</code></p><h3 id="部署-Hexo-到-GitHub-Pages"><a href="#部署-Hexo-到-GitHub-Pages" class="headerlink" title="部署 Hexo 到 GitHub Pages"></a>部署 Hexo 到 GitHub Pages</h3><hr><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p><p>首先<strong>安装 hexo-deployer-git</strong>：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后<strong>修改 _config.yml</strong> 文件末尾的 Deployment 部分，修改成如下：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>lingzhexi/lingzhexi.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>完成后运行 <code>hexo d</code> 将网站上传部署到 <code>GitHub Pages。</code></p><p>完成！这时访问我们的 <code>GitHub</code> 域名 <code>https://lingzhexi.github.io</code> 就可以看到 Hexo 网站了。</p><h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2><h3 id="git提示：warning-LF-will-be-replaced-by-CRLF"><a href="#git提示：warning-LF-will-be-replaced-by-CRLF" class="headerlink" title="git提示：warning: LF will be replaced by CRLF"></a>git提示：warning: LF will be replaced by CRLF</h3><p>在部署的提交静态文件到Github上时：</p><blockquote><p>hexo d</p></blockquote><p><a href="https://s2.loli.net/2024/12/19/XDUYZtglH2QmwC3.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/19/XDUYZtglH2QmwC3.png"></a> </p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>Git 可以在你提交时自动地把回车（CR）和换行（LF）转换成换行（LF），而在检出代码时把换行（LF）转换成回车（CR）和换行（LF）。 你可以用<code>git config --global core.autocrlf true</code> 来打开此项功能。 如果是在 Windows 系统上，把它设置成 true，这样在检出代码时，换行会被转换成回车和换行：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#提交时转换为LF，检出时转换为CRLFgit config --global core.autocrlf true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>问题解决</p><p><a href="https://s2.loli.net/2024/12/19/Iytk1CxJeobAY69.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/19/Iytk1CxJeobAY69.png"></a> </p><h3 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a><strong>分析问题</strong></h3><blockquote><p>格式化与多余的空白字符，特别是在跨平台情况下，有时候是一个令人发指的问题。由于编辑器的不同或者文件行尾的换行符在 Windows 下被替换了，一些细微的空格变化会不经意地混入提交，造成麻烦。虽然这是小问题，但它会极大地扰乱跨平台协作。<br>其实，这是因为在文本处理中，</p></blockquote><p><a href="https://link.jianshu.com/?t=http://en.wikipedia.org/wiki/Carriage_return">CR</a>（<strong>C</strong>arriage<strong>R</strong>eturn），<a href="https://link.jianshu.com/?t=http://en.wikipedia.org/wiki/Line_feed">LF</a>（<strong>L</strong>ine<strong>F</strong>eed），<code>CR/LF</code>是不同操作系统上使用的换行符，具体如下：</p><h3 id="换行符‘-n’和回车符‘-r’"><a href="#换行符‘-n’和回车符‘-r’" class="headerlink" title="换行符‘\n’和回车符‘\r’"></a>换行符‘\n’和回车符‘\r’</h3><ul><li>回车符就是回到一行的开头，用符号r表示，十进制<code>ASCII</code>代码是13，十六进制代码为<code>0x0D</code>，回车（<code>return</code>）；</li><li>换行符就是另起一行，用n符号表示，<code>ASCII</code>代码是10，十六制为<code>0x0A</code>， 换行（<code>newline</code>）。</li></ul><p>所以我们平时编写文件的回车符应该确切来说叫做回车换行符。</p><h3 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h3><ul><li>一个直接后果是，<code>Unix/Mac</code>系统下的文件在<code>Windows</code>里打开的话，所有文字会变成一行；</li><li>而<code>Windows</code>里的文件在<code>Unix/Mac</code>下打开的话，在每行的结尾可能会多出一个^符号。</li><li><code>Linux</code>保存的文件在<code>windows</code>上用记事本看的话会出现黑点。</li></ul><p>这些问题都可以通过一定方式进行转换统一，例如，在<code>linux</code>下，命令<code>unix2dos</code> 是把<code>linux</code>文件格式转换成<code>windows</code>文件格式，命令<code>dos2unix</code> 是把windows格式转换成<code>linux</code>文件格式。</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul><li><a href="https://hexo.bootcss.com/docs/github-pages.html">Hexo/GitPage 部署</a></li><li><a href="https://zhuanlan.zhihu.com/p/60578464">使用 Hexo+GitHub 搭建个人免费博客教程（小白向）</a></li><li><a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程</a></li><li><a href="https://www.jianshu.com/p/450cd21b36a4">解决git LF/CRLF</a></li></ul></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo系列（一）|基础配置</title>
      <link href="/posts/2889.html"/>
      <url>/posts/2889.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h1><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><blockquote><p><code>Hexo</code> 中有两种形式添加摘要：</p><ul><li>文章开头配置 <code>description</code></li><li>在文章中直接添加 <code>&lt;!-- more --&gt;</code></li></ul></blockquote><h2 id="添加-description"><a href="#添加-description" class="headerlink" title="添加 description"></a>添加 <code>description</code></h2><p><code>Hexo</code> 每篇文章的开头可以表示文章的信息,其中可以添加 <code>descrption</code> 来表示正篇文章的摘要</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml">title: Hexo 显示文章摘要date: 2021-09-24 13:47:10tags: Hexocategories: Hexodescription: 显示文章摘要 # 这里表示添加文章摘要</span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加-more"><a href="#添加-more" class="headerlink" title="添加 more"></a>添加 more</h2><p>在文章的适当处直接添加</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token hr punctuation">---</span><span class="token title important"><span class="token punctuation">#</span> 前言</span><span class="token blockquote punctuation">></span> Hexo 默认的文章是全部展示，对于阅读的体验感很差，所以就需要对文章进行摘要显示部分文章内容<span class="token title important"><span class="token punctuation">#</span> Start</span><span class="token blockquote punctuation">></span> Hexo 中有两种形式添加摘要：<span class="token blockquote punctuation">></span>   <span class="token list punctuation">-</span> 文章开头配置 <span class="token code-snippet code keyword">`description`</span>  <span class="token blockquote punctuation">></span>   <span class="token list punctuation">-</span> 在文章中直接添加 <span class="token code-snippet code keyword">`&lt;!-- more -->`</span><span class="token comment">&lt;!-- more --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://s2.loli.net/2024/12/19/jfPqYSBeoyFEJaQ.png" title="202109241407073.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/19/jfPqYSBeoyFEJaQ.png" alt="202109241407073.png"></a></p><h1 id="文章置顶🔝"><a href="#文章置顶🔝" class="headerlink" title="文章置顶🔝"></a>文章置顶🔝</h1><h2 id="卸载默认的置顶方式"><a href="#卸载默认的置顶方式" class="headerlink" title="卸载默认的置顶方式"></a>卸载默认的置顶方式</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ npm uninstall hexo-generator-index --save$ npm install hexo-generator-index-pin-top --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在需要置顶的文章的Front-matter中加上top: true 或者top: 任意数字，比如：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml">title: Java 基础date: 2021-09-18 10:29:39top: true</span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置置顶图标"><a href="#设置置顶图标" class="headerlink" title="设置置顶图标"></a>设置置顶图标</h2><p>我使用主题是<code>Next</code>,其中<code>Next</code>的各版本之间略有差异，我的版本是8.7.1<br>打开<code>/themes/next/layout/_macro/</code> 目录下的<code>post.njk</code>文件<br>在<code>&lt;div class=&quot;post-meta-container&quot;&gt;</code> 内找到 <code>post-meta.njk</code> 文件路径：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-meta-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  &#123;&#123; partial('_partials/post/post-meta.njk') &#125;&#125; # 实际在 post-meta.njk 这个文件里面去修改  &#123;%- if post.description and (not theme.excerpt_description or not is_index) %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-description<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; post.description &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  &#123;%- endif %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开<code>/themes/hexo-theme-next/layout/_partials/post/post-meta.njk</code>，在 <code>&lt;div class=&quot;post-meta&quot;&gt;</code> 插入：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;% if post.top %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-meta-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-thumbtack<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>置顶<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&#123;% endif %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加位置</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-meta<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  &#123;%- set date_diff = date(post.date) != date(post.updated) %&#125;  &#123;%- set time_diff = time(post.date) != time(post.updated) %&#125;  # 插入下面的内容  &#123;% if post.top %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-meta-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-thumbtack<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>置顶<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  &#123;% endif %&#125;   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中置顶前的标签可以在 <a href="https://fontawesome.com/v5.15/icons?d=gallery&p=1"><code>Fontawesome</code></a> 替换你喜欢的</p><h1 id="文章添加字数统计和阅读时长"><a href="#文章添加字数统计和阅读时长" class="headerlink" title="文章添加字数统计和阅读时长"></a>文章添加字数统计和阅读时长</h1><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>如果没有安装 <code>hexo-wordcount</code> 插件，先安装该插件：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><code>Next</code> 主题默认集成了文章 【字数统计】和【阅读时长】，我们只需要开启配置即可，</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Post wordcount display settings</span><span class="token comment"># Dependencies: https://github.com/willin/hexo-wordcount</span><span class="token key atrule">post_wordcount</span><span class="token punctuation">:</span>  <span class="token key atrule">item_text</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">wordcount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>         <span class="token comment"># 单篇 字数统计</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token comment"># 单篇 阅读时长</span>  <span class="token key atrule">totalcount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>       <span class="token comment"># 网站 字数统计</span>  <span class="token key atrule">separated_meta</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加样式"><a href="#添加样式" class="headerlink" title="添加样式"></a>添加样式</h2><p>打开 <code>/themes/hexo-theme-next/layout/_partials/post/post-meta.njk</code> 文件，在  <code>div</code> 的最下面添加以下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; __('post.wordcount') &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-meta-divider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&amp;nbsp&amp;nbsp|&amp;nbsp&amp;nbsphe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>  字数统计:&#123;&#123; wordcount(post.content) &#125;&#125;字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; __('post.min2read') &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-meta-divider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&amp;nbsp&amp;nbsp|&amp;nbsp&amp;nbsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>far fa-clock<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>  阅读时长≈&#123;&#123; min2read(post.content) &#125;&#125;分钟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h2><p><a href="https://s2.loli.net/2024/12/19/c6CWtaduSs3lyHm.png" title="202109241340113.png" class="gallery-item"><img src="https://s2.loli.net/2024/12/19/c6CWtaduSs3lyHm.png" alt="202109241340113.png"></a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.jianshu.com/p/a9922c3ebb61">Hexo nexT主题之文章置顶</a></li><li><a href="https://juejin.cn/post/6844904037465194503">Hexo Next主题设置文章置顶</a></li><li><a href="http://wangwlj.com/2018/01/09/blog_pin_post/">Hexo博客彻底解决置顶问题</a></li><li><a href="https://fontawesome.com/v5.15/icons?d=gallery&p=1">FontAwesome 标签库</a></li><li><a href="https://ryderchan.github.io/2017/01/26/hexo%E5%B0%8F%E6%8A%80%E5%B7%A7-%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%8F%8A%E5%9B%BE%E7%89%87/">hexo小技巧-首页显示文章摘要及图片</a></li><li><a href="https://www.jianshu.com/p/baea8c95e39b">Hexo添加字数统计、阅读时长</a></li><li><a href="https://lingzhexi.github.io/2021/09/24/%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6/">Hexo 文字置顶</a></li></ul></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
